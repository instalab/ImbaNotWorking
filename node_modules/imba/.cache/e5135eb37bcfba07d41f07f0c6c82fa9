function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _2 = Imba.createTagList, _1 = Imba.createElement;
var Agents$ = require('./Agents'), Agents = Agents$.Agents, Peer = Agents$.Peer;
var Share = require('./Share').Share;
var CommitDialog = require('./CommitDialog').CommitDialog;

var LiveState = Imba.defineTag('LiveState', function(tag){
	
	tag.prototype.space = function (){
		return this.data();
	};
	
	tag.prototype.mount = function (){
		return this.schedule({interval: 1000});
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		let dur = true && (" " + this.util().duration(this.data().duration()));
		return this.$open(0).flag('button').flag('live').setChildren($.$ = $.$ || [
			_1('span',$,0,this).setText("Rec"),
			_1('span',$,1,this).flag('dur').flag('dim')
		],2).synced((
			$[1].setFlag(0,("l" + (dur.length))).setContent(dur,3)
		,true));
	};
});

var MicState = Imba.defineTag('MicState', function(tag){
	tag.prototype.space = function (){
		return this.data();
	};
	
	tag.prototype.enabled = function (){
		return this.space().userMedia();
	};
	
	tag.prototype.ontap = async function (){
		var v_;
		if (!this.space().userMedia()) { // api.peer.media
			try {
				let stream = await this.api().media().getUserMedia();
				return (this.space().setUserMedia(stream),stream);
			} catch (e) {
				return true;
			};
		} else {
			return (this.space().setUserMedia(null),null);
		};
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).flag('button').flag('mic').dataset('icon',(this.enabled() ? 'mic' : 'mutedmic')).setChildren($.$ = $.$ || [
			_1('span',$,0,this).flag('mic').setText("Mic"),
			_1('span',$,1,this).flag('status')
		// if enabled
		// 	<span> "Mic on"
		// else
		// 	<span> "Mic off"
		],2).synced((
			$[1].setContent(this.enabled() ? "on" : "off",3)
		,true));
	};
});

var PlaybackState = Imba.defineTag('PlaybackState', function(tag){
	tag.prototype.timeline = function(v){ return this._timeline; }
	tag.prototype.setTimeline = function(v){ this._timeline = v; return this; };
	
	tag.prototype.tl = function (){
		return this.timeline();
	};
	
	tag.prototype.togglePlayback = function (){
		if (this.tl().isPlaying()) {
			this.tl().pause();
			this.trigger('spacepaused');
		} else if (this.tl().isPaused()) {
			this.tl().play();
			this.trigger('spaceplay');
		};
		return this;
	};
	
	tag.prototype.icon = function (){
		return this.tl().isPaused() ? 'play' : 'pause';
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).flag('hbox').setChildren($.$ = $.$ || [
			_1('a',$,0,this).flag('icon').on$(0,['tap','togglePlayback'],this),
			_1('span',$,1,this).flag('time').flag('elapsed'),
			_1('span',$,2,this).flag('time').flag('total')
		],2).synced((
			$[0].dataset('icon',this.icon()).end(),
			$[1].setContent(this.util().msToStr(this.timeline().currentTime()),3),
			$[2].setContent(this.util().msToStr(this.timeline().duration(),0),3)
		,true));
	};
})
exports.PlaybackState = PlaybackState;

var Toggler = Imba.defineTag('Toggler', 'input', function(tag){
	tag._nodeType = 'div';
	
	tag.prototype.__checked = {watch: 'checkedDidSet',name: 'checked'};
	tag.prototype.checked = function(v){ return this._checked; }
	tag.prototype.setChecked = function(v){
		var a = this.checked();
		if(v != a) { this._checked = v; }
		if(v != a) { this.checkedDidSet && this.checkedDidSet(v,a,this.__checked) }
		return this;
	};
	tag.prototype.type = function (){
		return 'checkbox';
	};
	
	tag.prototype.checkedDidSet = function (bool){
		this.flag('checked',!!bool);
		return bool ? this.onchecked() : this.onunchecked();
	};
	
	tag.prototype.ontap = function (){
		this.setChecked(!(this.checked()));
		return this.trigger('change');
	};
	
	tag.prototype.onchecked = function (){
		return this;
	};
	
	tag.prototype.onunchecked = function (){
		return this;
	};
});

var StateControls = Imba.defineTag('StateControls', function(tag){
	
	tag.prototype.space = function (){
		return this.data();
	};
	
	tag.prototype.branch = function (){
		return this.data().branch();
	};
	
	tag.prototype.tryLogin = function (){
		return this.api().tryLogin();
	};
	
	tag.prototype.startRecording = function (){
		return this.branch().startRecording();
	};
	
	tag.prototype.stopRecording = function (){
		return this.branch().stopRecording();
	};
	
	tag.prototype.stopStreaming = function (){
		this.log('stopStreaming');
		this.stopRecording();
		return this.branch().model().end();
	};
	
	tag.prototype.share = function (e){
		this.log('share!');
		return e.uxa().open((_1(Share).flag('dialog').flag('inline').flag('xs')).bindData(this.branch(),'model',[]).end(),{anchor: true});
	};
	
	tag.prototype.finish = function (e){
		this.log('finish');
		this.stopStreaming();
		return e.uxa().open((_1(CommitDialog).flag('dialog').flag('modal')).bindData(this,'branch',[]).end(),{anchor: false});
	};
	
	tag.prototype.toggleMic = async function (){
		var v_;
		if (this.space().isSpectating()) { return };
		
		if (!this.space().userMedia()) { // api.peer.media
			try {
				let stream = await this.api().media().getUserMedia();
				return (this.space().setUserMedia(stream),stream);
			} catch (e) {
				return true;
			};
		} else {
			return (this.space().setUserMedia(null),null);
		};
	};
	
	tag.prototype.render = function (){
		var $ = this.$, self = this;
		var rec = self.space().recording();
		var hasTerm = self.space().inspector().visible();
		var hasBrowser = self.space().browser().visible();
		var hasMic = self.space().userMedia();
		var hasRecs = self.branch().hasRecordings();
		
		return self.$open(0).setChildren([
			
			self.branch().isHosting() ? Imba.static([
				($[0] || _1('div',$,0,self).flag('button').flag('terminal').flag('toggler').setContent([
					_1('input',$,1,0).setType('checkbox'),
					_1('span',$,2,0).flag('icon').setText('terminal'),
					_1('output',$,3,0)
				],2)).setTip(("" + (hasTerm ? "Hide" : "Show") + " Terminal")).end((
					$[1].bindData(self.space().inspector(),'visible',[]).end()
				,true)),
				// "{hasBrowser ? "Hide" : "Show"} Browser"
				($[4] || _1('div',$,4,self).flag('button').flag('browser').flag('toggler').setContent([
					_1('input',$,5,4).setType('checkbox'),
					_1('span',$,6,4).flag('icon').setText('browser'),
					_1('output',$,7,4)
				],2)).setTip(("" + (hasBrowser ? "Hide" : "Show") + " Browser")).end((
					$[5].bindData(self.space().browser(),'visible',[]).end()
				,true))
			],2,1) : void(0),
			
			(function tagLoop($0) {
				for (let i = 0, items = iter$(self.space().peers()), len = $0.taglen = items.length; i < len; i++) {
					($0[i] || _1(Peer,$0,i)).setData(items[i]).setSpace(self.space()).end();
				};return $0;
			})($[8] || _2($,8)),
			
			(self.branch().model().isLive() || hasMic) ? (
				($[9] || _1('div',$,9,self).flag('button').flag('mic').flag('toggler').on$(0,['tap','toggleMic'],self).setNestedAttr('tip','followCursor',true).setContent([
					_1('input',$,10,9).flag('passive').setType('checkbox'),
					_1('span',$,11,9).flag('icon').setText("Mic"),
					_1('output',$,12,9)
				],2)).setTip(("" + (hasMic ? "Disable" : "Enable") + " Microphone")).end((
					$[10].setChecked((!(!self.space().userMedia()))).end()
				,true))
			) : void(0),
			
			(!self.api().user()) ? (
				($[13] || _1('a',$,13,self).flag('button').flag('github').dataset('icon','github').on$(0,['tap','tryLogin'],self).setContent($[14] || _1('span',$,14,13).setText('Sign in'),2)).end()
			) : void(0),
			
			self.branch().canRecord() ? (
				($[15] || _1('div',$,15,self).flag('button').flag('red').on$(0,['tap','startRecording'],self).setText('Rec')).setTip(("" + (hasRecs ? "Continue" : "Start") + " Recording")).end()
			) : (self.branch().isRecording() ? (
				self.branch().isHosting() ? Imba.static([
					($[16] || _1(LiveState,$,16,self).flag('mine')).bindData(self.space().stream(),'recording',[]).end(),
					($[17] || _1('div',$,17,self).flag('button').flag('red').on$(0,['tap','stopRecording'],self).setTip("Stop Recording").setText('Stop')).end()
				],2,2) : (
					($[18] || _1(LiveState,$,18,self)).bindData(self.space().stream(),'recording',[]).end()
				)
				// <.button.red :tap.stopRecording> 'Stop recording'
			) : void(0)),
			
			// elif branch.isRecording
			// 	<LiveState[space].mine>
			// 	<.button.red :tap.trigger('stoplive')> 'Stop'
			
			self.branch().isMine() ? (
				($[19] || _1('div',$,19,self).flag('button').flag('share').flag('blue').on$(0,['tap','share'],self).setText('Share'))
			) : void(0),
			
			(self.branch().isHosting() && self.branch().isLive() && self.branch().hasRecordings()) ? (
				($[20] || _1('div',$,20,self).flag('button').flag('finish').flag('blue').on$(0,['tap','finish'],self).setText('Finish'))
			) : void(0),
			
			(!self.branch().isLive() && self.space().option('inlineTrack')) ? (
				($[21] || _1(PlaybackState,$,21,self)).bindData(self,'branch',[]).setTimeline(self.branch().timeline()).end()
			) : void(0)
		
		// <a.tool.flash.settings data-icon='morevert' :tap.showSettings>
		// if branch.canGoLive and branch == space.trunk
		//	<.button.red.unless-pip :tap.trigger('golive')> 'Go Live'
		// if branch.isBroadcasting
		// 	if branch.isHosting
		// 		<LiveState[space].mine>
		// 		<.button.red :tap.trigger('stoplive')> 'Stop'
		// 	else
		// 		<LiveState[space]>
		
		// <MicState[space]>
		// <.contents.peers>
		],1).synced();
	};
})
exports.StateControls = StateControls;
