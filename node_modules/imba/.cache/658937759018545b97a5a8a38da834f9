var Imba = require('imba'), _1 = Imba.createElement;
var uxa$ = require('uxa'), IconButton = uxa$.IconButton, Button = uxa$.Button;
var CastTile = require('./CastTile').CastTile;

var Circle = Imba.defineTag('Circle', function(tag){
	
	tag.prototype.__rounds = {'default': 0,name: 'rounds'};
	tag.prototype.rounds = function(v){ return this._rounds; }
	tag.prototype.setRounds = function(v){ this._rounds = v; return this; }
	tag.prototype._rounds = 0;
	tag.prototype.__radius = {'default': 26,name: 'radius'};
	tag.prototype.radius = function(v){ return this._radius; }
	tag.prototype.setRadius = function(v){ this._radius = v; return this; }
	tag.prototype._radius = 26;
	
	tag.prototype.setup = function (){
		var width = 60;
		var r = this.radius();
		var dash = 2 * Math.PI * r;
		var svg = ("<circle cx='" + (width * 0.5) + "' cy='" + (width * 0.5) + "' r='" + r + "' stroke-dasharray='" + dash + "' stroke-dashoffset='0'/>");
		this.dom().innerHTML = ("<svg viewBox='0 0 " + width + " " + width + "' version='1.1' width='" + width + "' height='" + width + "' xmlns='http://www.w3.org/2000/svg'>" + svg + "</svg><div class='circle' data-icon='play'></div>");
		// console.log "svg innerHTML",@dom:children[0]
		this._element = this._dom.children[0].childNodes[0];
		this._div = this._dom.children[1];
		
		this._div.style.width = this._div.style.height = (r * 2) + 'px';
		this.render();
		return this;
	};
	
	tag.prototype.draw = function (progress){
		if(progress === undefined) progress = 0;
		var length = 2 * Math.PI * this.radius();
		this._progress = progress;
		this._element.style["stroke-dashoffset"] = length * (1 - progress);
		return this;
	};
	
	tag.prototype.cancel = function (){
		var self = this;
		if (self._animation) {
			self._animation && self._animation.cancel  &&  self._animation.cancel();
			self._animation = null;
			self.anim().animate(self._progress,0,300,function(v) { return self.draw(v); },'linear');
		};
		return self;
	};
	
	tag.prototype.ontap = function (){
		// @animation ? cancel : animate
		return this;
	};
	
	tag.prototype.animate = function (complete){
		var self = this;
		return self._animation = self.anim().animate(0,1,10000,function(v) { return self.draw(v); },'linear',function() {
			return complete ? complete(self) : null;
		});
	};
	
	
	tag.prototype.render = function (){
		return this;
	};
});

var NextUpInstance = null;

var NextUpView = Imba.defineTag('NextUpView', function(tag){
	
	tag.prototype.context = function(v){ return this._context; }
	tag.prototype.setContext = function(v){ this._context = v; return this; };
	
	tag.prototype.oncancel = function (e){
		e.halt();
		return this.cancel();
	};
	
	tag.prototype.onfinish = function (e){
		var url = this.data().url(this.context());
		this.router().un('change',this.cancel);
		this.router().go(url);
		this.trigger('uxa:hide');
		return this;
	};
	
	tag.prototype.play = function (){
		this._circle.cancel();
		return this.trigger('finish');
	};
	
	tag.prototype.cancel = function (){
		var self = this;
		self.router().un('change',self.cancel);
		self._circle.cancel();
		return setTimeout(function() { return self.trigger('uxa:hide'); },200);
	};
	
	tag.prototype.mount = function (){
		var self = this;
		self.cancel = self.cancel.bind(self);
		self.router().on('change',self.cancel);
		NextUpView.Instance = self;
		self._circle.animate(function() {
			return self.trigger('finish');
		});
		return self;
	};
	
	tag.prototype.unmount = function (){
		NextUpView.Instance = null;
		this.router().un('change',this.cancel);
		return this;
	};
	
	tag.prototype.render = function (){
		var $ = this.$, t0;
		return this.$open(0).setChildren($.$ = $.$ || [
			this._tile = this._tile||_1(CastTile,this).flag('tile').flag('float'),
			t0 = (t0=_1('div',$,0,this)).flag('over').setContent([
				this._circle = this._circle||_1(Circle,t0).flag('circle').on$(0,['tap','play'],this),
				_1(Button,$,1,t0).flag('cancel').flag('sm').setAction('cancel').setLabel('cancel')
			],2)
		],2).synced((
			this._tile.bindData(this,'data',[]).setContext(this.context()).end(),
			this._circle.end(),
			$[1].end()
		,true));
	};
})
exports.NextUpView = NextUpView;
