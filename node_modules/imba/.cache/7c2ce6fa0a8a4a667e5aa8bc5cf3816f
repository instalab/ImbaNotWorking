var Imba = require('imba'), _1 = Imba.createElement;
var uxa$ = require('uxa'), Dialog = uxa$.Dialog, TextField = uxa$.TextField, TextArea = uxa$.TextArea, Button = uxa$.Button;
var Select = require('./Controls').Select;
var PrivacyField = require('./PrivacyField').PrivacyField;

Imba.extendTag('iframe', function(tag){
	tag.prototype.allowfullscreen = function(v){ return this.getAttribute('allowfullscreen'); }
	tag.prototype.setAllowfullscreen = function(v){ this.setAttribute('allowfullscreen',v); return this; };
});

var EmbedTextarea = Imba.defineTag('EmbedTextarea', 'textarea', function(tag){
	tag.prototype.castId = function (){
		return this.data();
	};
	
	tag.prototype.url = function (){
		return ("https://scrimba.com/cast/" + this.castId() + ".embed");
	};
	
	tag.prototype.embedHTML = function (){
		var t0, embed;
		return this._embedHTML || (this._embedHTML = true && (
			embed = (t0 = (t0=_1('div')).css('position',"relative").setContent(
				t0.$.A || _1('iframe',t0.$,'A',t0).css('border',0).css('position',"absolute").css('width','100%').css('height','100%').setAllowfullscreen(true)
			,2)).css('paddingBottom',("" + (9 / 16 * 100) + "%")).end((
				t0.$.A.setSrc(this.url()).end()
			,true)),
			embed.dom().outerHTML
		));
	};
	
	tag.prototype.ontap = function (){
		return this.dom().select();
	};
	
	tag.prototype.render = function (){
		this.css('font-family','monospace');
		this.setValue(this.embedHTML());
		return this.setAttribute('readonly',true);
	};
});



var CastDialog = Imba.defineTag('CastDialog', Dialog, function(tag){
	
	tag.prototype.body = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		return (t0 = this._body = this._body||(t0=_1('div',this)).flag('body').setContent([
			_1(TextField,t0.$,'A',t0).setType('text').setName('title').setLabel('Title').setRequired(true).setPlaceholder('Untitled cast').setAutocomplete("off"),
			_1(TextArea,t0.$,'B',t0).flag('mb-md').setName('description').setLabel('Description').setDesc('Short description (markdown supported)'),
			_1(PrivacyField,t0.$,'C',t0) // are we sure?
		],2)).end((
			t0.$.A.end(),
			t0.$.B.end(),
			t0.$.C.bindData(this,'data',[]).end()
		,true));
	};
	
	tag.prototype.onuxasubmit = function (e){
		var self = this;
		return self.uxa().queue().add(200,async function() {
			var vals = self.formData();
			self.log('onsubmit',vals);
			// WARN must validate which fields one can update?
			return await self.api().db().get(self.data().id).update(vals);
		});
	};
})
exports.CastDialog = CastDialog;
