function len$(a){
	return a && (a.len instanceof Function ? a.len() : a.length) || 0;
};
function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _2 = Imba.createTagList, _3 = Imba.createTagLoopResult, _1 = Imba.createElement;

var uxa$ = require('uxa'), IconButton = uxa$.IconButton, Actionable = uxa$.Actionable, Button = uxa$.Button, Menu = uxa$.Menu, MenuItem = uxa$.MenuItem;


var BranchMenuItem = Imba.defineTag('BranchMenuItem', MenuItem, function(tag){
	
	tag.prototype.render = function (){
		var $ = this.$;
		var owner = this.data().owner();
		return this.$open(0).setChildren(
			$[0] || _1('div',$,0,this).flag('text')
		,2).synced((
			$[0].setContent([
				($[1] || _1('span',$,1,0).flag('title')).setContent(this.data().title,3),
				owner ? Imba.static([
					($[2] || _1('span',$,2,0).flag('by').setText(' by ')),
					($[3] || _1('span',$,3,0).flag('author')).setContent((owner.name || owner.username),3)
				],2,1) : void(0)
			],1)
		,true));
	};
});

var BranchesMenu = Imba.defineTag('BranchesMenu', Menu, function(tag){
	
	tag.prototype.render = function (){
		var self = this, $ = this.$;
		return self.$open(0).setChildren(
			(function tagLoop($0) {
				for (let i = 0, items = iter$(self.data()), len = $0.taglen = items.length, item; i < len; i++) {
					item = items[i];
					($0[i] || _1(BranchMenuItem,$0,i).setAction('goto')).setData(item).setFlag(0,item.type).setLabel(item.title).end();
				};return $0;
			})($[0] || _2($,0))
		,4).synced();
	};
});


var MenuButton = Imba.defineTag('MenuButton', Button, function(tag){
	tag.prototype.badge = function(v){ return this._badge; }
	tag.prototype.setBadge = function(v){ this._badge = v; return this; };
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).setChildren([
			this.icon() ? (
				($[0] || _1('i',$,0,this).flag('sicon')).dataset('name',this.icon()).end()
			) : void(0),
			this.label() ? (
				($[1] || _1('b',$,1,this)).setContent(this.label(),3)
			) : void(0),
			this.badge() ? (
				($[2] || _1('em',$,2,this)).setContent(this.badge(),3)
			) : void(0)
		],1).synced();
	};
});

var BranchesButton = Imba.defineTag('BranchesButton', MenuButton, function(tag){
	
	tag.prototype.badge = function (){
		return len$(this.data());
	};
	
	tag.prototype.commit = function (){
		// dataset(badge: data.len)
		this.flag('disabled',len$(this.data()) == 0);
		return tag.prototype.__super__.commit.apply(this,arguments);
	};
	
	tag.prototype.ontap = function (e){
		e.halt();
		if (len$(this.data()) > 0) { return this.uxa().open((_1(BranchesMenu)).bindData(this,'data',[]).end()) };
	};
});


var Context = Imba.defineTag('Context')
exports.Context = Context;

var SpaceViewHeader = Imba.defineTag('SpaceViewHeader', function(tag){
	
	tag.prototype.branch = function(v){ return this._branch; }
	tag.prototype.setBranch = function(v){ this._branch = v; return this; };
	
	tag.prototype.space = function (){
		return this.data();
	};
	
	tag.prototype.onback = function (e){
		e.halt();
		if (this.branch().parent()) {
			return this.space().navigateTo(this.branch().parent());
		};
	};
	
	
	tag.prototype.ongoto = function (e,branch){
		e.halt();
		return this.space().navigateTo(branch);
	};
	
	tag.prototype.navigateTo = function (branch){
		this.space().navigateTo(branch);
		return this;
	};
	
	tag.prototype.render = function (){
		var $ = this.$, v_, self = this;
		var branch = (this.setBranch(v_ = this.space().branch()),v_);
		var scope = branch.ancestors();
		var type = branch.type();
		var trunk = this.space().trunk();
		var tl = this.space().timeline();
		
		var notes = this.space().model().notes();
		var owner = branch.model().owner();
		var playlist = this.space().playlist();
		var group = playlist && playlist.group() || this.space().model().group();
		
		this.flag('annotating',branch.isAnnotating());
		this.flag('recording',branch.isRecording());
		
		if (owner && !owner.url) {
			throw new Error(("owner is of wrong type? JSON=" + JSON.stringify(owner) + " constructor=" + (owner.constructor)));
		};
		
		return this.$open(0).flag('NavBar').setFlag(-1,branch.type()).flagIf('published',(branch.isPublished())).setChildren($[0] || _1('div',$,0,this).flag('body'),2).synced((
			$[0].setContent([
				($[1] || _1('i',$,1,0).flag('scrimbacon').flag('bullet').flag('icon')),
				// <IconButton.bullet icon=icons[branch.type] action='back'>
				($[2] || _1('div',$,2,0).flag('nav').setContent([
					_1('div',$,3,2).flag('scope'),
					
					_1('div',$,13,2).flag('context')
				],2)).end((
					$[3].setContent([
						($[4] || _1('a',$,4,3).setHref("/").setText("Scrimba.com")).end(),
						
						group ? Imba.static([
							($[5] || _1('span',$,5,3).flag('arrow').setText("»")),
							($[6] || _1('a',$,6,3).flag('group')).setFlag(0,group.type).setHref(group.url()).setContent(group.name || group.title,3).end()
						],2,1) : void(0),
						
						(playlist && !group) ? Imba.static([
							($[7] || _1('span',$,7,3).flag('arrow').setText("»")),
							($[8] || _1('a',$,8,3).flag('playlist')).setHref(playlist.url()).setContent(playlist.title,3).end()
						],2,2) : void(0),
						
						(!group && !playlist && owner) ? Imba.static([
							($[9] || _1('span',$,9,3).flag('arrow').setText("»")),
							($[10] || _1('a',$,10,3).flag('user')).setHref(owner.url()).setContent(owner.username,3).end()
						],2,3) : void(0),
						
						(function tagLoop($0,$1,$$) {
							for (let i = 0, items = iter$(scope), len = items.length, item; i < len; i++) {
								item = items[i];
								$$.push(($0[i] || _1('span',$0,i).flag('arrow').setText("»")));
								$$.push(($1[i] || _1('a',$1,i)).setFlag(0,item.type()).on$(0,['tap',['navigateTo',item]],self).setContent(item.title(),3));
							};return $$;
						})($[11] || _2($,11,$[3]),$[12] || _2($,12,$[3]),_3())
					],1),
					$[13].setContent(
						(branch.type() == 'fork') ? (
							($[14] || _1('span',$,14,13).flag('title')).setContent(branch.title(),3)
						) : (
							($[15] || _1('span',$,15,13).flag('title')).setContent(branch.title(),3)
						)
					// if owner
					// 	<span.by> ' by '
					// 	<a.author href=owner.url> (owner:name or owner:username)
					
					// if space.annotation
					//	<span.annotation> "Question!"
					,3)
				,true)),
				
				// if branch.isAnnotating
				// 	<.buttons.flat.contextual>
				// 		<MenuButton[branch] action='brushupstop' icon='left9' label='Back'>
				// 		<MenuButton[branch] action='brushupstop' icon='checkmark2' label='Save'>
				
				// if branch.recording
				// 	<.buttons.flat.contextual>
				// 	#	<MenuButton[branch].rec action='recstop' icon='mic' label='Stop recording'>
				
				(branch.type() == 'note') ? (
					($[16] || _1('div',$,16,0).flag('buttons').flag('flat').flag('contextual')).setContent([
						($[17] || _1(MenuButton,$,17,16).flag('back').setAction('goto').setIcon('left9').setLabel('Resume watching')).bindData(branch,'parent',[]).end(),
						
						branch.isLocal() ? Imba.static([
							($[18] || _1(MenuButton,$,18,16).setAction('branchdiscard').setIcon('trash2').setLabel('Discard')).setData(branch).end(),
							($[19] || _1(MenuButton,$,19,16).setAction('branchsave').setIcon('pencil3').setLabel('Save')).setData(branch).end()
						],2,4) : void(0)
					// else
					// 	<MenuButton[branch] action='branchdelete' icon='trash2' label='Delete'>
					],1)
				) : void(0),
				
				($[20] || _1('div',$,20,0).flag('buttons').flag('flat').flag('shared')).setContent(
					// if branch.canAnnotate
					// 	<MenuButton[branch] icon='tool' action='annotate' label='Brushup'>
					branch.canPublish() ? (
						($[21] || _1(MenuButton,$,21,20).setIcon('checkmark2').setAction('branchpublish').setLabel('Publish')).setData(branch).end()
					) : void(0)
				,3),
				
				($[22] || _1('div',$,22,0).flag('buttons').flag('flat').flag('pinned').setContent(
					// <MenuButton.settings icon='cog' action='spacemenu' label='Settings'>
					$[23] || _1(MenuButton,$,23,22).flag('drawer').setIcon('menu').setAction('toggledrawer').setLabel('Drawer')
				,2)).end((
					$[23].end()
				,true))
			],1)
		,true));
	};
})
exports.SpaceViewHeader = SpaceViewHeader;
