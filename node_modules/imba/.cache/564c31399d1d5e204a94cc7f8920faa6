function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var self = {};
var env = require('../env');
var db = require('../server/db').db;
var DB = require('../store/db').DB;

var pidExists = require('process-exists');

// var adapter

// TODO move ROLE constants out into shared file
// export def transaction trx, &func

exports.lookup = self.lookup = async function (id){
	// where(id: id).orW
	return await db.table('entities').where({ref: id}).first();
};

exports.acquire = self.acquire = async function (data){
	var v_;
	let peer;
	
	data.seen = new Date();
	
	if (data.id) {
		peer = await db.table('peers').where({id: data.id}).first();
	};
	
	if (peer && !peer.closed && peer.sid == data.sid) {
		data.id = peer.id;
		await db.table('peers').update(data).where({id: peer.id});
	} else {
		(((v_ = data.id),delete data.id, v_));
		let res = await db.table('peers').returning('id').insert(data);
		data.id = res[0];
	};
	
	return data.id;
	// db.table('peers').where(id: data:id).first
};

exports.release = self.release = async function (id){
	// await db.raw('select api_peers_release(?,?)',[id,env.id])
	// .update(worker: null).where(id: id, worker: env.id)
	// await db.table('peers').update(worker: null).where(id: id, worker: env.id)
	var res = await db.table('peers').update({worker: null}).where({id: id,worker: env.id()});
	return 1;
};

exports.cleanup = self.cleanup = async function (){
	// find all peers supposedly connected to workers
	var workers = await db.raw("select count(*) as peers, worker as id from peers where worker is not null and worker != ? group by worker",env.id());
	// process could theoretically run on seperate machine
	// in which case the nodes should do something else
	var exists = await pidExists.all(workers.rows.map(function(w) { return w.id; }));
	
	for (let i = 0, items = iter$(workers.rows), len = items.length, worker; i < len; i++) {
		worker = items[i];
		if (!exists.get(worker.id)) {
			console.log("cleaning up old sockets(!)");
			await db.table('peers').update({worker: null}).where({worker: worker.id});
		};
	};
	
	return 1;
};
