var self = {};
if (true) {
	var fs = require('fs');
	var path = require('path');
	var scrimbaEnv = (process.env.SCRIMBA_ENV || process.env.NODE_ENV || 'development').toLowerCase();
	var cfgSource = path.resolve(__dirname,"..",("env." + scrimbaEnv + ".json"));
	var custom = require('../env.json');
	var fallback = require('../env.example.json');
	
	if (fs.existsSync(cfgSource)) {
		// console.log "found env-config",cfgSource
		custom = Object.assign({},custom,require(cfgSource));
		// custom = require(cfgSource)
	};
	if (custom[("env_" + scrimbaEnv)]) {
		// console.log "including custom env options for {scrimbaEnv}"
		custom = Object.assign({},custom,custom[("env_" + scrimbaEnv)]);
	};
	
	var crypto = require('crypto');
	path = require('path');
};

var root = __dirname + '/..';

var cached = {};
var warned = {};
var t0 = Date.now();

cached.WORKER_ID = process.pid;

exports.id = self.id = function (){
	return cached.WORKER_ID;
};

exports.absPath = self.absPath = function (pathname){
	return path.resolve(root,pathname);
};

exports.get = self.get = function (key){
	var value = cached[key];
	
	if (!custom[key] && fallback[key] && !warned[key]) {
		warned[key] = true;
		console.warn(("ENV variable " + key + " is only found in env.example.json"));
	};
	
	value || (value = process.env[key] || custom[key] || fallback[key]);
	
	if (/^\.\//.test(value)) {
		value = path.resolve(root,value);
	};
	
	return cached[key] || (cached[key] = value);
};

exports.set = self.set = function (key,value){
	cached[key] = value;
	return null;
};

exports.encrypt = self.encrypt = function (value,salt){
	if(salt === undefined) salt = '';
	let key = self.get('ENV_SECRET');
	let iv = (String(salt) + key).substr(0,16);
	var cipher = crypto.createCipheriv('aes-256-ctr',key,iv);
	var crypted = cipher.update(value,'utf8','hex');
	crypted += cipher.final('hex');
	return crypted;
};

exports.decrypt = self.decrypt = function (value,salt){
	if(salt === undefined) salt = '';
	let key = self.get('ENV_SECRET');
	let iv = (String(salt) + key).substr(0,16);
	var decipher = crypto.createDecipheriv('aes-256-ctr',key,iv);
	var dec = decipher.update(value,'hex','utf8');
	dec += decipher.final('utf8');
	return dec;
};

exports.log = self.log = function (msg){
	return console.log(("" + (Date.now() - t0) + "ms "),msg);
};

var port = Number(self.get('PORT') || 8000);
self.get('SITE_PORT') || self.set('SITE_PORT',port);
self.get('YAAS_PORT') || self.set('YAAS_PORT',port + 2);
