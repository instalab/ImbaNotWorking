var Imba = require('imba');
// externs;
// externs;

var Url = require('./url').Url;

function Router(app,url,defaults){
	if(defaults === undefined) defaults = {};
	this._url = url;
	this._app = app;
	this._defaults = defaults;
	this._routes = {};
	
	if (false) {};
	this;
};

exports.Router = Router; // export class 
Router.prototype.path = function(v){ return this._path; }
Router.prototype.setPath = function(v){ this._path = v; return this; };
Router.prototype.shouldReload = function(v){ return this._shouldReload; }
Router.prototype.setShouldReload = function(v){ this._shouldReload = v; return this; };
Router.prototype.history = function(v){ return this._history; }
Router.prototype.setHistory = function(v){ this._history = v; return this; };

Router.slug = function (str){
	str = str.replace(/^\s+|\s+$/g,'').toLowerCase(); // trim
	
	var from = "àáäâåèéëêìíïîòóöôùúüûñç·/_,:;";
	var to = "aaaaaeeeeiiiioooouuuunc------";
	str = str.replace(/[^a-z0-9 -]/g,''); // remove invalid chars
	str = str.replace(/\s+/g,'-'); // collapse whitespace and replace by -
	str = str.replace(/-+/g,'-'); // collapse dashes
	
	return str;
};

Router.prototype.emit = function (name){
	var $0 = arguments, i = $0.length;
	var params = new Array(i>1 ? i-1 : 0);
	while(i>1) params[--i - 1] = $0[i];
	return Imba.emit(this,name,params);
};

Router.prototype.on = function (name){
	var Imba_;
	var $0 = arguments, i = $0.length;
	var params = new Array(i>1 ? i-1 : 0);
	while(i>1) params[--i - 1] = $0[i];
	return Imba.listen.apply(Imba,[].concat([this,name], [].slice.call(params)));
};

Router.prototype.once = function (name){
	var Imba_;
	var $0 = arguments, i = $0.length;
	var params = new Array(i>1 ? i-1 : 0);
	while(i>1) params[--i - 1] = $0[i];
	return Imba.once.apply(Imba,[].concat([this,name], [].slice.call(params)));
};

Router.prototype.un = function (name){
	var Imba_;
	var $0 = arguments, i = $0.length;
	var params = new Array(i>1 ? i-1 : 0);
	while(i>1) params[--i - 1] = $0[i];
	return Imba.unlisten.apply(Imba,[].concat([this,name], [].slice.call(params)));
};

Router.prototype.api = function (){
	return this._app.api();
};

Router.prototype.refresh = function (params){
	if (false && this.path() != this._gpath) {
		this._url = new Url(window.location);
		this._gpath = this.path();
		this._history.unshift(this.path());
		Imba.emit(this,'change',[this.path(),params]);
		ga('send','pageview',this.path());
	};
	return this;
};

Router.prototype.reload = function (){
	// console.log "reloading route"
	document.location.reload();
	return this;
};

Router.prototype.hashDidChange = function (e){
	return Imba.emit(this,'hashchange');
};

Router.prototype.onpopstate = function (e){
	// console.log "onpopstate",e,window:history:state
	if (this._repushState && (Date.now() - this._repushState) < 1000) {
		// console.log "dropRepushState"
		this._repushState = null;
		return this;
	};
	
	var allow = this.canNavigate(this.path());
	
	if (allow) {
		return this.refresh({pop: true});
	} else {
		this._repushState = Date.now();
		return this.forward();
	};
};

Router.prototype.canNavigate = function (path,origEvent){
	var block = this._app && this._app.trigger  &&  this._app.trigger('beforenavigate',{path: path,sourceEvent: origEvent});
	if (block && (block._prevented || block._cancel)) {
		if (!origEvent) {
			let confirm = window.confirm("Are you sure you want to navigate away from this page?","Changes that you made may not be saved.");
			if (confirm) { return true };
		};
		return false;
	};
	return true;
};

Router.prototype.forward = function (){
	return window.history.forward();
};

Router.prototype.back = function (){
	return window.history.back();
};

Router.prototype.url = function (){
	return this._url;
};

Router.prototype.path = function (){
	return this.url().path();
};

Router.prototype.hash = function (){
	return this.url().hash();
};

Router.prototype.setHash = function (value){
	this.url().setHash(value);
	return this;
};

Router.prototype.ext = function (){
	var path = this.path();
	var m = path.match(/\.([^\/]+)$/);
	return m && m[1] || '';
};

Router.prototype.segment = function (nr){
	if(nr === undefined) nr = 0;
	return this.path().split('/')[nr + 1] || '';
};

Router.prototype.go = function (href,state,replace){
	if(state === undefined) state = {};
	if(replace === undefined) replace = false;
	if (href == this.path()) {
		return;
	};
	
	var allow = this.canNavigate(href);
	
	if (!allow) {
		return;
	};
	
	if (window.top != window && !href.match(/^\/(c|p)/)) {
		window.open(href);
	} else if (replace) {
		history.replaceState(state,null,href);
	} else {
		history.pushState(state,null,href);
	};
	
	// @history.unshift(href)
	
	this.shouldReload() ? this.reload() : this.refresh();
	return this;
};

Router.prototype.get = function (){
	return null;
};

// extending element
Imba.extendTag('element', function(tag){
	
	tag.prototype.router = function (){
		return this.root().router();
	};
});

// extending links
Imba.extendTag('a', function(tag){
	// messing up - can be handled multiple times
	tag.prototype.onclick = function (e){
		if (!e.event()._imbaSimulatedTap) {
			e.event()._imbaSimulatedTap = true;
			return this.ontap(e);
		};
	};
	
	tag.prototype.ontap = function (e){
		e.event()._imbaSimulatedTap = true;
		
		if (!(this.href())) {
			e._responder = null;
			return;
		};
		
		var href = this.href().replace(document.location.origin,'');
		
		if (e.event().metaKey || e.event().altKey || this.hasFlag('external') || this.dom().hasAttribute('target')) {
			e._responder = null;
			return e.stop();
		};
		
		let override = this.trigger('taplink',{href: href,originalEvent: e});
		
		if (override.isPrevented()) {
			e._responder = null;
			return e.prevent().stop();
		};
		
		if (href[0] == '#' || href[0] == '/') {
			e.prevent().stop();
			// console.log "go to route!",href
			this.router().go(href,{});
			this.trigger('routed',href);
			Imba.Events.trigger('route',this);
		} else {
			e._responder = null;
			return e.stop();
		};
		return this;
	};
	
	// def render
});

