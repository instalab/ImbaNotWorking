var Imba = require('imba');
var List = require('../util/List').List;

var WidgetTypes = exports.WidgetTypes = {};

function Widgets(){ return List.apply(this,arguments) };

Imba.subclass(Widgets,List);
exports.Widgets = Widgets; // export class 
Widgets.register = function (name,type){
	WidgetTypes[name] = type;
	return type.TYPE = type.prototype.TYPE = name;
};

Widgets.type = function (name){
	return WidgetTypes[name] || Widgets[name];
};

// seems weird to use this - should rather link widgets directly in protocol
Widgets.prototype.create = function (type,data,event){
	if ((typeof type=='string'||type instanceof String)) { type = WidgetTypes[type] };
	(data.id == null) ? (data.id = this.nextId()) : data.id;
	data.type || (data.type = type.TYPE);
	
	return new (type || WidgetTypes.widget)(this._owner,data,event); // do we really need to add it?
};

Widgets.prototype.load = function (params,event){
	return this.get(params.id) || this.create(params.type,params,event);
};
