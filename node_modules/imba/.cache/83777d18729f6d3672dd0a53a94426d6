var Imba = require('imba'), _3 = Imba.createTagList, _2 = Imba.createTagMap, _1 = Imba.createElement;


var Radio = require('./Controls').Radio;

var descs = {
	lab: "Allows audience to follow along with their own live versions. All changes will be broadcasted live.",
	tutorial: "Tutorials are not visible to others until you have decided to publish them.",
	template: "Create a template for your own use"
};

var types = [
	{value: 'lab',title: "Playground",desc: "Experiment"},
	{value: 'tutorial',title: "Screencast",desc: "Record a tutorial"},
	// {value: 'challenge', title: "Challenge", desc: "Assignment for others"}
	{value: 'template',title: "Template",desc: "Create & reuse"}
];

var CastTypeField = Imba.defineTag('CastTypeField', function(tag){
	tag.prototype.label = function(v){ return this._label; }
	tag.prototype.setLabel = function(v){ this._label = v; return this; };
	tag.prototype.pattern = function(v){ return this._pattern; }
	tag.prototype.setPattern = function(v){ this._pattern = v; return this; };
	
	tag.prototype.render = function (){
		var $ = this.$, self = this;
		var value = self.value();
		
		return self.$open(0).setChildren([
			self.label() ? (
				($[0] || _1('label',$,0,self).flag('caption')).setContent(self.label(),3)
			) : void(0),
			($[1] || _1('div',$,1,self).flag('Radios').flag('group').flag('xl')).setContent(
				(function tagLoop($0) {
					var $$ = $0.$iter();
					for (let i = 0, len = types.length, item; i < len; i++) {
						item = types[i];
						if (self.pattern() && !self.pattern().test(item.value)) { continue; };
						$$.push(($0[i] || _1(Radio,$0,i).setName('type').setTabindex(1)).setValue(item.value,1).setLabel(item.title).setDesc(item.desc).end());
					};return $$;
				})($[2] || _2($,2,$[1]))
			,5)
		],1).synced();
	};
	
	tag.prototype.value = function (){
		var checked = this.dom().querySelector('input:checked');
		return checked && checked.value || null;
	};
	
	tag.prototype.onchange = function (e){
		this.log('onchange',e);
		this.render();
		return this;
	};
})
exports.CastTypeField = CastTypeField;
