function len$(a){
	return a && (a.len instanceof Function ? a.len() : a.length) || 0;
};
function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var self = {};
if (true) {
	var nodefetch = require('node-fetch');
};

exports.fetch = self.fetch = async function (url){
	url = url.split('?').shift();
	var fetcher = true && nodefetch;
	
	var resp = await fetcher(url);
	var text = await resp.text();
	
	var slides = [];
	var data = {url: url};
	
	let datastr = "";
	let idx = text.indexOf("docData:");
	let stack = 0;
	while (idx < text.length){
		let chr = text[idx++];
		if (chr == '[') {
			stack++;
		} else if (chr == ']') {
			stack--;
			if (stack == 0) {
				datastr += ']';
				break;
			};
		};
		
		if (stack >= 1) {
			datastr += chr;
		};
	};
	
	try {
		var metadata = JSON.parse(datastr);
	} catch (e) { };
	var slideData = {};
	var slideIds = [];
	// console.log "viewerData",metadata
	text.replace(/setPageData\(\'([^\)\']+)/g,function(m,id) {
		slideIds.push(id);
		return "";
	});
	
	data.ids = slideIds.slice();
	
	// [\S\s]*setPageData\(\'([^\)\']+)
	text.replace(/SK_svgData \= \'([^\']+)\'/g,function(m,svg) {
		let ref = slideIds.shift();
		svg = svg.replace(/\\x(\d\w)/g,function(m,hex) {
			return String.fromCharCode(parseInt(hex,16));
		});
		svg = JSON.parse('"' + svg.replace(/"/g,'\\"') + '"');
		svg = svg.slice(svg.indexOf('<svg'));
		let slide = {body: svg,ref: ref};
		slides.push(slide);
		slideData[ref] = svg;
		return "";
	});
	
	var w = data.width = metadata[0][0];
	var h = data.height = metadata[0][1];
	
	
	self.normalizeSteps = function (steps){
		if (!steps) { return [] };
		
		let normalized = [];
		
		for (let i = 0, items = iter$(steps), len = items.length, step; i < len; i++) {
			step = items[i];
			let parts = [];
			for (let j = 0, ary = iter$(step[0]), len = ary.length, anim; j < len; j++) {
				anim = ary[j];
				if (data.ids.indexOf(anim[1]) == -1) {
					parts.push(anim);
				};
			};
			
			if (len$(parts)) {
				normalized.push([parts]);
			};
		};
		
		return normalized;
	};
	
	let res = [];
	for (let i = 0, items = iter$(metadata[1]), len = items.length, item, slide; i < len; i++) {
		item = items[i];
		res.push((slide = {
			name: item[0] + '.svg',
			title: item[2],
			width: w,
			height: h,
			steps: self.normalizeSteps(item[7][0]),
			body: slideData[item[0]]
		}));
	};
	data.slides = res;
	
	
	// remove steps 
	
	// for slide,i in slides
	// 	let meta = metadata[1][i]
	// 	let steps = meta[7][0]
	// 	# slide:meta = meta
	// 	slide:name = meta[0] + '.svg'
	// 	slide:title = meta[2]
	// 	slide:width = metadata[0][0]
	// 	slide:height = metadata[0][1]
	// 	slide:steps = steps
	
	return data;
};
