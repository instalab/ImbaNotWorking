function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _2 = Imba.createTagList, _1 = Imba.createElement;
var InterfaceView = require('./InterfaceView').InterfaceView;
var EditorMenu = require('./EditorMenu').EditorMenu;
var StateControls = require('./StateControls').StateControls;
var Agents$ = require('./Agents'), Agents = Agents$.Agents, Peer = Agents$.Peer;
var UserAvatar = require('../../site/components/UserAvatar').UserAvatar;

var TimelineView = require('./TimelineView').TimelineView;

var FilePath = Imba.defineTag('FilePath', function(tag){
	tag.prototype.__data = {watch: 'dataDidSet',name: 'data'};
	tag.prototype.data = function(v){ return this._data; }
	tag.prototype.setData = function(v){
		var a = this.data();
		if(v != a) { this._data = v; }
		if(v != a) { this.dataDidSet && this.dataDidSet(v,a,this.__data) }
		return this;
	};
	tag.prototype.path = function(v){ return this._path; }
	tag.prototype.setPath = function(v){ this._path = v; return this; };
	
	tag.prototype.dataDidSet = function (data){
		var v_;
		return (this.setPath(v_ = data ? data.path().split("/") : []),v_);
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		var path = this.path();
		return this.$open(0).flag('path').setChildren(
			// <i.fsicon .{data ? data.ext : ''}>
			// <.dir> "app"
			// <.file> "index.html"
			(function tagLoop($0) {
				var t0;
				for (let i = 0, items = iter$(path), len = $0.taglen = items.length; i < len; i++) {
					(t0 = $0[i] || (t0=_1('div',$0,i)).flag('part').setContent(
						t0.$.A || _1('span',t0.$,'A',t0).flag('name')
					,2)).end((
						t0.$.A.setContent(items[i],3)
					,true));
				};return $0;
			})($[0] || _2($,0))
		,4).synced();
	};
});


var TitlebarView = Imba.defineTag('TitlebarView', InterfaceView, function(tag){
	
	tag.prototype.file = function (){
		return this.space().primaryEditor().file();
	};
	
	tag.prototype.branch = function (){
		return this.space().branch();
	};
	
	tag.prototype.showMenu = function (e){
		return e.uxa().open((_1(EditorMenu)).bindData(this.space(),'primaryEditor',[]).end());
	};
	
	tag.prototype.showBrowser = function (){
		return (this.space().browser().setVisible(true),true);
	};
	
	tag.prototype.toggleDrawer = function (){
		return this.space().view().drawer().toggle();
	};
	
	tag.prototype.inspectState = function (){
		return this;
	};
	
	tag.prototype.reload = function (){
		return this.space().browser().refresh();
	};
	
	tag.prototype.openInBrowser = function (){
		let url = this.file().path().replace(/^\//,'');
		return this.space().browser().node().go(url);
	};
	
	tag.prototype.togglePinned = function (){
		this.space().view().pinned() ? this.trigger('unpin') : this.trigger('pin');
		return this;
	};
	
	tag.prototype.toggleMicrophone = async function (){
		if (!this.space().userMedia()) { // api.peer.media
			try {
				let stream = await this.api().media().getUserMedia();
				this.space().setUserMedia(stream);
			} catch (e) {
				true;
			};
		} else {
			this.space().setUserMedia(null);
		};
		return this;
	};
	
	tag.prototype.goPip = function (){
		var v_;
		return (this.space().view().setMode(v_ = 'pip'),v_);
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		let view = this.space().view();
		let file = this.file();
		let ext = file && file.ext();
		
		return this.$open(0).setChildren([
			($[0] || _1(FilePath,$,0,this)).setData(file).end(),
			($[1] || _1('div',$,1,this).flag('tools').flag('unless-pip')).setContent([
				this.api().isEmbed() ? (
					($[2] || _1('a',$,2,1).flag('button').flag('blue').setTarget("_blank").setText('open on scrimba.com')).setHref(this.space().model().url()).end()
				) : void(0),
				
				($[3] || _1(StateControls,$,3,1).flag('contents')).bindData(this,'space',[]).end()
			// <.tool.more data-icon='morevert' :tap.showMenu>
			// unless space.manager
			// <.tool.only-inline.unless-phone data-icon='launch' :tap.goPip>
			// <.tool.only-fullscreen data-icon='tlfullscreenexit' :tap.trigger('exitfullscreen')>
			// <.tool.unless-fullscreen data-icon='tlfullscreen' :tap.trigger('enterfullscreen')>
			// <.tool.drawer data-icon='mleft' :tap.toggleDrawer>
			],1),
			(this.branch().hasDuration() && this.space().option('inlineTrack')) ? (
				(this._timeline = this._timeline||_1(TimelineView,this).flag('timeline')).bindData(this.branch(),'timeline',[]).end()
			) : void(0)
		],1).synced();
	};
})
exports.TitlebarView = TitlebarView;
