
function Filters(){
	this._params = {};
	this._version = 0;
	this._dynamic = false;
};

exports.Filters = Filters; // export class 
Filters.prototype.version = function(v){ return this._version; }
Filters.prototype.setVersion = function(v){ this._version = v; return this; };

Filters.prototype.touch = function (){
	return this._version++;
};

Filters.prototype.get = function (key){
	return this._params[key];
};

Filters.prototype.reset = function (){
	this._params = {};
	this.touch();
	return this;
};

Filters.prototype.set = function (key,value){
	if (key instanceof Object) {
		for (let v, i = 0, keys = Object.keys(key), l = keys.length, k; i < l; i++){
			k = keys[i];v = key[k];this.set(k,v);
		};
		return this;
	};
	
	if (value == undefined) {
		return this.del(key);
	};
	
	if (this._params[key] != value) {
		this._params[key] = value;
		this.touch();
	};
	return this;
};

Filters.prototype.del = function (key){
	var v_;
	if (this._params[key] != undefined) {
		(((v_ = this._params[key]),delete this._params[key], v_));
		this.touch();
	};
	return this;
};

Filters.prototype.fn = function (){
	var self = this;
	return self._fn || (self._fn = function(item) {
		for (let o = self._params, matcher, i = 0, keys = Object.keys(o), l = keys.length, key, fn; i < l; i++){
			key = keys[i];matcher = o[key];if (matcher == undefined) { continue; };
			if (key[0] == '$') {
				if (fn = item[key.slice(1)]) {
					return fn.call(item,matcher);
				};
			};
			var value = item[key];
			if (value instanceof Function) {
				value = item[key]();
			};
			if (matcher instanceof RegExp) {
				if (!matcher.test(value || '')) { return false };
			} else if (matcher instanceof Array) {
				return matcher.indexOf(value) >= 0;
			} else if (value != matcher) {
				return false;
			};
		};
		
		return true;
	});
};

if (true) {
	Filters.prototype.apply = function (knex){
		// for own key,matcher of @params
		return this;
	};
};



