function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _1 = Imba.createElement;
var protocol$ = require('../protocol'), SIMULATOR = protocol$.SIMULATOR, ACTION = protocol$.ACTION, SPIV = protocol$.SPIV;

var List = require('../util/List').List;
var Widget = require('./widget').Widget;
var PaneWidget = require('./PaneWidget').PaneWidget;

var Stylesheet = require('./simulator/stylesheet').Stylesheet;
var SimulatorView = require('./SimulatorView').SimulatorView;

var Action = require('../util/Action').Action;
var Dimensions = require('../core/Dimensions').Dimensions;

function Simulator(){ return PaneWidget.apply(this,arguments) };

Imba.subclass(Simulator,PaneWidget);
exports.Simulator = Simulator; // export class 
Simulator.register('simulator',SIMULATOR);

Simulator.prototype.ctx = function(v){ return this._ctx; }
Simulator.prototype.setCtx = function(v){ this._ctx = v; return this; };
Simulator.prototype.player = function(v){ return this._player; }
Simulator.prototype.setPlayer = function(v){ this._player = v; return this; };
Simulator.prototype.bundle = function(v){ return this._bundle; }
Simulator.prototype.setBundle = function(v){ this._bundle = v; return this; };
Simulator.prototype.elements = function(v){ return this._elements; }
Simulator.prototype.setElements = function(v){ this._elements = v; return this; };
Simulator.prototype.running = function(v){ return this._running; }
Simulator.prototype.setRunning = function(v){ this._running = v; return this; };
Simulator.prototype.loading = function(v){ return this._loading; }
Simulator.prototype.setLoading = function(v){ this._loading = v; return this; };
Simulator.prototype.mode = function(v){ return this.getAttribute('mode'); }
Simulator.prototype.setMode = function(v){ this.setAttribute('mode',v); return this; };

Simulator.option('baseStyle',{'default': 'normalize'});

// DEPRECATED
Simulator.option('area',{'default': 'aside',overridable: true});
Simulator.option('resizing',{'default': false}); // very different
Simulator.option('autoIncludeCSS',{'default': true});
Simulator.option('externaljs');
Simulator.option('visible',{'default': false});
Simulator.option('spiv');

Simulator.prototype.width = function (){
	return this.layout() ? this.layout()[2] : 300;
};

Simulator.prototype.height = function (){
	return this.layout() ? this.layout()[3] : 400;
};

Simulator.prototype.clientLayout = function (){
	return (this._clientLayout || (this._clientLayout = new Dimensions(null))).wrap(this._node ? this._node._layout : null);
};

Simulator.prototype.defaultLayout = function (){
	var dims;
	var vw = this.space().vw(),vh = this.space().vh();
	var width = 300,height = 400;
	var left = vw - width - 40;
	var top = (vh - height) * 0.3;
	return dims = Dimensions.build(
		{left: left,
		top: top,
		width: width,
		height: height,
		vw: vw,
		vh: vh,
		scaleX: 100,
		scaleY: 100}
	).round();
};

Simulator.prototype.console = function (){
	return this.root_().console();
};

Simulator.prototype.node = function (){
	return this._node || (this._node = (_1(SimulatorView).setTitle("Preview")).setData(this).end());
};

Simulator.prototype.setup = function (){
	this.node();
	this.setPlayer(this.node().player());
	
	if (false) {};
	return this;
};

Simulator.prototype.bindFile = function (file){
	// console.log 'sim.bindFile',file
	file.on('modified',this,'onfilemodified');
	
	if (file.lang() == 'css') {
		this.player().addCSSFile(file);
		return this;
	};
};

Simulator.prototype.unbindFile = function (file){
	// console.log 'sim.unbindFile',file
	file.un('modified',this,'onfilemodified');
	
	if (file.lang() == 'css') {
		this.player().removeCSSFile(file);
	};
	return this;
};

Simulator.prototype.onfilemodified = function (file){
	if (file.lang() != 'css') {
		return this;
	};
};

Simulator.prototype.persist_ = function (){
	// should we also include the current css for easy styling?
	if (false) {};
	return this;
};

Simulator.prototype.refresh = function (){
	return this;
};

Simulator.prototype.root = function (){
	return this.player().doc() && this.player().doc().body;
};

Simulator.prototype.enabled = function (){
	return true;
};

Simulator.prototype.deserializeWidgets = function (){
	return this;
};

Simulator.prototype.deserialized = function (){
	var player_;
	Simulator.prototype.__super__.deserialized.apply(this,arguments);
	return (player_ = this.player()) && player_.deserialized  &&  player_.deserialized();
};

Simulator.prototype.title = function (){
	return 'Preview';
};

Simulator.prototype.stop = function (){
	if (this.running()) {
		this.setRunning(false);
	};
	return this;
};

Simulator.prototype.apply = function (action){
	let pars = action.params();
	
	if (action._type == ACTION.SIM_BUILD) {
		action.PREV = this.bundle();
		if (!this.space().timeline().isPaused()) { (this.setLoading(true),true) };
	} else if (action._type == ACTION.SIM_RESULT) {
		this.setLoading(false);
		this.setVisible(!(!pars[1]));
		// node.render
	};
	return this;
};

Simulator.prototype.revert = function (action){
	switch (action._type) {
		case ACTION.SIM_BUILD: {
			this.setLoading(false);
			break;
		}
	};
	return this;
};

Simulator.prototype.convertToBrowser = function (){
	// need a special converter action actually
	if (this.spiv() == SPIV) { return };
	// see if there is an index.html
	var files = {};
	for (let i = 0, items = iter$(this.space().files()), len = items.length, file; i < len; i++) {
		file = items[i];
		files[file.name()] = file;
	};
	
	var html = files['index.html'];
	var css = files['index.css'];
	var js = files['index.js'];
	var ins = [];
	var head = [];
	
	for (let i = 0, items = iter$(this.externaljs()), len = items.length; i < len; i++) {
		head.push('\t<script src="' + items[i] + '"></script>');
	};
	
	if (css) {
		// multiple stylesheets or?
		head.push('\t<link rel="stylesheet" href="' + css.name() + '">');
	};
	
	if (js) {
		let name = js.name();
		if (js.body().indexOf('require') >= 0) {
			name = name + '.pack.js';
		};
		ins.push('\t<script src="' + name + '"></script>');
	};
	
	var body = html ? html.body() : '';
	
	if (body.indexOf('<body') < 0) {
		body = ("<html>\n<head>\n" + head.join('\n') + "\n</head>\n<body>\n" + body + "\n" + ins.join("\n") + "\n</body>\n</html>");
	} else {
		body = head.join('\n') + body + "\n" + ins.join("\n");
	};
	
	if (!html) {
		this.space().createWidget({
			type: 'file',
			name: 'index.html',
			body: body
		});
	} else {
		html.replaceBody(body,true);
	};
	
	// console.log layout
	if (this.layout()) {
		this.space().browser().setLayout(this.streamLayout().clone().set({targetRef: this.space().browser().id()}));
	};
	
	this.setVisible(false);
	this.setSpiv(SPIV);
	return this;
};

Simulator.prototype.dispose = function (){
	this._lastResultEvent = null;
	return this.node().dispose();
};
