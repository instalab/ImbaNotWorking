function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
function len$(a){
	return a && (a.len instanceof Function ? a.len() : a.length) || 0;
};
var Imba = require('imba'), _2 = Imba.createTagList, _1 = Imba.createElement;
var uxa$ = require('uxa'), Dialog = uxa$.Dialog, TextField = uxa$.TextField, TextArea = uxa$.TextArea;
var UserRole = require('../../client/Users').UserRole;
// externs;

var Invite = Imba.defineTag('Invite', 'form', function(tag){
	tag.prototype.__name = {'default': '',name: 'name'};
	tag.prototype.name = function(v){ return this._name; }
	tag.prototype.setName = function(v){ this._name = v; return this; }
	tag.prototype._name = '';
	
	tag.prototype.invite = function (){
		return this.log('invite ',this.name());
	};
	
	tag.prototype.onsubmit = async function (e){
		var v_;
		e.prevent();
		e.stop();
		this.invite();
		var res = await this.data().invite({username: this.name()});
		console.log("returned from invite!",res);
		return (this.setName(v_ = ''),v_);
	};
	
	tag.prototype.onkeydown = function (e){
		return true;
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).flag('bar').setChildren($.$ = $.$ || [
			_1('input',$,0,this).setType('text').setPlaceholder("GitHub username"),
			_1('button',$,1,this).flag('button').flag('primary').setType('submit').setText("Invite")
		],2).synced((
			$[0].bindData(this,'name',[]).end(),
			$[1].setDisabled((len$(this.name()) < 1)).end()
		,true));
	};
});

var Share = Imba.defineTag('Share', Dialog, function(tag){
	
	// def model
	// 	data.model
	
	tag.prototype.link = function (){
		return ("" + (document.location.href));
	};
	
	tag.prototype.copyLink = function (e){
		this._link.dom().select();
		document.execCommand("copy");
		// remove selection
		e.target().focus();
		this.uxa().flash("Link copied to clipboard");
		return this;
	};
	
	tag.prototype.render = function (){
		var $ = this.$, self = this, t0;
		return self.$open(0).setChildren($.$ = $.$ || [
			t0 = self._body = self._body||(t0=_1('div',self)).flag('body').setContent([
				_1('h1',$,0,self._body).setText("Share"),
				self._link = self._link||_1('input',t0).flag('link').setType('text').setReadonly('readonly'),
				_1('div',$,1,t0).flag('table').flag('xs').flag('dense').flag('mt-md'),
				_1(Invite,$,3,t0).flag('sm').flag('mt-md')
			],2),
			_1('footer',$,4,self).setContent(
				// <button.button.md> <span> "Invite a Person"
				$[5] || _1('button',$,5,4).flag('button').flag('md').flag('primary').on$(0,['tap','prevent','copyLink'],self).setContent($[6] || _1('span',$,6,5).setText("Copy Public link"),2)
			,2)
		],2).synced((
			self._link.setValue(self.link(),1).end(),
			$[1].setContent(
				(function tagLoop($0) {
					for (let i = 0, items = iter$(self.data().users()), len = $0.taglen = items.length; i < len; i++) {
						($0[i] || _1(UserRole,$0,i).flag('tr')).setData(items[i]).setEntity(self.data()).end();
					};return $0;
				})($[2] || _2($,2,$[1]))
			,4),
			$[3].bindData(self,'data',[]).end()
		,true));
	};
	
	
	// def onuxashow e
	// 	console.log 'onuxashow',e
	// 	formData = data.model
	
	// def onuxasubmit e
	// 	# first validate forms no?
	// 	uxa.queue.add(10000) do
	// 		# var values = formData
	// 		# await model.update(
	// 		# 	title: values:title
	// 		# 	description: values:description
	// 		# )
	// 		var resp = await data.publish(values)
	// 		log "response from await",resp
	// 		api.analytics.cast(model:id,'Published')
})
exports.Share = Share;
