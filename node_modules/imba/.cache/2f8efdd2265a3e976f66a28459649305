var Imba = require('imba'), _1 = Imba.createElement;
var WIDGET = require('../protocol').WIDGET;
var Widget = require('./widget').Widget;

var InspectorView = Imba.defineTag('InspectorView', function(tag){
	
	tag.prototype.flex = function (){
		return "0 0 " + Math.round(this.data().colspan() / 1.2).toFixed() + "%";
	};
	
	tag.prototype.render = function (){
		return this.$open(0).flag('dark').flag('abs').flag('scroll').setFlag(-1,this.data().dock()).flagIf('show',(this.data().shouldShow())).css('flex',this.flex()).setChildren(
			this.data().space().console().node().end()
		,3).synced();
	};
})
exports.InspectorView = InspectorView;

// could this be a tag directly
function InspectorWidget(){ return Widget.apply(this,arguments) };

Imba.subclass(InspectorWidget,Widget);
exports.InspectorWidget = InspectorWidget; // export class 
InspectorWidget.register('inspector',WIDGET);

InspectorWidget.option('dock',{options: ['right','bottom','detached'],'default': 'right'});
InspectorWidget.option('colspan',{'default': 40}); // just span instead?

InspectorWidget.prototype.__reveal = {'default': -1,chainable: true,watch: 'revealDidSet',name: 'reveal'};
InspectorWidget.prototype.reveal = function(v){ return v !== undefined ? (this.setReveal(v),this) : this._reveal; }
InspectorWidget.prototype.setReveal = function(v){
	var a = this.reveal();
	if(v != a) { this._reveal = v; }
	if(v != a) { this.revealDidSet && this.revealDidSet(v,a,this.__reveal) }
	return this;
}
InspectorWidget.prototype._reveal = -1;

InspectorWidget.prototype.cssWidth = function (){
	return Math.round(this.colspan() / 1.2).toFixed() + '%';
};

InspectorWidget.prototype.shouldShow = function (){
	return this.space().console().isEnabled();
};

InspectorWidget.prototype.node = function (){
	let $ = this.$$ || (this.$$ = {});
	return this._node || (this._node = this._node||_1(InspectorView,this).flag('node')).setData(this).end();
};

InspectorWidget.prototype.revealDidSet = function (value){
	return this;
};
