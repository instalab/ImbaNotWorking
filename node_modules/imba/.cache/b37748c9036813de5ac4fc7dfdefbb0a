function len$(a){
	return a && (a.len instanceof Function ? a.len() : a.length) || 0;
};
var Imba = require('imba'), _1 = Imba.createElement;

var util = require('../util');

var InterfaceView = require('./InterfaceView').InterfaceView;
var TimelineCues$ = require('../util/TimelineCues'), TimelineCues = TimelineCues$.TimelineCues, Segment = TimelineCues$.Segment;
var ScrimbaGesture = require('../util/ScrimbaGesture').ScrimbaGesture;
var WindowGesture = require('../util/WindowGesture').WindowGesture;

// import TimelineOverview,TimelineRegionCanvas from '../../../test/brushup/TimelineCanvas'
var TimelineCanvas$ = require('./TimelineCanvas'), TimelineOverview = TimelineCanvas$.TimelineOverview, TimelineRegionCanvas = TimelineCanvas$.TimelineRegionCanvas;
var Button = require('uxa').Button;

var Mousetrap = require('../../vendor/mousetrap');

var WavesOptions = {
	clipColors: ['#977f9e','#7f939e','#7f9e89','#9e8a7f','#9e7f85'],
	cutColor: '#e4e3e3',
	bgColor: '#f0f1f1',
	actionsHeight: 4,
	waveAnchorY: 0.5,
	// renderOffsetTicks: yes
	renderTimeTicks: true,
	renderCollapsed: true,
	log: true
};

var OverviewOptions = {
	clipColors: ['#BF94CA'], // ,'#7f939e','#7f9e89','#9e8a7f','#9e7f85'
	cutColor: '#D6D6D6',
	bgColor: '#ffffff',
	actionsHeight: 2,
	tickFontSize: 8,
	waveAnchorY: 0.5,
	renderCollapsed: true,
	minimap: true
};


var BrushupView = Imba.defineTag('BrushupView', InterfaceView, function(tag){
	
	tag.prototype.__pxps = {'default': 60,watch: 'pxpsDidSet',name: 'pxps'};
	tag.prototype.pxps = function(v){ return this._pxps; }
	tag.prototype.setPxps = function(v){
		var a = this.pxps();
		if(v != a) { this._pxps = v; }
		if(v != a) { this.pxpsDidSet && this.pxpsDidSet(v,a,this.__pxps) }
		return this;
	}
	tag.prototype._pxps = 60;
	tag.prototype.__currentSegment = {watch: 'currentSegmentDidSet',name: 'currentSegment'};
	tag.prototype.currentSegment = function(v){ return this._currentSegment; }
	tag.prototype.setCurrentSegment = function(v){
		var a = this.currentSegment();
		if(v != a) { this._currentSegment = v; }
		if(v != a) { this.currentSegmentDidSet && this.currentSegmentDidSet(v,a,this.__currentSegment) }
		return this;
	};
	tag.prototype.__showCollapsed = {'default': true,watch: 'showCollapsedDidSet',name: 'showCollapsed'};
	tag.prototype.showCollapsed = function(v){ return this._showCollapsed; }
	tag.prototype.setShowCollapsed = function(v){
		var a = this.showCollapsed();
		if(v != a) { this._showCollapsed = v; }
		if(v != a) { this.showCollapsedDidSet && this.showCollapsedDidSet(v,a,this.__showCollapsed) }
		return this;
	}
	tag.prototype._showCollapsed = true;
	tag.prototype.viewRange = function(v){ return this._viewRange; }
	tag.prototype.setViewRange = function(v){ this._viewRange = v; return this; };
	
	tag.prototype.timeline = function (){
		return this.data().timeline();
	};
	
	tag.prototype.branch = function (){
		return this.data().branch();
	};
	
	tag.prototype.space = function (){
		return this.data().space();
	};
	
	tag.prototype.hide = function (){
		return this.unflag('on');
	};
	
	tag.prototype.show = function (){
		return this.flag('on');
	};
	
	tag.prototype.recording = function (){
		return this.data().recording();
	};
	
	tag.prototype.shouldHide = function (){
		return false;
	};
	
	tag.prototype.ondblclick = function (e){
		return e.halt();
	};
	
	tag.prototype.dispose = function (){
		var self = this;
		self.unschedule();
		self.render = function() { return self; };
		return self;
	};
	
	tag.prototype.version = function (){
		return this._version;
	};
	
	tag.prototype.trim = function (){
		var absTime = this.data().branch().currentOffset();
		var relTime = this.data().timeline().currentTime();
		
		if (window.confirm(("Are you sure you want to remove everything after " + util.msToStr(relTime) + "? This action cannot be undone"))) {
			return this.data().branch().trimToTimeOffset(absTime);
		};
	};
	
	tag.prototype.currentOffset = function (){
		return this.timeline().currentOffset();
	};
	
	tag.prototype.cues = function (){
		return this.timeline().cues();
	};
	
	tag.prototype.setup = function (){
		var self = this;
		self.dom().tabIndex = -1;
		self._version = 0;
		self._zoomLevels = [12,30,60,120,180,240];
		self._width = 1000;
		self._viewRange = new Segment([0,0,(self._width / self.pxps()) * 1000],self);
		self.onplaying = self.onplaying.bind(self);
		self.onpaused = self.onpaused.bind(self);
		// @viewRange = [0,0,(@width / pxps) * 1000]
		
		self._shortcuts = new Mousetrap(self.dom());
		self._shortcuts.bind(['space'],function(e) {
			e.stopPropagation();
			return self.togglePlay();
		});
		
		self._shortcuts.bind(['backspace'],function(e) {
			e.stopPropagation();
			if (self.currentSegment()) {
				return self.trigger('segdel',self.currentSegment());
			};
		});
		return self;
	};
	
	tag.prototype.syncViewRange = function (viewRange){
		return this;
	};
	
	tag.prototype.playheadIsInView = function (){
		return this.offsetIsInView(this.currentOffset());
	};
	
	tag.prototype.offsetIsInView = function (offset,pad){
		if(pad === undefined) pad = 0;
		let px = this._zoomed.offset2px(offset);
		return px >= 0 && (this._zoomed.vw() - pad) >= px;
		// offset >= viewRange.start and viewRange.end >= offset
	};
	
	tag.prototype.togglePlay = function (){
		
		if (this.timeline().isPlaying()) {
			this.timeline().pause();
			this._autoFollowPlayhead = false;
		} else {
			this.timeline().play();
			this._autoFollowPlayhead = this.playheadIsInView();
		};
		return this;
	};
	
	
	// EVENTS
	tag.prototype.currentSegmentDidSet = function (curr,prev){
		if (curr) {
			// curr.disabled = yes
			curr._selected = true;
		};
		if (prev) {
			// prev.disabled = no
			return prev._selected = false;
		};
		// cues.dirty # why dirty?
	};
	
	tag.prototype.pxpsDidSet = function (curr,prev){
		let anchor = this.viewRange().anchor(0.5);
		this.viewRange().setSpan(Math.round((this.dom().offsetWidth / this.pxps()) * 1000));
		return this.viewRange().moveTo(anchor,0.5);
	};
	
	tag.prototype.onchange = function (e){
		var value_;
		e.halt();
		return (this.setPxps(this._zoomLevels[value_ = e.target().value()]),this._zoomLevels[value_]);
		// viewRange.span = Math.round((dom:offsetWidth / pxps) * 1000)
		// render
	};
	
	tag.prototype.onshowrange = function (e,data){
		e.halt();
		if (data.start) {
			// let start = Math.max(data:start,0)
			this.viewRange().moveTo(data.start,0);
			this._autoFollowPlayhead = false;
		};
		return this.dirty();
	};
	
	tag.prototype.onzoom = function (e,data){
		// log "onzoom",data
		let anchor = 0;
		let change = data.scale / this.pxps();
		if (data.anchorTime) {
			anchor = (data.anchorTime - this.viewRange().start()) / this.viewRange().span();
		};
		
		this.setPxps(Math.round(Math.max(10,data.scale)));
		
		if (data.anchorTime) {
			this.viewRange().moveTo(Math.round(data.anchorTime),anchor);
		};
		return this.dirty();
	};
	
	tag.prototype.onseek = function (e,data){
		e.halt();
		let offset = data.offset;
		this.timeline().seek(offset);
		
		if (this.timeline().loopSegment() && !this.timeline().loopSegment().contains(offset)) {
			this.timeline().setLoopSegment(null);
		};
		
		if (e.target() == this._overview) {
			// center afterwards
			// now update center based on px2val
			this._zoomed.setStartOffset(offset);
			let newOffset = this._zoomed.val2offset(this._zoomed.px2val(this._zoomed.vw() * -0.5));
			return this.viewRange().moveTo(Math.max(newOffset,0),0);
		};
	};
	
	tag.prototype.onsegsel = function (e,data){
		e.halt();
		return (this.setCurrentSegment(data),data);
	};
	
	tag.prototype.onsegdel = function (e,data){
		var v_;
		if (data == this.currentSegment()) {
			this.setCurrentSegment(null);
		};
		
		this.cues().removeCue(data);
		this.trigger('autosave');
		
		if (data == this.timeline().loopSegment()) {
			this.timeline().setLoopSegment(null);
		};
		
		if (data == this._zoomed.markedRange()) {
			return (this._zoomed.setMarkedRange(null),null);
		};
	};
	
	tag.prototype.onfinish = function (e){
		e.halt();
		return this.timeline().space().view().trigger('brushupstop');
	};
	
	tag.prototype.onplaying = function (e){
		return this._autoFollowPlayhead = this.playheadIsInView();
	};
	
	tag.prototype.onpaused = function (e){
		return this._autoFollowPlayhead = false;
	};
	
	tag.prototype.dirty = function (){
		return this._version++;
	};
	
	tag.prototype.mount = function (){
		var v_;
		this._prevSpaceSize = this.space().view().size();
		this._savedVersion = this.cues()._version;
		this._savedCueData = JSON.stringify(this.cues()._data);
		
		this.schedule({raf: true,events: false});
		this.space().on('playing',this.onplaying);
		this.space().on('paused',this.onpaused);
		
		if (this.space().view().size() == 'auto') {
			return (this.space().view().setSize(v_ = 'desktop'),v_);
		};
		
		// @autoSave
		// bind to onplaying
	};
	
	tag.prototype.unmount = function (){
		this.unschedule();
		if (this.space().view().size() == 'desktop') {
			this.space().view().setSize(this._prevSpaceSize);
		};
		
		this.space().un('playing',this.onplaying);
		return this.space().un('paused',this.onpaused);
	};
	
	tag.prototype.onautosave = function (e){
		return this.autosave();
	};
	
	tag.prototype.autosave = function (){
		var self = this;
		if (self._savedVersion != self.cues()._version) {
			clearTimeout(self._autosaver);
			// console.log "should autosave", cues.@version,Imba.Touch.count
			self._savedVersion = self.cues()._version;
			return self._autosaver = setTimeout(function() { return self.save(); },1000);
			// if JSON.stringify(draft) != @frozenDraft
			// save(draft: @draft)
		};
	};
	
	tag.prototype.save = function (){
		if (JSON.stringify(this.cues()._data) != this._savedCueData) {
			this._savedCueData = JSON.stringify(this.cues()._data);
			console.log("saving");
			this.timeline().branch().model().save({draft: this.cues()._data});
			// model.
		};
		return this;
	};
	
	tag.prototype.ontouchstart = function (t){
		if (!this.hasFlag('abs')) { return };
		
		let o = WindowGesture.options(t);
		if (o.type == 'move') {
			return WindowGesture.wrap(t,o);
		} else if (o.type == 'resize') {
			return WindowGesture.wrap(t,o);
		};
	};
	
	tag.prototype.ontouchend = function (t){
		return this;
	};
	
	tag.prototype.toggleCollapsed = function (){
		this.setShowCollapsed(!(this.showCollapsed()));
		WavesOptions.renderCollapsed = !WavesOptions.renderCollapsed;
		OverviewOptions.renderCollapsed = !OverviewOptions.renderCollapsed;
		return this;
	};
	
	tag.prototype.render = function (){
		var $ = this.$, t0;
		this._viewRange.setSpan(Math.round(this.dom().offsetWidth * 1000 / this.pxps()));
		let duration = this.cues().endOffset();
		let now = this.currentOffset(); // timeline.timeToOffset(timeline.currentTime) # currentOffset
		
		if (Imba.Touch.count() == 0 && ScrimbaGesture.Active.length == 0) {
			this.autosave();
		};
		
		if (this._zoomed && this._autoFollowPlayhead && this.timeline().isPlaying()) {
			let seg = this.timeline().loopSegment();
			if (seg) {
				if (now > seg.end()) { this.timeline().seek(now = seg.start()) };
			} else if (len$(ScrimbaGesture.Active) == 0) {
				let tx = this._zoomed.offset2px(now);
				if (tx < 10 || tx > (this._zoomed.vw() - 10)) {
					let newOffset = this._zoomed.val2offset(this._zoomed.px2val(tx - 20));
					this.viewRange().moveTo(newOffset,0);
				};
			};
		};
		
		this._prevOffset = now;
		
		return this.$open(0).setChildren($.$ = $.$ || [
			_1('header',$,0,this).dataset('gesture','move,noTranslate').setContent([
				_1('div',$,1,0).flag('title'),
				_1('div',$,7,0).flag('resizer').dataset('gesture','resize,r')
			],2),
			
			// <input.zoom type="range" min=0 max=(@zoomLevels.len - 1) step=1>
			this._zoomed = this._zoomed||_1(TimelineRegionCanvas,this).flag('zoomed'),
			t0 = (t0=_1('footer',$,8,this)).setContent(
				// if timeline.isPlaying
				// 	<.tool data-icon='pause' uxa:action='toggleplayback'>
				// else
				// 	<.tool data-icon='play' uxa:action='toggleplayback'>
				// 
				this._overview = this._overview||_1(TimelineOverview,t0).flag('overview')
			,2)
		],2).synced((
			$[0].end((
				$[1].setContent([
					($[2] || _1('span',$,2,1).flag('hint').setNestedAttr('uxa','md',"*space* to play/pause")).end(),
					($[3] || _1('span',$,3,1).flag('hint').setNestedAttr('uxa','md',"*shift* to mark range")).end(),
					($[4] || _1('span',$,4,1).flag('hint').setNestedAttr('uxa','md',"*alt* to pan")).end(),
					this.currentSegment() ? (
						($[5] || _1('span',$,5,1).flag('hint').setNestedAttr('uxa','md',"*⌫* to remove segment")).end()
					) : void(0),
					($[6] || _1('span',$,6,1).flag('hint').on$(0,['tap','toggleCollapsed'],this).setNestedAttr('uxa','md',"*toggle* collapsed")).end()
				],1),
				$[7].end()
			,true)),
			this._zoomed.bindData(this,'timeline',[]).setStartOffset((this.viewRange().start())).setPxps(this.pxps()).setCurrentOffset(now).setOptions(WavesOptions).end(),
			this._overview.bindData(this,'timeline',[]).setViewRange(this.viewRange()).setCurrentOffset(now).setOptions(OverviewOptions).end()
		,true));
	};
})
exports.BrushupView = BrushupView;
