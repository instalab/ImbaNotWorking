function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
function len$(a){
	return a && (a.len instanceof Function ? a.len() : a.length) || 0;
};
var Imba = require('imba'), _2 = Imba.createTagList, _1 = Imba.createElement;
var uxa$ = require('uxa'), IconButton = uxa$.IconButton, Menu = uxa$.Menu, MenuItem = uxa$.MenuItem;
var SidebarPanel$ = require('./SidebarPanel'), SidebarPanel = SidebarPanel$.SidebarPanel, SidebarEntry = SidebarPanel$.SidebarEntry;
var readTextFile = require('../../util/filereader').readTextFile;

var PackageEntry = Imba.defineTag('PackageEntry', SidebarEntry, function(tag){
	tag.prototype.space = function(v){ return this._space; }
	tag.prototype.setSpace = function(v){ this._space = v; return this; };
	tag.prototype.prefix = function(v){ return this._prefix; }
	tag.prototype.setPrefix = function(v){ this._prefix = v; return this; };
	
	tag.prototype.name = function (){
		return this.data().match(/.[^@]*/)[0];
	};
	
	tag.prototype.version = function (){
		return this.data().substr(len$(this.name()));
	};
	
	tag.prototype.ondel = async function (e){
		e.halt();
		// trigger('pkgremove',data)
		var ok = await e.uxa().confirm(("Are you sure you want to remove " + this.name() + "?"));
		if (ok) { return this.space().browser().removePackage(this.name()) };
	};
	
	
	tag.prototype.onupgrade = async function (e){
		e.halt();
		var ok = await e.uxa().confirm(("Are you sure you want to upgrade " + this.name() + "?"));
		if (ok) { return this.space().browser().upgradePackage(this.name()) };
	};
	
	tag.prototype.oncontextmenu = function (e){
		var t0;
		e.prevent().halt();
		
		return this._head.uxa().open((t0 = (t0=_1(Menu)).flag('dark').flag('narrow').setContent([
			_1(MenuItem,t0.$,'A',t0).setIcon('>').setAction('upgrade').setLabel("Upgrade..."),
			_1(MenuItem,t0.$,'B',t0).flag('neg').setIcon('x').setAction('del').setLabel("Remove module")
		],2)).end((
			t0.$.A.end(),
			t0.$.B.end()
		,true)));
	};
	
	tag.prototype.render = function (){
		var $ = this.$, t0;
		return this.$open(0).flag('Entry').setChildren(
			t0 = this._head = this._head||(t0=_1('div',this)).flag('head').setContent([
				this._icon = this._icon||_1('i',t0).flag('icon').flag('module'),
				_1('div',$,0,t0).flag('name').setContent([
					_1('span',$,1,0).flag('name'),
					_1('span',$,2,0).flag('semver').flag('muted')
				],2)
			// <IconButton icon='v' action='upgrade'>
			// <IconButton icon='x' action='del'>
			],2)
		,2).synced((
			$[1].setContent(this.name(),3),
			$[2].setContent(this.version(),3)
		,true));
	};
});

var PackageEntries = Imba.defineTag('PackageEntries', function(tag){
	tag.prototype.__data = {watch: 'dataDidSet',name: 'data'};
	tag.prototype.data = function(v){ return this._data; }
	tag.prototype.setData = function(v){
		var a = this.data();
		if(v != a) { this._data = v; }
		if(v != a) { this.dataDidSet && this.dataDidSet(v,a,this.__data) }
		return this;
	};
	tag.prototype.space = function(v){ return this._space; }
	tag.prototype.setSpace = function(v){ this._space = v; return this; };
	tag.prototype.path = function(v){ return this._path; }
	tag.prototype.setPath = function(v){ this._path = v; return this; };
	
	tag.prototype.dataDidSet = function (){
		return this.render();
	};
	
	tag.prototype.sortedQueries = function (){
		var queries = this.data().resolved.slice();
		return queries.sort(function(a,b) { return a.localeCompare(b); });
	};
	
	tag.prototype.render = function (){
		var self = this, $ = this.$;
		return self.$open(0).setChildren(
			(function tagLoop($0) {
				for (let i = 0, items = iter$(self.sortedQueries()), len = $0.taglen = items.length; i < len; i++) {
					($0[i] || _1(PackageEntry,$0,i)).setData(items[i]).setSpace(self.space()).setSref((self.path() + i)).end();
				};return $0;
			})($[0] || _2($,0))
		,4).synced();
	};
});

var DependenciesPanel = Imba.defineTag('DependenciesPanel', SidebarPanel, function(tag){
	tag.prototype.bundle = function (){
		return this.space().browser().npmPackages() || {resolved: []};
	};
	
	tag.prototype.oncontextmenu = function (e){
		e.prevent().stop();
		return this.showMenu();
	};
	
	tag.prototype.onimportpackagejson = function (e){
		var self = this;
		e.stop();
		
		var fileInput = (_1('input').setType("file")).end();
		
		fileInput.dom().onchange = async function() {
			for (let i = 0, items = iter$(fileInput.dom().files), len = items.length, file; i < len; i++) {
				file = items[i];
				if (file.name == 'package.json') {
					var body = await readTextFile(file);
					var parsed = JSON.parse(body);
					// TODO: show spinner
					self.space().browser().overwritePackages(parsed.dependencies);
				} else {
					// uhm?
				};
			};
			return Imba.commit();
		};
		
		return fileInput.dom().click();
	};
	
	
	tag.prototype.showMenu = function (){
		var t0;
		return this._header.uxa().open((t0 = (t0=_1(Menu)).flag('dark').flag('narrow').setContent([
			_1(MenuItem,t0.$,'A',t0).setIcon('+').setAction('dependencyadd').setLabel("Add module"),
			_1(MenuItem,t0.$,'B',t0).setIcon('+').setAction('importpackagejson').setLabel("Import package.json")
		// <MenuItem.neg icon='x' action='del' label="Remove module">
		],2)).end((
			t0.$.A.end(),
			t0.$.B.end()
		,true)));
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		let path = ("" + (this.data().id()) + "$");
		
		return this.$open(0).setSref(this.data().id()).setChildren($.$ = $.$ || [
			this._header = this._header||_1('header',this).flag('header').setContent([
				_1('div',$,0,this._header).flag('title').setText("Dependencies"),
				_1('div',$,1,this._header).flag('tools').setContent(
					// <IconButton.toggle icon='+' action='dependencyadd'>
					$[2] || _1('div',$,2,1).flag('tool').dataset('icon','mcog').on$(0,['tap','showMenu'],this)
				,2)
			],2),
			this._main = this._main||_1(PackageEntries,this).flag('main')
		],2).synced((
			$[2].end(),
			this._main.setSpace(this.space()).setPath(path).setData(this.bundle()).end()
		,true));
	};
})
exports.DependenciesPanel = DependenciesPanel;
