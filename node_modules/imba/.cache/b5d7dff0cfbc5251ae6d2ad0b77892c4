function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _1 = Imba.createElement;

var Menu = require('uxa').Menu;

var DependencyAddDialog = require('./DependencyAddDialog').DependencyAddDialog;
// import CastDialog from '../../site/components/CastDialog'

var SpaceMenu = Imba.defineTag('SpaceMenu', Menu, function(tag){
	
	tag.prototype.space = function (){
		return this.data();
	};
	
	tag.prototype.hide = function (){
		return this.trigger('uxa:hide');
	};
	
	tag.prototype.ontap = function (e){
		return this.hide();
	};
	
	tag.prototype.newFile = function (e){
		var name = window.prompt("Name file");
		if (name) { return this.space().fs().mkfile(name) };
	};
	
	tag.prototype.newDirectory = function (e){
		var name = window.prompt("Name directory");
		if (name) { return this.space().fs().mkdir(name) };
	};
	
	tag.prototype.addDependency = function (){
		return this.uxa().open((_1(DependencyAddDialog)).bindData(this,'space',[]).end());
	};
	
	tag.prototype.importDependenciesFromFile = function (){
		var self = this;
		var fileInput = (_1('input').setType("file")).end();
		
		fileInput.dom().onchange = async function() {
			for (let i = 0, items = iter$(fileInput.dom().files), len = items.length, file; i < len; i++) {
				file = items[i];
				if (file.name == 'package.json') {
					var body = await self.readTextFile(file);
					var parsed = JSON.parse(body);
					// TODO: show spinner
					self.space().browser().overwritePackages(parsed.dependencies);
				} else {
					// uhm?
				};
			};
			return Imba.commit();
		};
		
		return fileInput.dom().click();
	};
	
	
	tag.prototype.editCastDetails = function (){
		return this;
		// uxa.open <CastDialog[space.model].modal formData=space.model>
	};
	
	tag.prototype.connectHost = function (){
		var port;
		if (port = window.prompt("Which port?","48001")) {
			return this.space().branch().connectToMachine({port: port});
		};
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		var canEdit = this.space().model().can(this.api().user(),'edit');
		return this.$open(0).flag('menu').setChildren([
			canEdit ? Imba.static([
				($[0] || _1('div',$,0,this).flag('item').on$(0,['tap','editCastDetails'],this).setText("Edit metadata")),
				this.space().model().isPublished() ? (
					($[1] || _1('div',$,1,this).flag('item').setText("Re-publish")).on$(0,['tap',['trigger','branchpublish',this.space().trunk()]],this)
				) : void(0),
				($[2] || _1('hr',$,2,this))
			],1,1) : void(0),
			($[3] || _1('div',$,3,this).flag('item').on$(0,['tap','newFile'],this).setText("New File...")),
			($[4] || _1('div',$,4,this).flag('item').on$(0,['tap','newDirectory'],this).setText("New Folder...")),
			($[5] || _1('div',$,5,this).flag('item').on$(0,['tap','addDependency'],this).setText("Add dependency...")),
			($[6] || _1('div',$,6,this).flag('item').on$(0,['tap','importDependenciesFromFile'],this).setText("Import package.json")),
			
			canEdit ? Imba.static([
				($[7] || _1('hr',$,7,this)),
				($[8] || _1('div',$,8,this).flag('item').on$(0,['tap',['trigger','importslides']],this).setText("Import Google Slides")),
				($[9] || _1('div',$,9,this).flag('item').on$(0,['tap','connectHost'],this).setText("Connect to Host")),
				this.space().slides().url() ? (
					($[10] || _1('div',$,10,this).flag('item').on$(0,['tap',['trigger','reimportslides']],this).setText("Resync with Google Slides"))
				) : void(0)
			],1,2) : void(0),
			($[11] || _1('hr',$,11,this)),
			($[12] || _1('div',$,12,this).flag('item').on$(0,['tap',['trigger','spacezip']],this).setText("Download .zip")),
			($[13] || _1('div',$,13,this).flag('item').on$(0,['tap',['trigger','spaceclone']],this).setText("Clone workspace")),
			($[14] || _1('hr',$,14,this)),
			($[15] || _1('div',$,15,this).flag('field').setContent([
				_1('input',$,16,15).setType('range').setMin(0).setStep(0.1).setMax(1).setNumber(true),
				_1('label',$,17,15).setContent($[18] || _1('span',$,18,17).setText("Contrast ratio"),2)
			// <span.right.dim> (space.view.contrastRatio * 100) + '%'
			],2)).end((
				$[16].bindData(this.space().view(),'contrastRatio',[]).end()
			,true))
		],1).synced();
	};
})
exports.SpaceMenu = SpaceMenu;
