function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
function len$(a){
	return a && (a.len instanceof Function ? a.len() : a.length) || 0;
};
var Imba = require('imba'), _3 = Imba.createTagList, _2 = Imba.createTagMap, _1 = Imba.createElement;

var UserAvatar = require('../../site/components/UserAvatar').UserAvatar;

var Item = Imba.defineTag('Item', function(tag){
	tag.prototype.space = function(v){ return this._space; }
	tag.prototype.setSpace = function(v){ this._space = v; return this; };
	
	tag.prototype.isSelected = function (){
		return this.space().branch().model() == this.data();
	};
	
	tag.prototype.user = function (){
		return this.data() && this.data().owner();
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		var user = this.user();
		return this.$open(0).flag('branch').flagIf('selected',this.isSelected()).setChildren(
			user ? Imba.static([
				// avatar?
				($[0] || _1(UserAvatar,$,0,this).flag('bullet')).setData(user).end(),
				($[1] || _1('div',$,1,this).flag('body')).setContent([
					user.name ? (
						($[2] || _1('span',$,2,1).flag('name')).setContent(user.name,3)
					) : void(0),
					($[3] || _1('span',$,3,1).flag('username')).setContent(user.username,3)
				],1)
			],2,1) : void(0)
		,3).synced();
	};
	
	tag.prototype.ontap = function (){
		return this.trigger('select',this.data());
	};
});

var Mine = Imba.defineTag('Mine', Item, function(tag){
	
	tag.prototype.user = function (){
		return this.api().user();
	};
	
	tag.prototype.ontap = function (){
		if (this.data()) {
			return this.trigger('select',this.data());
		} else {
			return this.space().fork();
		};
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).flag('tool').flagIf('branch',this.data()).flagIf('selected',this.isSelected()).setChildren($.$ = $.$ || [
			_1('span',$,0,this).flag('label').setText("FORK"),
			_1(UserAvatar,$,1,this).flag('bullet')
		],2).synced((
			$[1].bindData(this,'user',[]).end()
		,true));
	};
});

var FullList = Imba.defineTag('FullList', function(tag){
	
	tag.prototype.onwheel = function (e){
		return e.halt();
	};
});

var BranchesListView = Imba.defineTag('BranchesListView', function(tag){
	
	tag.prototype.space = function(v){ return this._space; }
	tag.prototype.setSpace = function(v){ this._space = v; return this; };
	tag.prototype.__data = {watch: 'dataDidSet',name: 'data'};
	tag.prototype.data = function(v){ return this._data; }
	tag.prototype.setData = function(v){
		var a = this.data();
		if(v != a) { this._data = v; }
		if(v != a) { this.dataDidSet && this.dataDidSet(v,a,this.__data) }
		return this;
	};
	tag.prototype.__list = {watch: 'listDidSet',name: 'list'};
	tag.prototype.list = function(v){ return this._list; }
	tag.prototype.setList = function(v){
		var a = this.list();
		if(v != a) { this._list = v; }
		if(v != a) { this.listDidSet && this.listDidSet(v,a,this.__list) }
		return this;
	};
	tag.prototype.__filtered = {watch: 'filteredDidSet',name: 'filtered'};
	tag.prototype.filtered = function(v){ return this._filtered; }
	tag.prototype.setFiltered = function(v){
		var a = this.filtered();
		if(v != a) { this._filtered = v; }
		if(v != a) { this.filteredDidSet && this.filteredDidSet(v,a,this.__filtered) }
		return this;
	};
	tag.prototype.__branch = {watch: 'branchDidSet',name: 'branch'};
	tag.prototype.branch = function(v){ return this._branch; }
	tag.prototype.setBranch = function(v){
		var a = this.branch();
		if(v != a) { this._branch = v; }
		if(v != a) { this.branchDidSet && this.branchDidSet(v,a,this.__branch) }
		return this;
	};
	tag.prototype.expanded = function(v){ return this._expanded; }
	tag.prototype.setExpanded = function(v){ this._expanded = v; return this; };
	tag.prototype.myFork = function(v){ return this._myFork; }
	tag.prototype.setMyFork = function(v){ this._myFork = v; return this; };
	
	tag.prototype.build = function (){
		this._history = [];
		return this;
	};
	
	tag.prototype.commit = function (){
		this.setBranch(this.space().branch().model());
		return tag.prototype.__super__.commit.apply(this,arguments);
	};
	
	tag.prototype.owner = function (){
		return this.data().owner();
	};
	
	tag.prototype.dataDidSet = function (data,prev){
		var v_;
		if (!data) {
			this.setList(null);
			this.setFiltered(null);
		};
		
		this.setList((this.setFiltered(v_ = data.branches().sel(function(_0) {
			return _0.type == 'fork';
		})),v_));
		return this;
	};
	
	
	tag.prototype.branchDidSet = function (branch){
		this.resync();
		
		if (this._history.indexOf(branch) >= 0) {
			// move to top?
			return this;
		} else if (!branch.isLocal() && branch != this.data() && branch != this.myFork()) {
			this._history.unshift(branch);
			if (this._history.length > 5) { this._history.length = 8 };
		};
		return this;
	};
	
	tag.prototype.onselect = function (e,data){
		this.space().navigateTo(data,'watching');
		this.collapse();
		return this;
	};
	
	tag.prototype.resync = function (){
		var self = this;
		if (!self.list().synced(self)) {
			self._myFork = self.list().filter(function(item) { return item.uid == self.api().uid(); })[0];
			self._history = self._history.filter(function(item) { return item != self._myFork; });
		};
		return self;
	};
	
	tag.prototype.join = function (){
		return this;
	};
	
	tag.prototype.ribbons = function (){
		var $ = this.$$ || (this.$$ = {}), t0, self = this;
		var len = len$(self.list());
		var stack = self._history;
		var mine = self._myFork;
		
		if (len < 10) {
			stack = self.list();
		};
		
		var more = len - len$(stack);
		
		return (t0 = self._ribbons = self._ribbons||(t0=_1('div',self)).flag('ribbons')).setContent([
			(t0.$.A || _1(Item,t0.$,'A',t0).flag('main')).bindData(self,'data',[]).setSpace(self.space()).end(),
			
			(self.data().uid != self.api().uid()) ? (
				(t0.$.B || _1(Mine,t0.$,'B',t0)).setData(mine).setSpace(self.space()).end()
			) : void(0),
			
			(function tagLoop($0) {
				var $$ = $0.$iter();
				for (let i = 0, items = iter$(stack), len_ = items.length, item; i < len_; i++) {
					item = items[i];
					if (item == mine) { continue; };
					$$.push(($0[i] || _1(Item,$0,i).flag('history')).setData(item).setSpace(self.space()).end());
				};return $$;
			})(t0.$['C'] || _2(t0.$,'C',self._ribbons)),
			
			(more > 0) ? (
				(t0.$.D || _1('div',t0.$,'D',t0).flag('Item').flag('more').on$(0,['tap','toggle'],self).setContent(
					t0.$.E || _1('span',t0.$,'E','D').flag('bullet').setContent(t0.$.F || _1('span',t0.$,'F','E').flag('count'),2)
				,2)).end((
					t0.$.F.setText("+" + more)
				,true))
			) : void(0)
		],1);
	};
	
	
	tag.prototype.expand = function (){
		this.flag('expanded');
		this.setExpanded(true);
		return this.render();
	};
	
	tag.prototype.collapse = function (){
		this.unflag('expanded');
		this.setExpanded(false);
		return this.render();
	};
	
	tag.prototype.toggle = function (){
		
		return this.expanded() ? this.collapse() : this.expand();
	};
	
	tag.prototype.onfocusout = function (e){
		this.log("focusout",e);
		var rel = e.event().relatedTarget;
		if (!rel || !this.dom().contains(rel)) {
			if (this.expanded()) { return this.collapse() };
		};
	};
	
	tag.prototype.find = function (query){
		this.setFiltered(this.list().sel(function(item) {
			var txt = (item.owner().name + ' ' + item.owner().username).toLowerCase();
			return txt.indexOf(query.toLowerCase()) >= 0;
		}));
		
		return this;
	};
	
	tag.prototype.oninput = function (e){
		this.find(this._quickfind.value());
		this.render();
		return this;
	};
	
	tag.prototype.render = function (){
		var $ = this.$, self = this, t0;
		self.resync();
		// check if data is dirty
		if (self.space().type() != 'lab') { return };
		
		return self.$open(0).setTabindex(-1).setChildren([
			self.ribbons(),
			self.expanded() ? (
				(t0 = $[0] || (t0=_1(FullList,$,0,self)).flag('drawer').setContent([
					self._quickfind = self._quickfind||_1('input',t0).flag('quickfind').setType('text'),
					_1('div',$,1,t0).flag('list').flag('scroll')
				],2)).end((
					self._quickfind.end(),
					$[1].setContent(
						(function tagLoop($0) {
							for (let i = 0, items = iter$(self.filtered()), len = $0.taglen = items.length; i < len; i++) {
								($0[i] || _1(Item,$0,i)).setData(items[i]).setSpace(self.space()).end();
							};return $0;
						})($[2] || _3($,2,$[1]))
					,4)
				,true))
			) : void(0)
		],1).synced();
	};
})
exports.BranchesListView = BranchesListView;
