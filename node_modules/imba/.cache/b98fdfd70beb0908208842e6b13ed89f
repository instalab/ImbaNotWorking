var Imba = require('imba'), _1 = Imba.createElement;
var Form = require('./Form').Form;
var Button = require('./Button').Button;
var Indicator = require('./Indicator').Indicator;

var Dialog = Imba.defineTag('Dialog', Form, function(tag){
	
	tag.prototype.type = function(v){ return this._type; }
	tag.prototype.setType = function(v){ this._type = v; return this; };
	tag.prototype.__submitLabel = {'default': 'Confirm',name: 'submitLabel'};
	tag.prototype.submitLabel = function(v){ return this._submitLabel; }
	tag.prototype.setSubmitLabel = function(v){ this._submitLabel = v; return this; }
	tag.prototype._submitLabel = 'Confirm';
	tag.prototype.__cancelLabel = {'default': 'Dismiss',name: 'cancelLabel'};
	tag.prototype.cancelLabel = function(v){ return this._cancelLabel; }
	tag.prototype.setCancelLabel = function(v){ this._cancelLabel = v; return this; }
	tag.prototype._cancelLabel = 'Dismiss';
	
	tag.prototype.setContent = function (content,type){
		this.log("setting content for dialog");
		this._content = Imba.static(content,type);
		return this;
	};
	
	tag.prototype.onsubmit = async function (e){
		var self = this;
		e.prevent().stop(); // should it do this by default?
		
		if (self.uxa().queue().busy()) {
			return;
		};
		
		var uxaev = self.trigger('uxa:submit',self.formData());
		await self.uxa().queue();
		
		if (self.uxa().queue().failed()) {
			self.log("failed?!?!",self.uxa().queue().error());
			self.uxa().flash(self.uxa().queue().error());
			return self.uxa().queue().reset();
		} else if (!uxaev.isPrevented()) {
			return setTimeout(function() { return self.hide(); },200);
		};
	};
	
	tag.prototype.show = function (){
		return this.uxa().open(this);
	};
	
	tag.prototype.hide = function (){
		return this.trigger('uxa:hide');
	};
	
	tag.prototype.submit = function (){
		return this;
	};
	
	tag.prototype.mount = function (){
		return this.schedule({events: true});
	};
	
	tag.prototype.unmount = function (){
		return this.unschedule();
	};
	
	tag.prototype.tapDismiss = async function (e){
		var self = this;
		e.prevent().stop();
		self.trigger('uxa:dismiss');
		
		if (self.uxa().queue().idle()) {
			return self.hide();
		};
		
		await self.uxa().queue();
		return setTimeout(function() { return self.hide(); },200);
	};
	
	tag.prototype.header = function (){
		let $ = this.$$ || (this.$$ = {});
		return (this._header = this._header||_1('header',this).flag('header'));
	};
	
	tag.prototype.indicator = function (){
		let $ = this.$$ || (this.$$ = {});
		return (this._indicator = this._indicator||_1(Indicator,this).flag('indicator').setType('forward')).bindData(this.uxa(),'queue',[]).end();
	};
	
	tag.prototype.body = function (){
		let $ = this.$$ || (this.$$ = {});
		return (this._body = this._body||_1('section',this).flag('body')).setContent(
			this._content ? (
				this._content
			) : (this._template ? (
				this.renderTemplate()
			) : void(0))
		,3);
	};
	
	tag.prototype.footer = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		return (t0 = this._footer = this._footer||(t0=_1('footer',this)).flag('footer').setContent(t0.$.A || _1('div',t0.$,'A',t0).flag('spaced').flag('bar').flag('justify-end').setContent([
			_1(Button,t0.$,'B','A').flag('link').setType('button').on$(0,['tap','tapDismiss'],this),
			_1(Button,t0.$,'C','A').flag('primary').setType('submit')
		],2),2)).end((
			t0.$.B.setLabel(this.cancelLabel()).end(),
			t0.$.C.setLabel(this.submitLabel()).end()
		,true));
	};
	
	tag.prototype.render = function (){
		return this.$open(0).flag('dialog').setChildren([
			this.header(),
			this.body(),
			this.footer(),
			this.indicator()
		],1).synced();
	};
})
exports.Dialog = Dialog;

// ConfirmDialog

// AlertDialog
