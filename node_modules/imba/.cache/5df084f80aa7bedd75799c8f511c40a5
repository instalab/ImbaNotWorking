function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _2 = Imba.createTagCache, _1 = Imba.createElement;
var SCON = require('../protocol').SCON;

var Rect = Imba.defineTag('Rect', function(tag){
	
	tag.prototype.mark = function (bounds){
		if (!(this.data())) { return this.flag('hidden') };
		var rect = this.data().dom().getBoundingClientRect();
		var style = window.getComputedStyle(this.data().dom());
		var box = {
			left: rect.left - bounds.left,
			top: rect.top - bounds.top,
			height: rect.height,
			width: rect.width,
			backgroundColor: style.backgroundColor,
			boxShadow: style.boxShadow,
			visibility: style.visibility
		};
		box.bottom = bounds.height - box.top - box.height;
		box.right = bounds.width - box.left - box.width;
		
		return box;
	};
	
	tag.prototype.markStart = function (bounds){
		this._start = this.mark(bounds);
		this.css(this._start);
		return this;
	};
	
	tag.prototype.markEnd = function (bounds){
		this._end = this.mark(bounds);
		return this;
	};
	
	tag.prototype.draw = function (progress){
		return this;
	};
	
	tag.prototype.animate = function (){
		this.css(this._end);
		return this;
	};
});


var SpaceMorpher = Imba.defineTag('SpaceMorpher', Rect, function(tag){
	
	// spaceview sent in as data
	tag.prototype.view = function (){
		return this.data();
	};
	
	tag.prototype.setup = function (){
		// register the actual positions and sizes of elements
		var $ = ($_ = this.$).$setup$ || ($_.$setup$ = _2(this)), t0;
		this.$open('setup0').setChildren($.$ = $.$ || [
			t0 = this._viewframe = this._viewframe||(t0=_1(Rect,this)).flag('viewframe').setContent([
				this._viewport = this._viewport||_1(Rect,t0).flag('viewport'),
				this._controls = this._controls||_1(Rect,t0).flag('controls'),
				this._sidebar = this._sidebar||_1(Rect,t0).flag('sidebar')
			],2),
			this._browser = this._browser||_1(Rect,this).flag('browser')
		],2).synced((
			this._viewframe.bindData(this,'data',[]).end((
				this._viewport.bindData(this.data(),'_viewport').end(),
				this._controls.bindData(this.data(),'_controls').end(),
				this._sidebar.bindData(this.data(),'_sidebar').end()
			,true)),
			this._browser.bindData(this.data().space().browser().node(),'_chrome').end()
		,true));
		
		this._rects = [this._viewframe,this._viewport,this._controls,this._sidebar,this._browser];
		return this;
	};
	
	tag.prototype.hide = function (){
		var self = this;
		self.css({opacity: 0});
		setTimeout(function() { return self.orphanize(); },100);
		return self;
	};
	
	tag.prototype.markStart = function (bounds){
		this._startStyle = window.getComputedStyle(this.data().dom());
		this._startMode = this.data().viewMode();
		this._start = {
			top: bounds.top,
			left: bounds.left,
			width: bounds.width,
			height: bounds.height
		};
		for (let i = 0, items = iter$(this._rects), len = items.length; i < len; i++) {
			items[i].markStart(bounds);
		};
		this.css(this._start);
		return this.setFlag('viewMode',this._startMode);
	};
	
	tag.prototype.markEnd = function (bounds){
		for (let i = 0, items = iter$(this._rects), len = items.length; i < len; i++) {
			items[i].markEnd(bounds);
		};
		this._endStyle = window.getComputedStyle(this.data().dom());
		this._endMode = this.data().viewMode();
		let zIndex = parseInt(this._endStyle['z-index']) + 20;
		this._end = {
			top: bounds.top,
			left: bounds.left,
			width: bounds.width,
			height: bounds.height,
			zIndex: zIndex
		};
		
		this._start.zIndex = zIndex;
		this.css({zIndex: zIndex});
		return this;
	};
	
	tag.prototype.transformFrom = function (box){
		this.log('transformFrom',box);
		let sax = (this._start.left + this._start.width * 0.5);
		let say = (this._start.top + this._start.height * 0.5);
		var t = {
			sx: box.width / this._start.width,
			sy: box.height / this._start.height,
			dx: (box.left + box.width * 0.5) - sax,
			dy: (box.top + box.height * 0.5) - say
		};
		
		this._start.transform = ("translate(" + (t.dx) + "px," + (t.dy) + "px) scale(" + (t.sx) + "," + (t.sy) + ")");
		this._end.transform = "translate(0px,0px) scale(1,1)";
		this.css({transform: this._start.transform});
		return this;
	};
	
	tag.prototype.isImmediate = function (){
		return !(!SCON.compare(this._start,this._end)) && !this.data().closing();
	};
	
	tag.prototype.animate = function (dur,cb){
		// take a new snapshot
		// should probably use animation library instead though
		var self = this;
		var style = window.getComputedStyle(self.data().dom());
		var scrollTop = window.pageYOffset;
		var scrollAdjust = style.position == 'absolute'; // data.pip and data.hasFlag('anchored')
		
		var onscroll = function() {
			if (scrollAdjust) {
				return self.dom().style.marginTop = (scrollTop - window.pageYOffset) + 'px';
			};
		};
		
		window.addEventListener('scroll',onscroll,true);
		
		for (let i = 0, items = iter$(self._rects), len = items.length; i < len; i++) {
			items[i].animate(dur);
		};
		self.css(self._end);
		self.setFlag('viewMode',self._endMode);
		self.flag('closing',self.data().closing());
		
		setTimeout(function() {
			window.removeEventListener('scroll',onscroll,true);
			return cb && cb();
		},dur);
		return self;
	};
})
exports.SpaceMorpher = SpaceMorpher;
