function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba');

var Struct = require('./Struct').Struct;

function Dimensions(raw){
	this._v = 0;
	this._data = raw;
};

Imba.subclass(Dimensions,Struct);
exports.Dimensions = Dimensions; // export class 
Dimensions.RESIZING = 1;
Dimensions.MOVING = 2;
Dimensions.PIN_TOP = 4;
Dimensions.PIN_RIGHT = 8;
Dimensions.PIN_BOTTOM = 16;
Dimensions.PIN_LEFT = 32;

Dimensions.desc([
	'left',
	'top',
	'width',
	'height',
	'scrollLeft',
	'scrollTop',
	'scrollWidth',
	'scrollHeight',
	'vw',
	'vh',
	'scaleX',
	'scaleY',
	'targetRef',
	'mask'
]);

Dimensions.prototype.anchorX = function (){
	return this.left() / (this.vw() - this.width());
};

Dimensions.prototype.anchorY = function (){
	return this.top() / (this.vh() - this.height());
};

Dimensions.prototype.round = function (){
	for (let i = 0, items = iter$(this._data), len = items.length; i < len; i++) {
		this._data[i] = Math.round(items[i]);
	};
	return this;
};

Dimensions.prototype.right = function (){
	return this.vw() - this.left() - this.width();
};

Dimensions.prototype.bottom = function (){
	return this.vh() - this.top() - this.height();
};

Dimensions.prototype.resizeParent = function (pwidth,pheight){
	if (pwidth == this.vw() && pheight == this.vh()) {
		return this;
	};
	
	var ax = this.anchorX(),ay = this.anchorY();
	
	var left = Math.round((pwidth - this.width()) * ax);
	var top = Math.round((pheight - this.height()) * ay);
	
	if (ax > 1) {
		left = pwidth - (this.vw() - this.left());
	} else if (ax < 0) {
		left = this.left();
	};
	if (ay > 1) {
		top = pheight - (this.vh() - this.top());
	} else if (ay < 0) {
		top = this.top();
	};
	
	return this.set(
		{left: left,
		top: top,
		vw: pwidth,
		vh: pheight}
	);
};

Dimensions.prototype.resize = function (width,height,mask){
	if(mask === undefined) mask = 0;
	var ax = this.anchorX();
	var ay = this.anchorY();
	
	if (mask & Dimensions.PIN_TOP) {
		ay = 0;
	} else if (mask & Dimensions.PIN_BOTTOM) {
		ay = 1;
	};
	
	if (mask & Dimensions.PIN_LEFT) {
		ax = 0;
	} else if (mask & Dimensions.PIN_RIGHT) {
		ax = 1;
	};
	
	var snapX = ax > 0.9 || ax < 0.1;
	var snapY = ay > 0.9 || ay < 0.1;
	
	// round to closest 2px ?
	var left = this.vw() * ax - width * ax;
	var top = this.vh() * ay - height * ay;
	
	if (snapX) {
		left = this.left() + (this.width() - width) * Math.round(ax);
	};
	if (snapY) {
		top = this.top() + (this.height() - height) * Math.round(ay);
	};
	
	return this.set({left: left,top: top,width: width,height: height});
};

Dimensions.prototype.ensureInsideParent = function (bleed){
	if(bleed === undefined) bleed = 30;
	if ((this.left() + this.width()) < bleed) {
		this.set({left: bleed - this.width()});
	} else if (this.left() > (this.vw() - bleed)) {
		this.set({left: this.vw() - bleed});
	};
	
	if (this.top() > (this.vh() - bleed)) {
		this.set({top: this.vh() - bleed});
	} else if (this.top() < bleed) {
		this.set({top: bleed});
	};
	return this;
};


