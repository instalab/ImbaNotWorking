var Imba = require('imba');
var ScrimbaGesture = require('./ScrimbaGesture').ScrimbaGesture;

function WindowGesture(){
	WindowGesture.prototype.__super__.constructor.apply(this,arguments);
	this.touch().capture();
	this;
};

Imba.subclass(WindowGesture,ScrimbaGesture);
exports.WindowGesture = WindowGesture; // export class 
WindowGesture.prototype.box = function(v){ return this._box; }
WindowGesture.prototype.setBox = function(v){ this._box = v; return this; };

WindowGesture.prototype.getLayout = function (target){
	if(target === undefined) target = this.target();
	var el = target.dom();
	
	return {
		top: el.offsetTop,
		left: el.offsetLeft,
		width: el.offsetWidth,
		height: el.offsetHeight
	};
};

WindowGesture.prototype.onstart = function (){
	this._box = this.target().dom().getBoundingClientRect();
	this._outer = this.target().dom().offsetParent.getBoundingClientRect();
	this._layout = this.getLayout();
	WindowGesture.prototype.__super__.onstart.apply(this,arguments);
	return this;
};

WindowGesture.prototype.onmoveupdate = function (t){
	var dy = Math.max(-(this._box.top - 34),this.dy());
	if (this.options().noTranslate) {
		this.target().css({left: this._layout.left + this.dx(),top: this._layout.top + dy});
	} else {
		this.target().css({transform: ("translate(" + this.dx() + "px," + dy + "px)")});
	};
	return this;
};

WindowGesture.prototype.onmoveend = function (){
	var target_, $1;
	var top = this.target().dom().offsetTop;
	var left = this.target().dom().offsetLeft;
	var dy = Math.max(-(this._box.top - 34),this.dy());
	
	this._layout.top += dy;
	this._layout.left += this.dx();
	
	this.target().css(
		{transform: "none",
		top: this._layout.top,
		left: this._layout.left,
		right: 'auto',
		bottom: 'auto'}
	);
	
	(target_ = this.target()) && target_.onmove  &&  target_.onmove(this,this.getLayout());
	($1 = this.target()) && $1.onmoveend  &&  $1.onmoveend(this);
	return this;
};

// resize
WindowGesture.prototype.onresizestart = function (){
	// console.log "onresizestart",self
	var layout = this.getLayout();
	
	this.target().css(
		{transform: "none",
		top: layout.top,
		left: layout.left,
		right: 'auto',
		bottom: 'auto'}
	);
	
	return this;
};

WindowGesture.prototype.onresizeupdate = function (){
	var target_;
	var o = this.options();
	var box = this._layout;
	
	if (o.l) {
		this.target().css({left: (box.left + this.dx()),width: box.width - this.dx()});
	};
	if (o.r) {
		this.target().css({width: box.width + this.dx()});
	};
	if (o.b) {
		this.target().css({height: box.height + this.dy()});
	};
	if (o.t) {
		this.target().css({top: box.top + this.dy(),height: box.height - this.dy()});
	};
	
	(target_ = this.target()) && target_.onresize  &&  target_.onresize(this,this.getLayout());
	return this;
};

WindowGesture.prototype.onresizeend = function (){
	var target_;
	var layout = this.getLayout();
	// target.css bottom: 'auto', right: 'auto'
	layout.width = Math.min(layout.width,window.innerWidth);
	layout.height = Math.min(layout.height,window.innerHeight - 20);
	this.target().css(layout);
	(target_ = this.target()) && target_.onresize  &&  target_.onresize(this,layout);
	// @layout:top = target.dom:offsetTop
	// @layout:left = target.dom:offsetLeft
	// @layout:width = target.dom:offsetWidth
	//  @layout:width = target.dom:offsetWidth
	return this;
};
