var Imba = require('imba'), _1 = Imba.createElement;
var uxa$ = require('uxa'), Menu = uxa$.Menu, MenuItem = uxa$.MenuItem;

var PaneTab = Imba.defineTag('PaneTab', function(tag){
	
	tag.prototype.group = function(v){ return this._group; }
	tag.prototype.setGroup = function(v){ this._group = v; return this; };
	tag.prototype.__warnings = {'default': 0,name: 'warnings'};
	tag.prototype.warnings = function(v){ return this._warnings; }
	tag.prototype.setWarnings = function(v){ this._warnings = v; return this; }
	tag.prototype._warnings = 0;
	tag.prototype.__errors = {'default': 0,name: 'errors'};
	tag.prototype.errors = function(v){ return this._errors; }
	tag.prototype.setErrors = function(v){ this._errors = v; return this; }
	tag.prototype._errors = 0;
	tag.prototype.__active = {watch: 'activeDidSet',name: 'active'};
	tag.prototype.active = function(v){ return this._active; }
	tag.prototype.setActive = function(v){
		var a = this.active();
		if(v != a) { this._active = v; }
		if(v != a) { this.activeDidSet && this.activeDidSet(v,a,this.__active) }
		return this;
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).setFlag(-1,this.data().TYPE).flagIf('errors',this.errors()).flagIf('warnings',this.warnings()).setChildren($.$ = $.$ || [
			_1('div',$,0,this).flag('title'),
			_1('div',$,1,this).flag('badges').setContent([
				_1('div',$,2,1).flag('badge').flag('errors'),
				_1('div',$,3,1).flag('badge').flag('warnings'),
				_1('div',$,4,1).flag('badge').flag('participant')
			],2)
		],2).synced((
			$[0].setContent(this.data().title() || "Pane",3),
			$[2].setContent(this.errors() || '',3),
			$[3].setContent(this.warnings() || '',3)
		,true));
	};
	
	tag.prototype.ontouchstart = function (t){
		// right click
		if (t.button() == 2) {
			return this;
		};
		
		return this.trigger('tabtap',{item: this.data()});
	};
	
	tag.prototype.oncontextmenu = function (e){
		var t0;
		e.prevent().halt();
		
		let name = this.data().title();
		
		return e.target().uxa().open((t0 = (t0=_1(Menu)).setContent([
			_1(MenuItem,t0.$,'A',t0).setAction('mv'),
			_1(MenuItem,t0.$,'B',t0).setAction('rm')
		],2)).end((
			t0.$.A.setLabel(("Rename " + name)).end(),
			t0.$.B.setLabel(("Delete " + name)).end()
		,true)));
	};
	
	tag.prototype.onrm = function (){
		var self = this;
		return setTimeout(function() {
			let ok = window.confirm(("Are you sure you want to delete " + (self.data().title()) + "?"));
			if (ok) { return self.data().rm() };
		},10);
	};
	
	tag.prototype.onmv = function (e){
		var self = this;
		setTimeout(function() {
			let newname = window.prompt("New name for file",self.data().title());
			console.log("renamed to",newname);
			return self.data().mv(newname);
		},10);
		return self;
	};
})
exports.PaneTab = PaneTab;
