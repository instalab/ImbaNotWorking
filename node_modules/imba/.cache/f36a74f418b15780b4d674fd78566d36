function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), opbeatApp, _1 = Imba.createElement;
var express = require('express');
var bodyParser = require('body-parser');

var path = require('path');
var fs = require('fs');
var cp = require('child_process');

var passport = require('passport');
var pplocal = require('passport-local');
var ppgh = require('passport-github2');
var pmx = require('pmx');

var crypto = require('crypto');

var env = require('../env');

var app = exports.app = express();

var opbeat;
if (opbeatApp = env.get('OPBEAT_SERVER_APP_ID')) {
	opbeat = require('opbeat').start(
		{appId: opbeatApp,
		organizationId: env.get('OPBEAT_ORG_ID'),
		secretToken: env.get('OPBEAT_SERVER_SECRET')}
	);
};

app.use(bodyParser.json({limit: '2mb'}));
// app.use(body-parser.urlencoded(extended: false, limit: '100mb'))
app.use('/static',express.static(path.resolve(("" + __dirname + "/../../public"))));
app.use('/assets',express.static(path.resolve(("" + __dirname + "/../../assets"))));

var API = require("./api").API;
require('./syncer');
require('./search');

var ffmpeg = require('../services/ffmpeg');
var msgpack = require('msgpack-lite');

Imba.extendTag('element', function(tag){
	tag.prototype.root = function (){
		
		return this._owner_ ? this._owner_.root() : this;
	};
	
	tag.prototype.api = function (){
		return this.root().api();
	};
	
	tag.prototype.log = function (){
		var api_;
		var $0 = arguments, i = $0.length;
		var params = new Array(i>0 ? i : 0);
		while(i>0) params[i-1] = $0[--i];
		return (api_ = this.api()).log.apply(api_,[].concat([this.constructor._name], [].slice.call(params)));
	};
});

var db$ = require('./db'), db = db$.db, rdb = db$.rdb;

var SessionParser = require('./session').SessionParser;

var version = '(unknown)';
try {
	version = fs.readFileSync(("" + __dirname + "/../../VERSION"),{encoding: 'utf-8'}).trim();
} catch (err) {
	// nevermind
	console.log("could not find version");
};

env.set('VERSION',version);

/*
GitHub login
*/

var ghcallback = async function(accessToken,refreshToken,profile,done) {
	var api = new API();
	var user = await api.authWithGitHub(profile);
	return process.nextTick(function() { return done(null,user); });
};

passport.use(new (ppgh.Strategy)({
	clientID: env.get('GITHUB_CLIENT_ID'),
	clientSecret: env.get('GITHUB_CLIENT_SECRET'),
	callbackURL: env.get('GITHUB_CALLBACK_URL'),
	scope: 'user:email'
},ghcallback));


passport.serializeUser(function(user,done) { return done(null,user ? user.id : null); });
passport.deserializeUser(async function(obj,done) {
	if (!obj) { return done(null,obj) };
	// now fetching user on every request
	var uid = obj.id || obj;
	var user = await db.table('users').where({id: uid}).first();
	return done(null,user || false);
});

app.use(SessionParser);
app.use(passport.initialize());
app.use(passport.session());

// we always create an api object
app.use(function(req,res,next) {
	req.api = new API(req.user,req);
	req.api._request = req;
	return next();
});

var runner = require("../services/run-static").app;
app.use(function(req,res,next) {
	if (req.hostname == env.get('RUN_HOSTNAME')) {
		return runner(req,res);
	} else {
		return next();
	};
});

app.get('/login',function(req,res) {
	req.session.ghRedirect = req.query.from;
	return res.redirect('/auth/github');
});

app.get('/auth/github/seamless',function(req,res) {
	var handler = function() {
		try {
			window.opener.SCRIMBA_API.reloadUser();
			return window.close();
		} catch (err) {
			var timeout = setTimeout(function() { return window.location = "/"; },2000);
			window.onmessage = function() {
				clearTimeout(timeout);
				return window.close();
			};
			return window.opener.postMessage('reloadUser','*');
		};
	};
	
	var code = (_1('script')).setText("(" + (handler.toString()) + ")()");
	return res.send(code.toString());
});

app.get('/auth/github',passport.authenticate('github',{scope: ['user:email']}));

var ghauth = passport.authenticate('github',{failureRedirect: '/'});

app.get('/auth/github/callback',ghauth,function(req,res) {
	var ghRedirect = req.session.ghRedirect;
	if (ghRedirect) {
		req.session.ghRedirect = "";
		return res.redirect(ghRedirect);
	} else {
		return res.redirect('/');
	};
});

app.get('/favicon.ico',function(req,res) { return res.send(""); });

app.get('/logout',function(req,res) {
	// req:session:ghRedirect = req:query:from
	req.logout();
	console.log("server /logout",req.xhr,req.query.xhr);
	if (req.xhr || req.query.xhr) {
		return res.send('0');
	} else {
		return res.redirect(req.query.from || '/');
	};
});



// if env.get('NODE_ENV') == 'development'
// 	console.log "is dev!!"
app.get('/new/empty',async function(req,res) {
	var source = req.query.preset || null;
	var cast = await req.api.castCreate(
		{parent_id: source,
		title: "cast",
		uid: req.api.uid()}
	);
	console.log(cast);
	return res.redirect(("/casts/" + (cast.id)));
});

app.post('/upload/:id',bodyParser.urlencoded({extended: true,limit: '100mb'}),async function(req,res) {
	var id = req.params.id.replace(/\//g,'');
	var file = await req.api.fetch(id);
	console.log("post /upload",id,file);
	
	var dir = env.get('FILES_DIR');
	var dest = path.resolve(dir + ("/" + id));
	
	console.log("dest is",dest);
	// var writer = Promise.new do |resolve, reject|
	var writer = fs.createWriteStream(dest,{defaultEncoding: 'binary',flags: 'w'});
	var pipe = req.pipe(writer);
	
	res.type('json');
	
	return writer.on('finish',async function() {
		var src = path.resolve(env.get('FILES_DIR') + '/' + id);
		var updates = {state: 'uploaded'};
		await ffmpeg.finalize(file,updates);
		// make sure we mux the webm-file immediately
		return fs.stat(src,async function(err,stat) {
			await file.update({state: 'uploaded',size: stat.size});
			// if file:size != stat:size
			return res.send(file);
		});
	});
});

app.get('/cdn/:id.webm.m4a',async function(req,res) {
	console.log("trying to access",req.params.id);
	var id = req.params.id + '.webm';
	var dest = await ffmpeg.webm2m4a(id);
	res.type('m4a');
	return res.sendFile(dest);
});

app.get('/cdn/:id.webm.mp3',async function(req,res) {
	console.log("trying to access",req.params.id);
	var id = req.params.id + '.webm';
	// var file = await req:api.fetch(id)
	console.log("getting webmfile",id);
	var src = ffmpeg.fullpath(id);
	var dest = await ffmpeg.encodeMP3(src);
	res.type('mp3');
	return res.sendFile(dest);
});


app.get('/cdn/:id.:v.cover.svg',async function(req,res) {
	console.log("trying to access",req.params.id);
	res.type('svg');
	
	var item = await req.api.db().fetch(req.params.id);
	
	if (item && item.coverart) {
		return res.send(item.coverart);
	} else {
		return res.send("");
	};
});

app.get('/cdn/:id.webm.ogg',async function(req,res) {
	var id = req.params.id + '.webm';
	var dest = await ffmpeg.webm2ogg(id);
	res.type('ogg');
	return res.sendFile(dest);
});

app.get('/cast/:spaceid.preview',function(req,res) {
	var html = '<!DOCTYPE html><html lang="en"><head></head><body></body></html>';
	res.type('html');
	return res.send(html);
});

if (env.get('NODE_ENV') == 'development') {
	app.get('/impersonate/:id',async function(req,res,next) {
		var user = await req.api.db().fetch(req.params.id);
		console.log("impersonating user",user);
		if (!user) {
			return next();
		};
		
		return req.login(user,function(err) {
			if (err) { return next(err) };
			return res.redirect('/');
		});
	});
};

app.get('/api/oembed',async function(req,res) {
	res.header("Access-Control-Allow-Origin","*");
	res.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept");
	
	var format = (req.query.format || "json");
	if (format != "json") {
		return res.status(501).send("Only format=json is supported");
	};
	
	var url = String(req.query.url);
	var m = url.match(/\/casts\/([^\/]+)($|\?)/);
	if (!m) {
		return res.status(404).send(("" + url + " is not embeddable"));
	};
	
	var castId = m[1];
	var cast = await req.api.db().fetch(castId);
	if (!cast) {
		return res.status(404).send(("No cast with id: " + castId));
	};
	
	console.log("cast!!",cast);
	
	var owner = await cast.owner().fetch();
	
	var height = Number(req.query.height);
	var width = Number(req.query.width);
	var ratio = 16 / 9;
	
	if (!width && !height) {
		width = 800;
	};
	
	if (!width) {
		width = height * ratio;
	} else if (!height) {
		height = width / ratio;
	};
	
	var embedUrl = ("https://scrimba.com/cast/" + castId + ".embed");
	var frame = (_1('iframe').css('border',0)).setSrc(embedUrl).end();
	frame.setAttribute('width',width);
	frame.setAttribute('height',height);
	
	return res.send(
		{type: 'rich',
		version: '1.0',
		cache_age: 60 * 60 * 24,
		title: cast.title,
		author_name: owner.name || owner.username,
		provider_name: 'Scrimba',
		provider_url: 'https://scrimba.com/',
		width: width,
		height: height,
		html: frame.toString()}
	);
});


// Zipper
var archiveSpace = require("../services/space-archiver").archiveSpace;

app.get('/casts/:id.zip',function(req,res,next) {
	var castId = req.params.id;
	var api = req.api;
	var space = api.get(castId);
	var idx = Number(req.query.index || -1);
	if (space.can(api.user(),'read')) {
		res.type('zip');
		return archiveSpace(api,res,space,idx).then(null,next);
	} else {
		return next();
	};
});

// Blobs

app.post('/blobs',bodyParser.raw({limit: '6mb'}),async function(req,res) {
	if (!(req.body instanceof Buffer)) {
		res.status(400).send("Unable to upload file (wrong Content-Type?)\n");
		return;
	};
	
	var shasum = crypto.createHash('sha1');
	shasum.update(req.body);
	var id = ("sha1:" + shasum.digest('hex'));
	
	var exists = await db.table('blobs').where({id: id}).first('id');
	
	await (!exists && db.raw('INSERT INTO blobs (id, content, uid) VALUES (?, ?, ?) ON CONFLICT DO NOTHING',[id,req.body,req.api.uid()]));
	
	return res.send({type: 'blob',id: id});
});

app.get('/blobs/:id',async function(req,res,next) {
	var ary;
	var ary = iter$(req.params.id.split("."));var id = ary[0],ext = ary[1];
	var row = await db.table('blobs').where({id: id}).first('content');
	if (!row) {
		return next();
	};
	
	res.type(ext || 'binary');
	return res.send(row.content);
});

app.get(/\.(\w)+$/,function(req,res,next) {
	console.log("try to access non-renderable url",req.originalUrl);
	if (req.originalUrl.match(/\.embed/)) {
		return next();
	};
	
	return res.status(204).send("");
});

app.get('/casts/:id',async function(req,res,next) {
	var castId = req.params.id;
	var key = req.query.backdoor;
	var backdoorKey = env.get("BACKDOOR_KEY");
	if (!backdoorKey || key != backdoorKey) {
		return next();
	};
	
	var user = await db.table('spaces').where('spaces.id',castId).join('users','spaces.uid','users.id').select('users.*').first();
	
	if (!user) {
		return next();
	};
	
	return req.login(user,function(err) {
		if (err) { return next(err) };
		return res.redirect('/casts/' + castId);
	});
});



var Scrimba = require('../site/Scrimba').Scrimba;

Imba.extendTag('link', function(tag){
	tag.prototype.sizes = function(v){ return this.getAttribute('sizes'); }
	tag.prototype.setSizes = function(v){ this.setAttribute('sizes',v); return this; };
	tag.prototype.color = function(v){ return this.getAttribute('color'); }
	tag.prototype.setColor = function(v){ this.setAttribute('color',v); return this; };
});

var Site = Imba.defineTag('Site', 'html', function(tag){
	
	tag.prototype.api = function(v){ return this._api; }
	tag.prototype.setApi = function(v){ this._api = v; return this; };
	tag.prototype.page = function(v){ return this._page; }
	tag.prototype.setPage = function(v){ this._page = v; return this; }; // no?
	tag.prototype.app = function(v){ return this._app; }
	tag.prototype.setApp = function(v){ this._app = v; return this; };
	
	tag.prototype.render = function (){
		
		var $ = this.$, opbeatApp, opbeatOrg;
		var ga = (this.api().user() ? {userId: this.api().uid()} : {});
		
		return this.$open(0).setChildren($.$ = $.$ || [
			this._head = this._head||_1('head',this).flag('head'),
			_1('body',$,29,this)
		],2).synced((
			this._head.setContent([
				($[0] || _1('title',$,0,this._head)).setContent(this.page() ? this.page().title() : "Scrimba.com",3),
				($[1] || _1('meta',$,1,this._head).setCharset("utf-8")).end(),
				($[2] || _1('meta',$,2,this._head).setName("viewport").setContent("width=device-width, initial-scale=1, maximum-scale=1,minimum-scale=1")).end(),
				($[3] || _1('meta',$,3,this._head).setName("apple-mobile-web-app-capable").setContent("yes")).end(),
				($[4] || _1('meta',$,4,this._head).setName("apple-mobile-web-app-title").setContent("Scrimba")).end(),
				($[5] || _1('meta',$,5,this._head).setName("apple-mobile-web-app-status-bar-style").setContent("black")).end(),
				
				this.page() ? Imba.static([
					($[6] || _1('meta',$,6,this._head).setName("description")).setContent(this.page().desc()).end(),
					($[7] || _1('meta',$,7,this._head).setProperty("og:title")).setContent(this.page().title()).end(),
					($[8] || _1('meta',$,8,this._head).setProperty("og:description")).setContent(this.page().desc()).end(),
					($[9] || _1('meta',$,9,this._head).setProperty("og:site_name").setContent("Scrimba")).end(),
					($[10] || _1('meta',$,10,this._head).setName("twitter:card").setContent("summary")).end(),
					($[11] || _1('meta',$,11,this._head).setName("twitter:title")).setContent(this.page().title()).end(),
					($[12] || _1('meta',$,12,this._head).setName("twitter:description")).setContent(this.page().desc()).end(),
					($[13] || _1('meta',$,13,this._head).setName("twitter:site").setContent("@scrimba_com")).end(),
					
					this.page().image() ? Imba.static([
						($[14] || _1('meta',$,14,this._head).setProperty("og:image")).setContent(this.page().image()).end(),
						($[15] || _1('meta',$,15,this._head).setProperty("twitter:image")).setContent(this.page().image()).end()
					],2,1) : void(0)
				],1,2) : (
					($[16] || _1('meta',$,16,this._head).setName("description").setContent("Scrimba is a community of developers sharing knowledge through interactive coding screencasts.")).end()
				),
				
				// favicon
				($[17] || _1('link',$,17,this._head).setRel("apple-touch-icon").setSizes("180x180").setHref("/static/cached/favico1/apple-touch-icon.png")).end(),
				($[18] || _1('link',$,18,this._head).setRel("icon").setType("image/png").setSizes("32x32").setHref("/static/cached/favico1/favicon-32x32.png")).end(),
				($[19] || _1('link',$,19,this._head).setRel("icon").setType("image/png").setSizes("16x16").setHref("/static/cached/favico1/favicon-16x16.png")).end(),
				($[20] || _1('link',$,20,this._head).setRel("manifest").setHref("/static/cached/favico1/manifest.json")).end(),
				($[21] || _1('link',$,21,this._head).setRel("mask-icon").setHref("/static/cached/favico1/safari-pinned-tab.svg").setColor("#75aaff")).end(),
				($[22] || _1('meta',$,22,this._head).setName("theme-color").setContent("#ffffff")).end(),
				
				($[23] || _1('meta',$,23,this._head).setName("keywords").setContent("coding screencast tutorial react imba javascript css js")).end(),
				($[24] || _1('script',$,24,this._head)).setText('VERSION = ' + JSON.stringify(env.get('VERSION'))),
				
				((opbeatApp = env.get('OPBEAT_CLIENT_APP_ID')) && (opbeatOrg = env.get('OPBEAT_ORG_ID'))) ? (
					($[25] || _1('script',$,25,this._head)).setText("window.OpbeatConfig = " + JSON.stringify({orgId: opbeatOrg,appId: opbeatApp}))
				) : void(0),
				
				($[26] || _1('link',$,26,this._head).setId('clientcss').setRel("stylesheet").setMedia("screen")).setHref(this.api().assetsPath('client.css')).end(),
				($[27] || _1('link',$,27,this._head).setRel("stylesheet")).setHref(("" + (this.api().monacoPath()) + "/monaco.editor.css")).end(),
				
				($[28] || _1('script',$,28,this._head)).setText("(function(i,s,o,g,r,a,m)\{i['GoogleAnalyticsObject']=r;i[r]=i[r]||function()\{\n(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\nm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\nga('create', 'UA-89256059-' + (window.top == window ? (location.hostname.indexOf('.dev') >= 0 ? 3 : 1) : 2), 'auto', " + JSON.stringify(ga) + ");\nga('set', 'anonymizeIp', true);\nga('send', 'pageview')")
			],1),
			$[29].setContent([
				app,
				$[30] || _1('script',$,30,29).setText("$$API_CACHE$$"),
				$[31] || _1('script',$,31,29),
				$[32] || _1('script',$,32,29).setDefer(true)
			],1).end((
				$[31].setSrc(this.api().assetsPath('client.js')).end(),
				$[32].setSrc(("" + (this.api().monacoPath()) + "/monaco.editor.js")).end()
			,true))
		,true));
	};
	
	tag.prototype.respondTo = async function (req,result,next){
		let url = req.originalUrl.replace(/\b(\/$)/,'');
		let t = Date.now();
		app = (_1(Scrimba)).setApi(this.api()).setReq(req).end();
		app.setUrl(url);
		
		await app.load();
		this.setPage(app.page());
		this.render();
		let apiCache = this.api().toScriptContent("API_CACHE");
		console.log(("Site.respondTo " + url),Date.now() - t + 'ms',Math.round(apiCache.length / 1000) + 'kb api');
		return result.send(this.toString().replace("$$API_CACHE$$",apiCache));
	};
});


app.get(/.*/,async function(req,res,next) {
	// make sure stores are loaded
	await req.api.db().storesDidLoad();
	console.log(("--- handle request -- " + (req.originalUrl)));
	var site = (_1(Site)).setApi(req.api).end();
	// var page = <site request=req>
	return site.respondTo(req,res,next);
});

app.post('/rpc/:action',bodyParser.urlencoded({extended: true,limit: '100mb'}),function(req,res,next) {
	var action = req.params.action;
	var o = req.body.options;
	console.log(("/rpc/" + action),req.body.args[0]);
	var p = req.api.rpc(action,req.body.args,o);
	
	var onerror = function(err) {
		return next(err);
	};
	
	return p.then(function(result) {
		res.setHeader('Scrimba-Client-Version',req.api.clientVersion());
		
		if (o.type == 'arraybuffer') {
			if (!result) {
				result = msgpack.encode(0);
				// res.send(Buffer.new(result, 'binary'))
			};
			// var result = msgpack.encode([ [1,2,3], [1,2,3], [1,2,3]])
			res.setHeader('Content-Type','application/octet-stream');
			res.setHeader('Content-Length',result.length);
			return res.send(new Buffer(result,'binary'));
		} else {
			res.type('json');
			return res.send({response: result});
		};
	},onerror);
});
if (opbeat) {
	app.use(opbeat.middleware.express());
};

app.use(pmx.expressErrorHandler());
