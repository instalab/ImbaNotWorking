function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _2 = Imba.createTagList, _3 = Imba.createTagMap, _1 = Imba.createElement;
var uxa$ = require('uxa'), TextField = uxa$.TextField, SelectField = uxa$.SelectField, Button = uxa$.Button;
var AudioManager = require('../util/AudioManager').AudioManager;
var MediaRecordingStats = require('./MediaRecordingStats').MediaRecordingStats;
var MediaRecording = require('../util/MediaRecording').MediaRecording;

var util = require('../util');

var CONSTRAINTS = [
	['noiseSuppression','Noise Suppression'],
	['echoCancellation','Echo Cancellation'],
	['autoGainControl','Auto-Gain'],
	['typingNoiseDetection','Typing Noise Detection']
];

var MicrophonePicker = Imba.defineTag('MicrophonePicker', function(tag){
	
	tag.prototype.sample = function(v){ return this._sample; }
	tag.prototype.setSample = function(v){ this._sample = v; return this; };
	
	tag.prototype.manager = function (){
		return AudioManager.instance();
	};
	
	tag.prototype.devices = function (){
		var devices_;
		return (devices_ = this.manager().devices()).OPTIONS || (devices_.OPTIONS = this.manager().devices().map(function(device,i) {
			return [device.deviceId,device.label || ("Mic #" + (i + 1))];
		}));
	};
	
	tag.prototype.supportedConstraints = function (){
		return this._supportedConstraints || (this._supportedConstraints = window.navigator.mediaDevices.getSupportedConstraints());
	};
	
	tag.prototype.stopTest = function (){
		return this.sample().stop();
	};
	
	tag.prototype.startTest = function (){
		var self = this;
		console.log("constraints",self.data());
		self.setSample(new MediaRecording({constraints: self.data()}));
		self.sample().start().then(function() { return true; }).catch(function(e) {
			var v_;
			self.log("sample could not start!!",e);
			self.uxa().flash(e.message);
			return (self.setSample(null),null);
		});
		self.schedule({raf: true});
		return self;
	};
	
	tag.prototype.unmount = function (){
		if (this.sample()) { this.sample().stop() };
		return this;
	};
	
	tag.prototype.render = function (){
		var $ = this.$, self = this;
		return self.$open(0).setChildren([
			($[0] || _1('div',$,0,self).flag('field').flag('select').flag('mb-xs').setContent([
				_1('select',$,1,0),
				
				_1('label',$,4,0).setText("Microphone")
			],2)).end((
				$[1].bindData(self.data(),'deviceId').setContent([
					(function tagLoop($0) {
						for (let i = 0, items = iter$(self.devices()), len = $0.taglen = items.length, device; i < len; i++) {
							device = items[i];
							($0[i] || _1('option',$0,i)).setValue(device[0],1).setContent(device[1],3).end();
						};return $0;
					})($[2] || _2($,2,$[1])),
					$[3] || _1('option',$,3,1).setValue('--',1).setText("No Microphone / Disabled")
				],1).end((
					$[3].end()
				,true))
			,true)),
			
			($[5] || _1('div',$,5,self).flag('bar').flag('spaced').flag('xs')).setContent([
				(function tagLoop($0) {
					var t0, $$ = $0.$iter();
					for (let i = 0, len = CONSTRAINTS.length, item; i < len; i++) {
						item = CONSTRAINTS[i];
						if (!self.supportedConstraints()[item[0]]) { continue; };
						$$.push((t0 = $0[i] || (t0=_1('div',$0,i)).flag('field').flag('checkbox').flag('xs').setContent([
							_1('input',t0.$,'A',t0).setType('checkbox'),
							_1('label',t0.$,'B',t0)
						],2)).end((
							t0.$.A.bindData(self.data(),item[0]).setName(item[0]).end(),
							t0.$.B.setContent(item[1],3)
						,true)));
					};return $$;
				})($[6] || _3($,6,$[5])),
				($[7] || _1('div',$,7,5).flag('flexer')),
				(!(self.sample()) || self.sample().audio()) ? (
					($[8] || _1('div',$,8,5).flag('button').flag('primary').on$(0,['tap','startTest'],self).setText('TEST'))
				) : (
					($[9] || _1('div',$,9,5).flag('button').flag('primary').on$(0,['tap','stopTest'],self).setText('STOP'))
				)
			],1),
			
			self.sample() ? Imba.static([
				($[10] || _1(MediaRecordingStats,$,10,self).flag('sample')).bindData(self,'sample',[]).end(),
				
				self.sample().error() ? (
					($[11] || _1('div',$,11,self).flag('sample').flag('error')).setContent((self.sample().error().message || self.sample().error()),3)
				) : void(0),
				
				self.sample().audio() ? (
					Imba.getTagForDom(self.sample().audio())
				) : void(0)
			],1,1) : void(0)
		],1).synced();
	};
})
exports.MicrophonePicker = MicrophonePicker;
