function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _2 = Imba.createTagList, _1 = Imba.createElement;
var IconButton = require('uxa').IconButton;
var SidebarPanel$ = require('./SidebarPanel'), SidebarPanel = SidebarPanel$.SidebarPanel, SidebarEntry = SidebarPanel$.SidebarEntry;

var BranchEntry = Imba.defineTag('BranchEntry', SidebarEntry, function(tag){
	tag.prototype.space = function(v){ return this._space; }
	tag.prototype.setSpace = function(v){ this._space = v; return this; };
	
	// def name
	// 	data.match(/.[^@]*/)[0]
	
	// def version
	// 	data.substr(name.len)
	
	tag.prototype.ondel = async function (e){
		e.halt();
		// trigger('pkgremove',data)
		var ok = await e.uxa().confirm(("Are you sure you want to remove " + this.data() + "?"));
		return this;
		// space.browser.removePackage(data) if ok
	};
	
	tag.prototype.name = function (){
		if (this.data() == this.space().trunk()) {
			return "screencast";
		} else if (this.data().isLocal()) {
			return this.data().model().title; // "edits@0:15"
		} else {
			return this.data().model().title;
		};
	};
	
	tag.prototype.ontap = function (e){
		e.halt();
		return this.trigger('branchenter',this.data());
	};
	
	tag.prototype.render = function (){
		var $ = this.$, t0;
		return this.$open(0).flag('Entry').setFlag(-1,this.data().model().type).flagIf('active',(this.space().branch() == this.data())).setChildren(
			t0 = this._head = this._head||(t0=_1('div',this)).flag('head').setContent([
				this._icon = this._icon||_1('i',t0).flag('icon'),
				_1('div',$,0,t0).flag('name'),
				// 	<span.name> "Branchname here"
				// 	<span.semver.muted> ""
				// <IconButton icon='v' action='upgrade'>
				_1(IconButton,$,1,t0).setIcon('x').setAction('del')
			],2)
		,2).synced((
			this._icon.flagIf('local',(this.data().isLocal())).setFlag(0,this.data().model().type),
			$[0].setContent(this.name(),3),
			$[1].end()
		,true));
	};
})
exports.BranchEntry = BranchEntry;

var BranchesPanel = Imba.defineTag('BranchesPanel', SidebarPanel, function(tag){
	
	tag.prototype.branches = function (){
		return [];
	};
	
	tag.prototype.render = function (){
		var $ = this.$, self = this;
		return self.$open(0).setChildren($.$ = $.$ || [
			_1('header',$,0,self).setContent([
				_1('div',$,1,0).flag('title'),
				_1('div',$,2,0).flag('tools').setContent(
					// <IconButton.toggle icon='+' action='dependencyadd'>
					$[3] || _1(IconButton,$,3,2).flag('toggle').setIcon('>').setAction('toggle')
				,2)
			],2),
			self._main = self._main||_1('div',self).flag('main')
		],2).synced((
			$[1].setContent(self.name() || "Branches",3),
			$[3].end(),
			self._main.setContent([
				$[4] || _1(BranchEntry,$,4,self._main).flag('trunk'),
				(function tagLoop($0) {
					for (let i = 0, items = iter$(self.space().trunk().branches()), len = $0.taglen = items.length; i < len; i++) {
						($0[i] || _1(BranchEntry,$0,i)).setData(items[i]).setSpace(self.space()).end();
					};return $0;
				})($[5] || _2($,5,self._main))
			],1).end((
				$[4].bindData(self.space(),'trunk',[]).setSpace(self.space()).end()
			,true))
		,true));
	};
})
exports.BranchesPanel = BranchesPanel;
