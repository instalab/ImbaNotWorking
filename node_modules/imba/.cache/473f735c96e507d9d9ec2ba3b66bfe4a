function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
function len$(a){
	return a && (a.len instanceof Function ? a.len() : a.length) || 0;
};
var Imba = require('imba'), _1 = Imba.createElement;
var uxa$ = require('uxa'), Dialog = uxa$.Dialog, TextField = uxa$.TextField, IconButton = uxa$.IconButton, Menu = uxa$.Menu, MenuItem = uxa$.MenuItem;

var CollectionDialog = Imba.defineTag('CollectionDialog', Dialog, function(tag){
	
	tag.prototype.renderer = function(v){ return this._renderer; }
	tag.prototype.setRenderer = function(v){ this._renderer = v; return this; };
	tag.prototype.context = function(v){ return this._context; }
	tag.prototype.setContext = function(v){ this._context = v; return this; };
	tag.prototype.items = function(v){ return this._items; }
	tag.prototype.setItems = function(v){ this._items = v; return this; };
	
	tag.prototype.setup = function (){
		// create a sub-version of collection for filtering
		this.setItems(this.data().sel(function() { return true; }));
		this.dom().style.setProperty('--li-len',len$(this.items()));
		return this;
	};
	
	tag.prototype.onshowoptions = function (e){
		var t0;
		return e.uxa().open((t0 = (t0=_1(Menu)).setContent([
			_1(MenuItem,t0.$,'A',t0).setAction(['sort','title']).setLabel('Alphabeticall'),
			_1(MenuItem,t0.$,'B',t0).setAction(['sort','-created_at']).setLabel('Newest'),
			_1(MenuItem,t0.$,'C',t0).setAction(['sort','created_at']).setLabel('Oldest')
		],2)).end((
			t0.$.A.end(),
			t0.$.B.end(),
			t0.$.C.end()
		,true)));
	};
	
	tag.prototype.onsort = function (e,params){
		e.halt();
		this.items().setSorter(params[0]);
		return this.render();
	};
	
	tag.prototype.onrouted = function (e){
		this.log("routed from inside collection");
		return this.hide();
	};
	
	tag.prototype.body = function (){
		var $ = this.$$ || (this.$$ = {}), t0, self = this;
		return (t0 = self._body = self._body||(t0=_1('div',self)).flag('body').setContent(
			// should do an intelligent scrollable list here
			t0.$.A || _1('div',t0.$,'A',t0).flag('List')
		,2)).end((
			t0.$.A.setContent(
				(function tagLoop($$) {
					for (let i = 0, items = iter$(self.items()), len = items.length; i < len; i++) {
						$$.push(self._renderer(items[i],i,self.context() || self));
						// <CastListItem[item]>
					};return $$;
				})([])
			,3)
		,true));
	};
	
	tag.prototype.header = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		return (t0 = this._header = this._header||(t0=_1('header',this)).flag('header').flag('hbar').setContent([
			this._query = this._query||_1('input',t0).flag('query').setType('text').setName('query').setPlaceholder("Type to filter"),
			// <TextField@query name='query' label="Find">
			_1(IconButton,t0.$,'A',t0).setAction('showoptions').setIcon('.')
		],2)).end((
			this._query.end(),
			t0.$.A.end()
		,true));
	};
	
	tag.prototype.oninput = function (e){
		console.log("oninput TextField",this._query.value());
		let val = this._query.value().toLowerCase();
		let reg = new RegExp(val);
		this.items().filters().set('fulltext',reg);
		return this.render();
	};
	
	tag.prototype.footer = function (){
		let $ = this.$$ || (this.$$ = {});
		return (this._footer = this._footer||_1('footer',this).flag('footer'));
	};
})
exports.CollectionDialog = CollectionDialog;
