function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var self = {};

var RelativeTime = require('./relativeTime.js');
var msgpack = require('msgpack-lite');
var Bufferish = msgpack.Decoder.prototype.bufferish;

exports.mpconcat = self.mpconcat = function (buffers){
	return Bufferish.concat(buffers);
};

exports.mpencode = self.mpencode = function (){
	var $0 = arguments, i = $0.length;
	var chunks = new Array(i>0 ? i : 0);
	while(i>0) chunks[i-1] = $0[--i];
	var encoder = new (msgpack.Encoder)({});
	for (let i = 0, items = iter$(chunks), len = items.length; i < len; i++) {
		encoder.write(items[i]);
	};
	return encoder.read();
};

exports.delay = self.delay = function (ms){
	if(ms === undefined) ms = 1000;
	return new Promise(function(resolve,reject) {
		return setTimeout(resolve,ms);
	});
};

exports.timeAgo = self.timeAgo = function (value){
	return value ? ((new RelativeTime(new Date(value)).microTimeAgo() + " ago")) : "";
};

exports.duration = self.duration = function (value){
	return self.msToStr(value || 0);
};

exports.msToStr = self.msToStr = function (t,includeMs){
	var s = Math.floor((t % 60000) / 1000);
	var m = Math.floor((t - s * 1000) / 60000);
	
	if (s == 60) {
		s = 0;
		m++;
	};
	
	// m ("0"+m).slice(-2)
	var str = ("" + m + ":" + ("0" + s).slice(-2));
	
	if (includeMs) {
		str = str + '.' + ("000" + (t % 1000)).slice(-3);
	};
	
	return str;
};

exports.uuid = self.uuid = function (a,b){
	b = a = '';
	while (a++ < 36){
		b += (a * 51 & 52) ? ((a ^ 15) ? (8 ^ Math.random() * ((a ^ 20) ? 16 : 4)) : 4).toString(16) : '-';
	};
	return b;
};

exports.rndstr = self.rndstr = function (len){
	if(len === undefined) len = 16;
	return self.uuid().replace(/\-/g,'').substr(0,len);
};

exports.sleep = self.sleep = function (duration){
	if(duration === undefined) duration = 0;
	return new Promise(function(resolve) { return setTimeout(resolve,duration); });
};
