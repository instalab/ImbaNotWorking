function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
function len$(a){
	return a && (a.len instanceof Function ? a.len() : a.length) || 0;
};
var self = {};

var stateForSpaceId = require("./space-state").stateForSpaceId;

// var hljs = require 'highlight.js'
// hljs.configure classPrefix: 'tok-'
// var imbahl = require '../util/hljs-imba.js'
// hljs.registerLanguage('imba',imbahl)

var highlight = require('../util/Highlighter').highlight;

var extToLang = {
	// imba: 'ruby'
	txt: 'markdown',
	js: 'javascript'
};

exports.highlightCode = self.highlightCode = function (lang,raw,ctx){
	let code;
	try {
		code = highlight(raw,lang);
	} catch (e) {
		console.log("highlight error",e);
		code = raw.replace('>','&gt;').replace('<','&lt;');
	};
	
	var norm = len$(code);
	var ranges = [];
	
	var ln = 0;
	var depths = [];
	var stack = [];
	
	// optimize
	code = code.replace(/<span class="(tok-)?([^\"\']+)">|<\/span>|\n/g,function(m,prefix,tok) {
		if (m[0] == '\n') {
			depths[ln] = len$(stack);
			ln++;
			
			if (len$(stack)) {
				// close and reopen on next lines
				let close = new Array(len$(stack) + 1).join(">");
				let open = stack.join("");
				return close + "\n" + open;
			};
			
			return m[0];
		} else if (m[1] == '/') {
			stack.pop();
			return '>';
		};
		
		let idx = ctx.hl.indexOf(tok);
		if (idx == -1) { idx = (ctx.hl.push(tok) - 1) };
		let val = ("<" + String.fromCharCode(64 + idx));
		stack.push(val);
		return val;
	});
	
	let lines = code.split("\n").slice(0,30);
	
	// shorten long lines - keep level
	for (let i = 0, items = iter$(lines), len = items.length, line; i < len; i++) {
		// if the line is long - simply strip out all depths
		line = items[i];
		if (len$(line) > 200) {
			let shortLine = line.replace(/(\<.|\>)/g,'').substr(0,140);
			lines[i] = shortLine;
			// console.log i,shortLine
		};
	};
	
	let result = lines.join("\n"); // code.split(endMark)[0]	
	
	// console.log code.len,result.len,ln,stack
	// console.log result
	return result;
};

exports.previewForState = self.previewForState = function (state){
	var widgets = {};
	var fid;
	var preview = {
		ts: new Date(),
		files: [],
		hl: []
	};
	
	for (let i = 0, items = iter$(state.widgets), len = items.length, item; i < len; i++) {
		item = items[i];
		if (item.type == 'agent') {
			fid = item.file;
		};
		
		if (item.type == 'file') {
			if (fid == null) {
				fid = item.id;
			};
			
			let sel = item.id == fid;
			let typ = item.name.split('.').pop();
			let file = [item.name,'',sel ? 1 : 0];
			
			if (sel) {
				let lang = extToLang[typ] || typ;
				file[1] = self.highlightCode(lang,item.body,preview); // hljs.highlight(lang,item:body)[:value]
				// console.log "file is selected",item:id,code
				// preview:code.push(code)
			};
			
			preview.files.push(file);
			// if item:id == preview:tab
			//	preview:code = item:body
		};
		
		if (item.type == 'browser' && item.visible) {
			preview.browser = item.layout;
			if (item.npmPackages) {
				preview.npm = item.npmPackages.resolved;
			};
		};
	};
	
	return preview;
};

exports.previewForSpace = self.previewForSpace = async function (api,space,idx){
	if(idx === undefined) idx = -1;
	var state = await stateForSpaceId(api,space.id,idx);
	return self.previewForState(state);
};
