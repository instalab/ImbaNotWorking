var Imba = require('imba'), _1 = Imba.createElement;
var uxa$ = require('uxa'), Dialog = uxa$.Dialog, TextField = uxa$.TextField;

var BrowserConfigurationDialog = Imba.defineTag('BrowserConfigurationDialog', Dialog, function(tag){
	tag.prototype.browser = function (){
		return this.data();
	};
	
	tag.prototype.body = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		return (t0 = this._body = this._body||(t0=_1('div',this)).flag('body').setContent([
			_1(TextField,t0.$,'A',t0).setType('text').setName('rootPath').setLabel('Root directory').setRequired(false).setPlaceholder('/').setDesc("The browser will serve files from this directory"),
			_1(TextField,t0.$,'B',t0).setType('text').setName('catchallPath').setLabel('Catch-all filename').setDesc("This file will be served if the URL doesn't match a static file. Relative to root path.")
		],2)).end((
			t0.$.A.end(),
			t0.$.B.end()
		,true));
	};
	
	tag.prototype.onuxasubmit = function (e){
		var self = this;
		return self.uxa().queue().add(200,function() {
			var v_;
			var vals = self.formData();
			self.browser().setRootPath((vals.rootPath + "/").replace(/\/+/g,"/"));
			return (self.browser().setCatchallPath(v_ = (vals.catchallPath || null)),v_);
		});
	};
})
exports.BrowserConfigurationDialog = BrowserConfigurationDialog;
