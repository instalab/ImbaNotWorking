var Imba = require('imba');
var RelativeTime = require('../utils/relative-time.js');
var util = require('../../util');




var Format = Imba.defineTag('Format', 'span', function(tag){
	tag.prototype.__data = {watch: 'dataDidSet',name: 'data'};
	tag.prototype.data = function(v){ return this._data; }
	tag.prototype.setData = function(v){
		var a = this.data();
		if(v != a) { this._data = v; }
		if(v != a) { this.dataDidSet && this.dataDidSet(v,a,this.__data) }
		return this;
	};
	
	tag.prototype.dataDidSet = function (value){
		var v_;
		return (this.setText(v_ = this.format(value)),v_);
	};
	
	tag.prototype.format = function (value){
		return value;
	};
	
	tag.timeAgo = function (value){
		return value ? new RelativeTime(new Date(value)).timeAgo() : "";
	};
	
	tag.duration = function (value){
		return (value != undefined) ? util.msToStr(value) : "";
	};
	
	tag.count = function (value,plural,singular){
		if(plural === undefined) plural = '';
		if(singular === undefined) singular = '';
		var res = (value > 10000) ? (
			(Math.round(value / 100) / 10).toFixed(1).replace('.0','') + "k " + plural
		) : ((value == 1) ? (
			("1 " + singular)
		) : (
			("" + value + " " + plural)
		));
		
		return (res[res.length - 1] == ' ') ? res.slice(0,-1) : res;
	};
})
exports.Format = Format;

var TimeAgo = Imba.defineTag('TimeAgo', Format, function(tag){
	tag.prototype.format = function (value){
		var v_;
		return (this.setText(v_ = value ? new RelativeTime(new Date(value)).timeAgo() : ""),v_);
	};
})
exports.TimeAgo = TimeAgo;

var Duration = Imba.defineTag('Duration', Format, function(tag){
	tag.prototype.format = function (value){
		var v_;
		return (this.setText(v_ = (value != undefined) ? util.msToStr(value) : ""),v_);
	};
})
exports.Duration = Duration;

var ShortCount = Imba.defineTag('ShortCount', Format, function(tag){
	tag.prototype.singular = function(v){ return this._singular; }
	tag.prototype.setSingular = function(v){ this._singular = v; return this; };
	tag.prototype.plural = function(v){ return this._plural; }
	tag.prototype.setPlural = function(v){ this._plural = v; return this; };
	tag.prototype.format = function (value){
		if (value > 10000) {
			return (Math.round(value / 100) / 10).toFixed(1).replace('.0','') + "k " + this.plural();
		} else if (value == 1) {
			return ("1 " + this.singular());
		} else {
			return ("" + value + " " + this.plural());
		};
	};
})
exports.ShortCount = ShortCount;
