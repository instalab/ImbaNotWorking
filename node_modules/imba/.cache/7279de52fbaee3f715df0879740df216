function len$(a){
	return a && (a.len instanceof Function ? a.len() : a.length) || 0;
};
function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _3 = Imba.createTagList, _2 = Imba.createTagMap, _1 = Imba.createElement;
var uxa$ = require('uxa'), IconButton = uxa$.IconButton, Menu = uxa$.Menu, MenuItem = uxa$.MenuItem, Actionable = uxa$.Actionable;
var Carousel = require('./Carousel').Carousel;
var CastTile$ = require('./CastTile'), CastTile = CastTile$.CastTile, CastListItem = CastTile$.CastListItem;

var CollectionSection = Imba.defineTag('CollectionSection', function(tag){
	tag.prototype.__layout = {'default': 'tiles',name: 'layout'};
	tag.prototype.layout = function(v){ return this._layout; }
	tag.prototype.setLayout = function(v){ this._layout = v; return this; }
	tag.prototype._layout = 'tiles';
	tag.prototype.__title = {'default': "Section",name: 'title'};
	tag.prototype.title = function(v){ return this._title; }
	tag.prototype.setTitle = function(v){ this._title = v; return this; }
	tag.prototype._title = "Section";
	tag.prototype.items = function(v){ return this._items; }
	tag.prototype.setItems = function(v){ this._items = v; return this; };
	tag.prototype.__limit = {'default': 200,name: 'limit'};
	tag.prototype.limit = function(v){ return this._limit; }
	tag.prototype.setLimit = function(v){ this._limit = v; return this; }
	tag.prototype._limit = 200;
	tag.prototype.__size = {'default': 'sm',name: 'size'};
	tag.prototype.size = function(v){ return this._size; }
	tag.prototype.setSize = function(v){ this._size = v; return this; }
	tag.prototype._size = 'sm';
	
	tag.prototype.renderer = function (cast,key){
		let key_, $ = this.$$ || (this.$$ = {}), $1;
		return ($[($1 = 'key$' + key)] || _1(CastTile,$,$1,this).flag('dark')).setData(cast).setContext(this.data()).end();
	};
	
	tag.prototype.onshowoptions = function (e){
		var t0;
		return e.uxa().open((t0 = (t0=_1(Menu)).setContent([
			_1(MenuItem,t0.$,'A',t0).setAction(['sort','title']).setLabel('Alphabetical'),
			_1(MenuItem,t0.$,'B',t0).setAction(['sort','-created_at']).setLabel('Newest'),
			_1(MenuItem,t0.$,'C',t0).setAction(['sort','created_at']).setLabel('Oldest')
		],2)).end((
			t0.$.A.end(),
			t0.$.B.end(),
			t0.$.C.end()
		,true)));
	};
	
	tag.prototype.onsort = function (e,data){
		console.log('onsort',e,data);
		var key = data[0];
		this.items().setSorter(key);
		e.halt();
		return this;
	};
	
	tag.prototype.header = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		return (t0 = this._header = this._header||(t0=_1('header',this)).flag('header').flag('flat').setContent([
			_1('div',t0.$,'A',t0).flag('actions').setContent(t0.$.B || _1(IconButton,t0.$,'B','A').setAction('showoptions').setIcon('.'),2),
			// <.count> items.len
			_1('span',t0.$,'C',t0).flag('heading')
		],2)).end((
			t0.$.B.end(),
			t0.$.C.setNestedAttr('uxa','md',this.title()).end()
		,true));
	};
	
	tag.prototype.render = function (){
		var $ = this.$, self = this;
		return self.$open(0).flag('Section').setFlag(-1,self.data() && self.data().id).setChildren([
			self.header(),
			(self.layout() == 'tiles') ? (
				($[0] || _1(Carousel,$,0,self).flag('dense')).bindData(self,'items',[]).setFlag(0,self.size()).setRenderer(CastTile.Renderer).end()
			) : ((self.layout() == 'list') ? (
				($[1] || _1('div',$,1,self).flag('List')).setContent(
					(function tagLoop($0) {
						var $$ = $0.$iter();
						for (let i = 0, items = iter$(self.items()), len = items.length; i < len; i++) {
							if (i >= self.limit()) { continue; };
							$$.push(($0[i] || _1(CastListItem,$0,i)).setData(items[i]).end());
						};return $$;
					})($[2] || _2($,2,$[1]))
				,5)
			) : void(0)),
			(len$(self.items()) > self.limit()) ? (
				($[3] || _1('footer',$,3,self).flag('footer').flag('flat').setContent(
					$[4] || _1(Actionable,$,4,3).flag('h3').setAction('collectionlist').setText('show all')
				,2)).end((
					$[4].bindData(self,'items',[]).end()
				,true))
			) : void(0)
		],1).synced();
	};
})
exports.CollectionSection = CollectionSection;

