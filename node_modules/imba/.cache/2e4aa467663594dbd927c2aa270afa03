function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba');

var Form = Imba.defineTag('Form', 'form', function(tag){
	
	tag.prototype.__formData = {watch: 'formDataDidSet',name: 'formData'};
	tag.prototype.formData = function(v){ return this._formData; }
	tag.prototype.setFormData = function(v){
		var a = this.formData();
		if(v != a) { this._formData = v; }
		if(v != a) { this.formDataDidSet && this.formDataDidSet(v,a,this.__formData) }
		return this;
	};
	
	tag.prototype.formDataDidSet = function (data){
		if (this._commited) { return this.applyFormData(data) };
	};
	
	tag.prototype.loadFormData = function (){
		if (this._formData) { return this.applyFormData(this._formData) };
	};
	
	tag.prototype.commit = function (){
		tag.prototype.__super__.commit.apply(this,arguments);
		if (!this._commited) {
			this.loadFormData();
			this._commited = true;
		};
		return this;
	};
	
	tag.prototype.formElements = function (){
		var o = [];
		
		for (let i = 0, items = iter$(this.dom().elements), len = items.length, field; i < len; i++) {
			field = items[i];
			let node = field; // field.@tag
			let name = field.name;
			
			if (name) {
				o.push(node);
			};
			
			if (o[name]) {
				if (!((o[name] instanceof Array))) { o[name] = [o[name]] };
				o[name].push(node);
			} else {
				o[name] = node;
			};
		};
		return o;
	};
	
	tag.prototype.applyFormData = function (dict){
		if(dict === undefined) dict = {};
		var fields = this.formElements();
		
		for (let i = 0, items = iter$(fields), len = items.length, field; i < len; i++) {
			field = items[i];
			let typ = field.type;
			let val = dict[field.name];
			
			if (val == undefined) { continue; };
			
			if (typ == 'radio' || typ == 'checked') {
				field.checked = field.value == val;
			} else {
				if (field._tag) {
					field._tag.setValue(val);
				} else {
					field.value = val;
				};
			};
		};
		return this;
	};
	
	tag.prototype.formData = function (){
		var o = {};
		for (let i = 0, items = iter$(this.dom().elements), len = items.length, field; i < len; i++) {
			field = items[i];
			if (field.type == 'checkbox') {
				if (!field.checked) { continue; };
			} else if (field.type == 'radio') {
				if (!field.checked) { continue; };
			};
			if (field.name) {
				o[field.name] = ((field._tag && field._tag.value) ? field._tag.value() : field.value);
			};
		};
		return o;
	};
	
	tag.prototype.onsubmit = async function (e){
		e.cancel().halt(); // should it do this by default?
		
		if (this.uxa().queue().busy()) {
			return;
		};
		
		this.trigger('uxa:submit',this.formData());
		
		await this.uxa().queue();
		
		if (this.uxa().queue().failed()) {
			this.log("failed?!?!",this.uxa().queue().error());
			this.uxa().flash(this.uxa().queue().error());
			this.uxa().queue().reset();
		};
		
		return this;
		// else
		//	setTimeout(&,200) do
		//		hide
	};
	
	tag.prototype.onuxabusy = function (e){
		e.halt();
		return this.flag('uxa-busy');
	};
	
	tag.prototype.onuxaidle = function (e){
		var self = this;
		e.halt();
		return setTimeout(function() {
			if (self.uxa().queue().idle()) {
				return self.unflag('uxa-busy');
			};
		},200);
	};
})
exports.Form = Form;
