var Imba = require('imba'), _1 = Imba.createElement;
var Stack = require('./Stack').Stack;
var Menu = require('./Menu').Menu;
var MenuItem = require('./MenuItem').MenuItem;
var Button$ = require('./Button'), Button = Button$.Button, IconButton = Button$.IconButton;
var Field$ = require('./Field'), TextField = Field$.TextField, TextArea = Field$.TextArea, SelectField = Field$.SelectField, TagField = Field$.TagField, CheckBox = Field$.CheckBox;
var Popover = require('./Popover').Popover;
var Dialog = require('./Dialog').Dialog;
var Indicator = require('./Indicator').Indicator;
var Form = require('./Form').Form;
var Snackbar = require('./Snackbar').Snackbar;
var Tile = require('./Tile').Tile;
var Icon = require('./Icon').Icon;
var Queue = require('./Queue').Queue;
var Code = require('./Code').Code;
var Actionable = require('./Actionable').Actionable;
// import Note from './note/index'

var marked = require('marked');

var Markdown = exports.Markdown = {
	options: {},
	marked: marked,
	render: function(text,modifiers) { return this.marked(text); },
	configure: function(options) { return this.marked.setOptions(options); }
};

Markdown.configure({highlight: function(code,lang) { return Code.highlight(code,lang); }});

var MarkdownCache = {};
var SetterCache = {};

var mdclean = function(md,out) {
	if (md.indexOf('\n') == -1 && out.indexOf('<p>') == 0) {
		return out.slice(3,out.lastIndexOf('</p>'));
	} else {
		return out;
	};
};

var md2html = function(md) {
	var MarkdownCache_;
	return MarkdownCache[md] || (MarkdownCache[md] = mdclean(md,Markdown.render(md)));
};

var toSetter = function(key) {
	var SetterCache_;
	return SetterCache[key] || (SetterCache[key] = Imba.toCamelCase('set-' + key));
};

var ActionHandler = function(e) {
	let target = this;
	let action = target.uxa().action();
	
	if (action) {
		target.trigger("uxa:action",action);
	};
	
	if ((typeof action=='string'||action instanceof String)) {
		e.halt().silence();
		return target.trigger(action,target.uxa().contextData());
	} else if (action instanceof Array) {
		e.halt().silence();
		return target.trigger(action[0],action.slice(1));
	} else if (action instanceof Function) {
		e.halt().silence();
		return action.call(target,e);
	} else {
		return e._responder = null;
	};
};

function UXAWrapper(owner){
	this._owner = owner;
	this._options = {};
	this;
};

UXAWrapper.prototype.__md = {watch: 'mdDidSet',name: 'md'};
UXAWrapper.prototype.md = function(v){ return this._md; }
UXAWrapper.prototype.setMd = function(v){
	var a = this.md();
	if(v != a) { this._md = v; }
	if(v != a) { this.mdDidSet && this.mdDidSet(v,a,this.__md) }
	return this;
};
UXAWrapper.prototype.__action = {watch: 'actionDidSet',name: 'action'};
UXAWrapper.prototype.action = function(v){ return this._action; }
UXAWrapper.prototype.setAction = function(v){
	var a = this.action();
	if(v != a) { this._action = v; }
	if(v != a) { this.actionDidSet && this.actionDidSet(v,a,this.__action) }
	return this;
};

UXAWrapper.prototype.open = function (component,options){
	if(options === undefined) options = {};
	return Stack.show(component,this._owner,options);
};

UXAWrapper.prototype.menu = function (component){
	return this;
};

UXAWrapper.prototype.confirm = function (message){
	var self = this;
	return new Promise(function(resolve,reject) {
		var t0;
		var ok = function() { return resolve(true); };
		var cancel = function() { return resolve(false); };
		var dialog = (t0 = (t0=_1(Dialog)).setContent(t0.$.A || _1('span',t0.$,'A',t0),2)).on$(0,['uxadismiss',cancel],self).on$(1,['uxasubmit',ok],self).end((
			t0.$.A.setNestedAttr('uxa','md',message).end()
		,true));
		return self.open(dialog);
	});
};

UXAWrapper.prototype.flash = function (item,typ){
	if (item instanceof Error) {
		item = item.message;
		typ = 'dark'; // Error
	};
	
	if ((typeof item=='string'||item instanceof String)) {
		item = (_1(Snackbar)).setFlag(0,typ || 'dark').setNestedAttr('uxa','md',item).end();
	};
	
	if (item instanceof Snackbar) {
		this.open(item,{autohide: true});
	};
	return this;
};

UXAWrapper.prototype.set = function (key,value){
	return this[toSetter(key)](value);
};

UXAWrapper.prototype.mdDidSet = function (value){
	return this._owner.dom().innerHTML = md2html(value);
};

UXAWrapper.prototype.actionDidSet = function (action,prev){
	this._owner.ontap = ActionHandler;
	return this;
};

UXAWrapper.prototype.contextData = function (){
	var data = null;
	var el = this._owner;
	while (el){
		if (data = el.data()) {
			return data;
		};
		el = el.parent();
	};
	return null;
};

UXAWrapper.prototype.queue = function (){
	return this._queue || (this._queue = new Queue(this._owner));
};

Imba.extendTag('element', function(tag){
	
	tag.prototype.uxa = function (){
		return this._uxa || (this._uxa = new UXAWrapper(this));
	};
	
	tag.prototype.uxaSetAttribute = function (key,value){
		return this.uxa().set(key,value);
	};
});


	
	Imba.Event.prototype.uxa = function (){
		return this.target().uxa();
	};



var Code = exports.Code = Code;
var UXA = exports.UXA = new UXAWrapper(null);
var Button = exports.Button = Button;
var IconButton = exports.IconButton = IconButton;
var Menu = exports.Menu = Menu;
var MenuItem = exports.MenuItem = MenuItem;
var TextField = exports.TextField = TextField;
var TagField = exports.TagField = TagField;
var TextArea = exports.TextArea = TextArea;
var CheckBox = exports.CheckBox = CheckBox;
var SelectField = exports.SelectField = SelectField;
MenuItem = exports.MenuItem = MenuItem;
var Popover = exports.Popover = Popover;
var Dialog = exports.Dialog = Dialog;
var Form = exports.Form = Form;
var Indicator = exports.Indicator = Indicator;
var Snackbar = exports.Snackbar = Snackbar;
var Tile = exports.Tile = Tile;
var Icon = exports.Icon = Icon;
var Actionable = exports.Actionable = Actionable;

// export var Note = Note

if (false) {};
