function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), self = {}, _4 = Imba.createTagList, _2 = Imba.createTagMap, _3 = Imba.createTagLoopResult, _1 = Imba.createElement;
var protocol$ = require('../protocol'), ACTION = protocol$.ACTION, CAST = protocol$.CAST, LAYOUTMASK = protocol$.LAYOUTMASK;

var uxa$ = require('uxa'), Icon = uxa$.Icon, Menu = uxa$.Menu;
var SidebarPanel$ = require('./SidebarPanel'), SidebarPanel = SidebarPanel$.SidebarPanel, SidebarEntry = SidebarPanel$.SidebarEntry;
var filereader$ = require('../../util/filereader'), readTextFile = filereader$.readTextFile, readArrayBuffer = filereader$.readArrayBuffer, readFileSystemEntry = filereader$.readFileSystemEntry;

var SPATH = CAST.EXPLORER_PANEL + '$';

var EntryHead = Imba.defineTag('EntryHead', function(tag){
	
	tag.prototype.build = function (){
		return this.setAttribute('draggable',true);
	};
	
	tag.prototype.ondragstart = function (e){
		var dt = e.event().dataTransfer;
		return e.event().dataTransfer.setData("scrimba/widget",("" + (this.data().id())));
	};
	
	tag.prototype.layoutMask = function (){
		return LAYOUTMASK.SCALED;
	};
});

var Entry = Imba.defineTag('Entry', SidebarEntry, function(tag){
	tag.prototype.__level = {'default': 0,name: 'level'};
	tag.prototype.level = function(v){ return this._level; }
	tag.prototype.setLevel = function(v){ this._level = v; return this; }
	tag.prototype._level = 0;
	
	tag.prototype.rename = function (){
		var name = window.prompt("Rename",this.name());
		return this.data().rename(name);
	};
	
	tag.prototype.remove = function (e){
		if (window.confirm(("Are you sure you want to delete " + (this.data().path()) + "?"))) {
			return this.data().rm();
		};
	};
	
	tag.prototype.name = function (){
		return this.data().name();
	};
	
	tag.prototype.icon = function (){
		let $ = this.$$ || (this.$$ = {});
		return (this._icon = this._icon||_1('i',this).flag('icon')).setFlag(0,this.data().ext());
	};
	
	tag.prototype.head = function (){
		// should measure-text
		let $ = this.$$ || (this.$$ = {}), t0;
		let long = this.name().length + (this.level() * 2) > 28;
		let ext = this.data().ext();
		// let shortname = (ext ? data.name.slice(0,-ext:length - 1) : data.name)
		
		return (t0 = this._head = this._head||(t0=_1(EntryHead,this)).flag('head')).bindData(this,'data',[]).setSref((SPATH + this.data().id())).flagIf('lazy',(this.data().isLazy())).flagIf('unsaved',(this.data().isUnsaved())).setContent([
			this.icon(),
			long ? Imba.static([
				(t0.$.A || _1('div',t0.$,'A',t0).flag('name').flag('long')).setTitle(this.name()).setContent((ext ? this.name().slice(0,-ext.length - 1) : this.name()),3).end(),
				(t0.$.B || _1('div',t0.$,'B',t0).flag('ext')).setText("." + ext)
			],2,1) : (
				(t0.$.C || _1('div',t0.$,'C',t0).flag('name')).setContent(this.name(),3)
			)
		],1).end();
	};
	
	tag.prototype.render = function (){
		return this.$open(0).setChildren(this.head(),3).synced();
	};
	
	tag.prototype.oncontextmenu = function (e){
		var t0;
		e.prevent().stop();
		
		return this._head.uxa().open((t0 = (t0=_1(Menu)).flag('narrow').setContent([
			_1('div',t0.$,'A',t0).flag('item').on$(0,['tap','rename'],this).setText('Rename...'),
			_1('div',t0.$,'B',t0).flag('item').on$(0,['tap','remove'],this).setText('Delete file')
		],2)).end());
	};
});

var FileEntry = Imba.defineTag('FileEntry', Entry, function(tag){
	
	// def focusWidgetForNode
	// 	null
	
	tag.prototype.ontap = function (e){
		var self = this;
		e.halt();
		// rather set the value on primaryEditor -- this is more correct
		self.data().space().primaryEditor().setFile(self.data());
		// data.space.agent.file = data
		return setTimeout(function() {
			if (self.data().space().isEditing()) {
				return self.data().space().view().editor().focus();
			};
		},0);
	};
	
	tag.prototype.sontouchstart = function (t){
		return this;
	};
	
	tag.prototype.sontouchend = function (t){
		return this;
	};
	
	tag.prototype.render = function (){
		this.flag('active',this.data().clientIsShowing());
		this.flag('active-agent',this.data().agentIsShowing(this.data().space().me().follows()));
		return tag.prototype.__super__.render.apply(this,arguments);
	};
});

self.checkBinary = async function (file){
	var buf = await readArrayBuffer(file.slice(0,1024));
	var view = new Uint8Array(buf);
	for (let i = 0, items = iter$(view), len = items.length, byte; i < len; i++) {
		byte = items[i];
		if (byte == 0) {
			return true;
		};
	};
	return false;
};

self.uploadBlob = async function (content){
	var res = await window.fetch("/blobs",{credentials: 'include',
	method: 'POST',
	body: content,
	headers: {'Content-Type': 'application/octet-stream'}});
	var data = await res.json();
	return data.id;
};

var kb = 1024;
var mb = 1024 * kb;

self.addFileToDirectory = async function (dir,file){
	var isBinary = await self.checkBinary(file);
	var limit = isBinary ? ((5 * mb)) : ((500 * kb));
	if (file.size > limit) {
		// TODO: ehm, what to do?
		return;
	};
	
	var item = {name: file.name};
	
	if (isBinary) {
		item.blobId = await self.uploadBlob(file);
	} else {
		item.body = await readTextFile(file);
	};
	
	return dir.mkfile(item.name,item);
};

self.ignoreEntry = function (entry){
	if (Imba.indexOf(entry.name,['.DS_Store','node_modules']) >= 0) {
		return true;
	};
	
	return false;
};

var addEntriesToDirectory = async function(dir,entries) {
	for (let i = 0, items = iter$(entries), len = items.length, entry; i < len; i++) {
		entry = items[i];
		if (!(!self.ignoreEntry(entry))) { continue; };
		if (entry.isDirectory) {
			let subdir = dir.mkdir(entry.name);
			entry.createReader().readEntries(function(subEntries) {
				return addEntriesToDirectory(subdir,subEntries);
			});
		} else if (entry.isFile) {
			let file = await readFileSystemEntry(entry);
			await self.addFileToDirectory(dir,file);
		};
	};
	return null;
};


var DirEntry = Imba.defineTag('DirEntry', Entry, function(tag){
	
	tag.prototype.newfile = function (){
		var self = this, file;
		var name = window.prompt("Name file");
		if (name) {
			if (file = self.data().mkfile(name)) {
				// TODO create file.open instead?
				self.data().space().primaryEditor().setFile(file);
				// data.space.agent.file = file
				self.data().space().view().requestFocus(self.data().space().primaryEditor());
				return setTimeout(function() { return self.data().space().view().editor().focus(); },100);
			};
		};
	};
	
	tag.prototype.newdir = function (){
		var name = window.prompt("Name directory");
		if (name) { return this.data().mkdir(name) };
	};
	
	tag.prototype.toggle = function (e){
		var v_;
		return (this.data().setExpanded(v_ = !this.data().expanded()),v_);
	};
	
	tag.prototype.ontap = function (e){
		e.stop();
		return this.toggle();
	};
	
	tag.prototype.entries = function (){
		return this.data().entries().toArray().slice().sort(function(a,b) {
			return (a.TYPE == b.TYPE) ? (((a.name() > b.name()) ? 1 : (-1))) : (((a.TYPE == 'dir') ? (-1) : 1));
		});
	};
	
	tag.prototype.oncontextmenu = function (e){
		var t0;
		e.prevent().stop();
		
		return this._head.uxa().open((t0 = (t0=_1(Menu)).flag('narrow').setContent([
			_1('div',t0.$,'A',t0).flag('item').on$(0,['tap','newfile'],this).setText("New File"),
			_1('div',t0.$,'B',t0).flag('item').on$(0,['tap','rename'],this).setText("Rename..."),
			_1('hr',t0.$,'C',t0),
			_1('div',t0.$,'D',t0).flag('item').on$(0,['tap','newdir'],this).setText('New Folder...'),
			_1('div',t0.$,'E',t0).flag('item').on$(0,['tap','remove'],this).setText('Delete Folder')
		],2)).end());
	};
	
	
	tag.prototype.head = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		return (t0 = this._head = this._head||(t0=_1(EntryHead,this)).flag('head').setContent([
			this._icon = this._icon||_1('i',t0).flag('icon').flag('folder').flag('toggler'),
			_1('div',t0.$,'A',t0).flag('name')
		],2)).bindData(this,'data',[]).setSref((SPATH + this.data().id())).end((
			t0.$.A.setContent(this.data().name(),3)
		,true));
	};
	
	tag.prototype.body = function (){
		var $ = this.$$ || (this.$$ = {}), self = this, t0;
		return (t0 = self._body = self._body||(t0=_1('div',self)).flag('body')).setFlag(0,("l" + self.level())).setContent(
			(function tagLoop($0,$1,$$) {
				for (let i = 0, items = iter$(self.entries()), len = items.length, item; i < len; i++) {
					// should sort by name and type
					item = items[i];
					if (item.TYPE == 'file') {
						$$.push(($0[i] || _1(FileEntry,$0,i)).setData(item).setLevel((self._level + 1)).end());
					} else {
						$$.push(($1[i] || _1(DirEntry,$1,i)).setData(item).setLevel((self._level + 1)).end());
					};
				};return $$;
			})(t0.$['A'] || _2(t0.$,'A',self._body),t0.$['B'] || _2(t0.$,'B',self._body),_3())
		,5);
	};
	
	tag.prototype.render = function (){
		return this.$open(0).flagIf('expanded',(this.data().expanded())).setChildren([
			this.head(),
			this.data().expanded() ? this.body() : void(0)
		],1).synced();
	};
});

var RootEntry = Imba.defineTag('RootEntry', DirEntry, function(tag){
	
	tag.prototype.name = function (){
		return "Workspace";
	};
	
	tag.prototype.ontap = function (e){
		return e.halt();
	};
});


var ExplorerView = Imba.defineTag('ExplorerView', SidebarPanel, function(tag){
	
	tag.prototype.__droptarget = {watch: 'droptargetDidSet',name: 'droptarget'};
	tag.prototype.droptarget = function(v){ return this._droptarget; }
	tag.prototype.setDroptarget = function(v){
		var a = this.droptarget();
		if(v != a) { this._droptarget = v; }
		if(v != a) { this.droptargetDidSet && this.droptargetDidSet(v,a,this.__droptarget) }
		return this;
	};
	
	tag.prototype.oncontextmenu = function (e){
		e.prevent().stop();
		return this.showMenu();
	};
	
	tag.prototype.focusWidgetForNode = function (){
		return this.space().primaryEditor();
	};
	
	tag.prototype.showMenu = function (){
		return this;
	};
	
	tag.prototype.ondragenter = function (e){
		var v_;
		e.prevent().stop();
		try {
			var dir = e.event().target.closest('.DirEntry');
			return (this.setDroptarget(v_ = dir ? dir._tag : this._main),v_);
		} catch (e) { };
	};
	
	
	tag.prototype.ondragover = function (e){
		return e.prevent().stop();
	};
	
	tag.prototype.ondragleave = function (e){
		var v_;
		e.prevent().stop();
		if (!this.dom().contains(e.event().relatedTarget)) {
			return (this.setDroptarget(null),null);
		};
	};
	
	tag.prototype.ondrop = async function (e){
		var self = this;
		if (!(self.droptarget())) { return };
		
		var dd = e.event().dataTransfer;
		var target = self.droptarget();
		e.prevent().stop();
		
		self.setDroptarget(null);
		
		var promises = [];
		var moveWidget = null;
		var entries = [];
		
		for (let i = 0, items = iter$(dd.items), len = items.length, item; i < len; i++) {
			item = items[i];
			let node = item;
			self.log("ondrop",item); // ,item.getAsString
			
			if (item.type == "scrimba/widget") {
				promises.push(new Promise(function(resolve) {
					return item.getAsString(function(str) {
						let widget = self.space().__lookup(str);
						self.log("found widget",str);
						moveWidget = widget;
						return resolve(widget);
					});
				}));
				continue;
				// entries.push(space.__lookup())
			};
			
			if (item.webkitGetAsEntry) {
				node = item.webkitGetAsEntry();
				console.log("webkit entry",node);
			};
			
			if (node.isDirectory || node.isFile) {
				entries.push(node);
			};
		};
		
		await Promise.all(promises);
		// log entries
		// this drop consisted of local moves(!)
		if (moveWidget) {
			moveWidget.moveTo(target.data());
		};
		
		return addEntriesToDirectory(target.data(),entries);
	};
	
	tag.prototype.droptargetDidSet = function (curr,prev){
		var $1, $2;
		($1 = curr) && $1.flag  &&  $1.flag('droptarget');
		return ($2 = prev) && $2.unflag  &&  $2.unflag('droptarget');
	};
	
	tag.prototype.beforeRender = function (){
		let val = this.space().changed(['sidebar','fs','widget'],this);
		return val;
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).setSref(this.data().id()).setChildren($.$ = $.$ || [
			this._header = this._header||_1('header',this).flag('header').setContent([
				_1('div',$,0,this._header).flag('title').setText("Files"),
				_1('div',$,1,this._header).flag('tools').setContent(
					$[2] || _1('div',$,2,1).flag('tool').dataset('icon','mcog').on$(0,['tap','showMenu'],this)
				,2)
			],2),
			
			this._main = this._main||_1(RootEntry,this).flag('main')
		],2).synced((
			$[2].end(),
			this._main.bindData(this.space(),'fs',[]).end()
		,true));
	};
})
exports.ExplorerView = ExplorerView;
