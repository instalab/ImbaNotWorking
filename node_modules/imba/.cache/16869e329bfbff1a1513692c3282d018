var Action = require('./util/Action').Action;
var MSG = require('./protocol').MSG;

// Deprecate -- what about shortcuts
Action.register(
	{name: 'toggleConsole',
	desc: 'Toggle console',
	scope: ['space','simulator'],
	shortcut: 'mod+shift+y',
	state: function(_0) { return _0.space().console().enabled() ? 'on' : 'off'; },
	cmd: function(_0) { var v_;
	return (_0.space().console().setEnabled(v_ = !_0.space().console().enabled()),v_); }}
);

// Deprecate? -- what about shortcuts
Action.register(
	{name: 'toggleBrowser',
	desc: 'Toggle browser',
	scope: ['space'],
	shortcut: 'mod+shift+u',
	state: function(_0) { return _0.space().browser().visible() ? 'on' : 'off'; },
	cmd: function(_0) {
		var v_;
		let space = _0.space();
		if (space.simulator()) {
			space.simulator().setVisible(false);
		};
		return (space.browser().setVisible(v_ = !space.browser().visible()),v_);
	}}
);

Action.register(
	{name: 'toggleBrowserMinification',
	desc: "Toggle Browser",
	scope: ['space'],
	shortcut: 'mod+b',
	enabled: function() { return true; },
	cmd: function(_0) { var v_;
	return (_0.space().browser().setMinimized(v_ = !_0.space().browser().minimized()),v_); }}
);

Action.register(
	{name: 'toggleDebug',
	desc: "Toggle Debug",
	scope: ['space'],
	shortcut: 'ctrl+alt+d',
	enabled: function() { return true; },
	cmd: function(_0) { var v_;
	return (_0.space().api().setDebug(v_ = !_0.space().api().debug()),v_); }}
);


var slidesScope = function(_0) { return _0.space().slides().visible(); };

Action.register(
	{name: 'slidesStepForward',
	desc: "Next step in slideshow",
	scope: 'slides+editing',
	shortcut: 'right',
	cmd: function(_0) { return _0.space().slides().stepForward(); }}
);


Action.register(
	{name: 'startPointerTracker',
	scope: 'editing',
	shortcut: 'alt+shift+p',
	cmd: function(_0) { return _0.space().pointerTracker().start(); }}
);

Action.register(
	{name: 'slidesStepBackward',
	desc: "Previous step in slideshow",
	scope: 'slides+editing',
	shortcut: 'left',
	cmd: function(_0) { return _0.space().slides().stepBackward(); }}
);

Action.register(
	{name: 'slideToStart',
	desc: "Previous slide",
	scope: 'slides+editing',
	shortcut: 'shift+left',
	cmd: function(_0) { return _0.space().slides().stepBackward(true); }}
);

Action.register(
	{name: 'slideToEnd',
	desc: "Next slide",
	scope: 'slides+editing',
	shortcut: 'shift+right',
	cmd: function(_0) { return _0.space().slides().stepForward(true); }}
);

Action.register(
	{name: 'minimizeSlides',
	desc: "Minimize slides",
	scope: 'slides+editing',
	shortcut: 'x',
	cmd: function(_0) { return (_0.space().slides().setVisible(false),false); }}
);

// should only be enabled if
Action.register(
	{name: 'refresh',
	desc: "Reload browser",
	scope: ['space'],
	shortcut: ['mod+r','mod+shift+r'], // maybe not do the shortcut for this
	cooldown: 0,
	enabled: function(_0) { return !(!_0.space().isEditing()); },
	cmd: function(_0) { return _0.space().browser().run(); }}
);


Action.register(
	{name: 'login',
	desc: "Login",
	scope: ['space'],
	enabled: function(_0) { return !_0.branch().api().uid(); },
	cmd: function(_0) { return _0.api().tryLogin(); }}
);

Action.register(
	{name: 'quicksave',
	desc: "Save",
	scope: ['space'],
	shortcut: 'mod+s', // maybe not do the shortcut for this
	cooldown: 1000,
	enabled: function() { return true; },
	cmd: function(_0) {
		var file = _0.space().primaryEditor().file();
		if (file) { return file.quicksave() };
	}}
);

// Deprecate
Action.register(
	{name: 'recstop',
	desc: "Stop Recording",
	scope: 'recording',
	shortcut: 'mod+shift+2',
	cooldown: 0,
	state: function(_0) { return _0.recording().state(); },
	enabled: function(_0) { return _0.recording() && _0.recording().state() == 'recording'; },
	cmd: function(_0) { var recording_;
	return (recording_ = _0.recording()) && recording_.stop  &&  recording_.stop(); }}
);


Action.register(
	{name: 'golive',
	desc: "Stop Recording",
	scope: 'recording',
	shortcut: 'mod+shift+2',
	cooldown: 0,
	state: function(_0) { return _0.recording().state(); },
	enabled: function(_0) { return _0.recording() && _0.recording().state() == 'recording'; },
	cmd: function(_0) { var recording_;
	return (recording_ = _0.recording()) && recording_.stop  &&  recording_.stop(); }}
);

Action.register(
	{name: 'togglePlayback',
	desc: "Play / pause",
	scope: 'watching',
	shortcut: 'space',
	state: function(_0) { return _0.timeline().playState(); }, // this.context.timeline.isPlaying ? 'playing' : 'paused'
	enabled: function(_0) { return !(!_0.branch().hasDuration()); },
	cmd: function(_0) {
		var tl = _0.timeline();
		return tl.isPlaying() ? tl.pause() : tl.play();
	}}
);

Action.register(
	{name: 'play',
	desc: "Play",
	state: function() { return 'paused'; },
	enabled: function(_0) { return !(!_0.branch().hasDuration()) && !_0.branch().timeline().isPlaying(); },
	cmd: function(_0) { return _0.timeline().play(); }}
);


// Playback
Action.register(
	{name: 'skipForward',
	desc: "Go forward 10s",
	scope: 'playback',
	shortcut: 'right',
	cmd: function(_0) { return _0.timeline().skip(10000); }}
);

Action.register(
	{name: 'skipBack',
	desc: "Go back 10s",
	scope: 'playback',
	shortcut: 'left',
	cmd: function(_0) { return _0.timeline().skip(-10000); }}
);

Action.register(
	{name: 'fasterPlayback',
	desc: "Faster playback",
	scope: 'playback',
	shortcut: 'shift+right',
	cmd: function(_0) { var v_;
	return (_0.timeline().setPlaybackRate(v_ = Math.min(_0.timeline().playbackRate() + 0.1,2)),v_); }}
);

Action.register(
	{name: 'slowerPlayback',
	desc: "Slower playback",
	scope: 'playback',
	shortcut: 'shift+left',
	cmd: function(_0) { var v_;
	return (_0.timeline().setPlaybackRate(v_ = Math.max(_0.timeline().playbackRate() - 0.1,0.5)),v_); }}
);


// var tabcmd = do
// 	var nr = this.o('nr')
// 	var file = this.space.files.at(nr)
// 	if file
// 		this.space.agent.setFile(file)
// 
// Action.register
// 	name: 'tab-1', scope: ['space'], shortcut: ['mod+1'], nr: 0, cmd: tabcmd
// 
// Action.register
// 	name: 'tab-2', scope: ['space'], shortcut: ['mod+2'], nr: 1, cmd: tabcmd
// 
// Action.register
// 	name: 'tab-3', scope: ['space'], shortcut: ['mod+3'], nr: 2, cmd: tabcmd
// 
// Action.register
// 	name: 'tab-4', scope: ['space'], shortcut: ['mod+4'], nr: 3, cmd: tabcmd
// 
// Action.register
// 	name: 'tab-5', scope: ['space'], shortcut: ['mod+5'], nr: 4, cmd: tabcmd


Action.register(
	{name: 'fontSizeInc',
	scope: ['space'],
	shortcut: ['shift+alt+l'],
	cmd: function(_0) { var api_, v_;
	return ((api_ = _0.api()).setFontSize(v_ = api_.fontSize() + 1),v_); }}
);

Action.register(
	{name: 'fontSizeDecr',
	scope: ['space'],
	shortcut: ['shift+alt+k'],
	cmd: function(_0) { var api_, v_;
	return ((api_ = _0.api()).setFontSize(v_ = api_.fontSize() - 1),v_); }}
);

Action.register(
	{name: 'toggleWhitespace',
	scope: ['space'],
	shortcut: ['shift+alt+i'],
	cmd: function(_0) {
		// console.log 'toggle whitespace',$1
		var v_;
		return (_0.primaryEditor().setRenderWhitespace(v_ = !_0.primaryEditor().renderWhitespace()),v_);
		// $1.layout.renderWhitespace = !$1.layout.renderWhitespace
	}}
);
