var self = {}, Imba = require('imba');
var msgpack = require('msgpack-lite');

var TYPES = exports.TYPES = {
	// General navigation
	ENTER: 0,
	LEAVE: 1,
	VISIBILITY: 2,
	
	// Space-specific. Only actions that are not tracked in the stream
	PLAYSTATE: 10,
	BRANCH: 11,
	SELECTION: 12,
	COPY: 13,
	CREATE_BRANCH: 14
};

var TYPE_NAME = exports.TYPE_NAME = {};
TYPE_NAME[TYPES.ENTER] = 'enter';
TYPE_NAME[TYPES.LEAVE] = 'leave';
TYPE_NAME[TYPES.VISIBILITY] = 'visibility';
TYPE_NAME[TYPES.PLAYSTATE] = 'playstate';
TYPE_NAME[TYPES.BRANCH] = 'branch';
TYPE_NAME[TYPES.SELECTION] = 'selection';
TYPE_NAME[TYPES.COPY] = 'copy';

exports.encode = self.encode = function (type,params){
	if(params === undefined) params = [];
	var result = [Date.now(),type].concat(params);
	return msgpack.encode(result);
};


function Event(packet){
	this._packet = packet;
};

Event.prototype.timestamp = function (){
	return this._packet[0];
};

Event.prototype.code = function (){
	return this._packet[1];
};

Event.prototype.params = function (){
	return this._packet.slice(2);
};

Event.prototype.date = function (){
	return this._date || (this._date = new Date(this.timestamp()));
};

Event.prototype.name = function (){
	return TYPE_NAME[this.code()];
};

var handlers = {};
Event.handles = function (code){
	handlers[code] = this;
	return this;
};

Event.decode = function (packet){
	var cls = handlers[packet[1]] || Event;
	return new cls(packet);
};

function PlayState(){ return Event.apply(this,arguments) };

Imba.subclass(PlayState,Event);
PlayState.handles(TYPES.PLAYSTATE);

PlayState.prototype.playState = function (){
	return this.params()[0];
};

PlayState.prototype.timeOffset = function (){
	return this.params()[1];
};

PlayState.prototype.playRate = function (){
	return this.params()[2];
};

function Visibility(){ return Event.apply(this,arguments) };

Imba.subclass(Visibility,Event);
Visibility.handles(TYPES.VISIBILITY);

Visibility.prototype.isVisible = function (){
	return this.params()[0];
};

function Decoder(data){
	this._data = new Uint8Array(data);
	this._decoder = new (msgpack.Decoder)();
	this._decoder.write(this._data);
};

exports.Decoder = Decoder; // export class 
Decoder.prototype.fetch = function (){
	if (this._decoder.offset < this._data.byteLength) {
		var data = this._decoder.fetch();
		return this.decode(data);
	};
};

Decoder.prototype.decode = function (packet){
	return Event.decode(packet);
};

Decoder.prototype.fetchAll = function (){
	var event;
	var result = [];
	while (event = this.fetch()){
		result.push(event);
	};
	return result;
};

