function len$(a){
	return a && (a.len instanceof Function ? a.len() : a.length) || 0;
};
function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _3 = Imba.createTagList, _2 = Imba.createTagMap, _4 = Imba.createTagLoopResult, _1 = Imba.createElement;
/*

Everything that is logged while running examples will be tracked and recorded
as SIMULATOR.CONSOLE events which includes a compact representation of the
actual arguments to be logged, and Scrimba-specific information about which
location the log-event originated from.

[LOG,LOGLEVEL,[ARGUMENTS],[FILEID,LOGNR?]]

*/


var PaneWidget$ = require('./PaneWidget'), PaneWidget = PaneWidget$.PaneWidget, PaneView = PaneWidget$.PaneView;

var protocol$ = require('../protocol'), CONSOLE = protocol$.CONSOLE, SIMULATOR = protocol$.SIMULATOR, POINTER = protocol$.POINTER, ACTION = protocol$.ACTION;
var Widget = require('./widget').Widget;
var List = require('../util/List').List;

var util = require('../util/index');

var depth = 0;
var count = 0;
var Shim = {};

if (Imba.Events) { Imba.Events.register(['mouseover','mouseout']) };

Shim.Instance = function Instance(typ){
	this._type = typ;
	this;
};
Shim.Instance.prototype.type = function(v){ return this._type; }
Shim.Instance.prototype.setType = function(v){ this._type = v; return this; };



Shim.Func = function Func(typ){
	this._type = typ;
	this;
};
Shim.Func.prototype.type = function(v){ return this._type; }
Shim.Func.prototype.setType = function(v){ this._type = v; return this; };



Shim.Error = function Error(data){
	this._data = data;
	this.message = data.message;
	this;
};


var SPACE_CONTEXT = null;
var RUNNER_CONTEXT = (typeof window != 'undefined') && window;

// should not be used anymore?
var JSONFormatter = function(k,v) {
	var T = CONSOLE.TYPES;
	
	if (v == null) {
		return [T.MARKER,T.NULL];
	} else if (v == undefined) {
		return [T.MARKER,T.UNDEFINED];
	} else if (v && v._dom) {
		v = v._dom;
	};
	
	if (v && v.nodeType && v.nodeName) {
		var doc = v.ownerDocument;
		var path;
		// console.log 'FORMAT HTML ELEMENT',v,path
		return [T.MARKER,T.ELEMENT,((typeof path=='number'||path instanceof Number)) ? path : ((v.outerHTML))];
	} else if (typeof v == 'function') {
		
		var str = String(v).match(/function ([^\)]+\))/);
		return [T.MARKER,T.FUNCTION,str ? str[1] : ''];
	} else if (typeof v == 'object') {
		
		if (v.type == 'error') {
			if (v.shim) { return v };
			v.shim = 1;
			return [T.MARKER,T.ERROR,v];
		};
		
		var ctr = v.constructor;
		var cname = ctr.name;
		
		if (cname == 'Array') {
			return v;
		} else if (cname == 'Error') {
			return v;
		} else if (ctr == RUNNER_CONTEXT.Object) {
			// really?
			return v;
		} else {
			return [T.MARKER,T.INSTANCE,cname];
		};
	} else {
		return v;
	};
};


var JSONReviver = function(k,v) {
	var T = CONSOLE.TYPES;
	
	if ((v instanceof Array) && v[0] == T.MARKER) {
		switch (v[1]) {
			case T.NULL: {
				return null;
				break;
			}
			case T.UNDEFINED: {
				return undefined;
				break;
			}
			case T.ELEMENT: {
				if (v[2] instanceof Array) {
					return null;
				} else {
					// FIXME does not work for tables?
					var fragment = document.createElement('div');
					fragment.innerHTML = v[2];
				};
				return fragment.firstElementChild;
				break;
			}
			case T.INSTANCE: {
				// console.log 'Create ObjectShim!!',v
				return new Shim.Instance(v[2]);
				break;
			}
			case T.FUNCTION: {
				return new Shim.Func(v[2]);
				break;
			}
			case T.ERROR: {
				return new Shim.Error(v[2]);
				break;
			}
		};
	};
	
	return v;
};


var ValPart = Imba.defineTag('ValPart', function(tag){
	
	tag.prototype.entry = function (){
		return this._entry || (this._entry = this.up('.ConsoleEntry'));
	};
	
	tag.prototype.offsetTopFromConsole = function (){
		var top = 0;
		var el = this.dom();
		var tops = [];
		var entry = this.entry();
		
		while (el){
			top += el.offsetTop;
			tops.push(top);
			
			if (el.contains(entry.dom())) {
				break;
			};
			
			el = el.offsetParent;
		};
		
		// console.log tops,top
		
		return top;
	};
});

// basic view
var Val = Imba.defineTag('Val', ValPart, function(tag){
	tag.prototype.ref = function(v){ return this.getAttribute('ref'); }
	tag.prototype.setRef = function(v){ this.setAttribute('ref',v); return this; };
	
	tag.prototype.__expanded = {watch: 'expandedDidSet',name: 'expanded'};
	tag.prototype.expanded = function(v){ return this._expanded; }
	tag.prototype.setExpanded = function(v){
		var a = this.expanded();
		if(v != a) { this._expanded = v; }
		if(v != a) { this.expandedDidSet && this.expandedDidSet(v,a,this.__expanded) }
		return this;
	};
	
	tag.prototype.render = function (){
		var $ = this.$, data_, $1;
		depth++;
		count++;
		this.$open(0).setChildren(
			((typeof (data_ = this.data())=='string'||data_ instanceof String)) ? (
				($[0] || _1(Str,$,0,this)).bindData(this,'data',[]).end()
			) : (((typeof ($1 = this.data())=='number'||$1 instanceof Number)) ? (
				($[1] || _1(Num,$,1,this)).bindData(this,'data',[]).end()
			) : ((this.data() instanceof Shim.Instance) ? (
				($[2] || _1(Instance,$,2,this)).bindData(this,'data',[]).end()
			) : ((this.data() instanceof Shim.Func) ? (
				($[3] || _1(Func,$,3,this)).bindData(this,'data',[]).end()
			) : ((this.data() instanceof Shim.Error) ? (
				($[4] || _1(Err,$,4,this)).bindData(this,'data',[]).end()
			) : ((this.data() == null) ? (
				($[5] || _1('div',$,5,this).flag('null').setText('null'))
			) : ((this.data() == undefined) ? (
				($[6] || _1('div',$,6,this).flag('cundefined').setText('undefined'))
			) : ((this.data() == true) ? (
				($[7] || _1('div',$,7,this).flag('cbool').flag('true').setText('true'))
			) : ((this.data() == false) ? (
				($[8] || _1('div',$,8,this).flag('cbool').flag('false').setText('false'))
			) : ((this.data() && this.data()._dom) ? (
				($[9] || _1(El,$,9,this)).bindData(this.data(),'_dom').end()
			) : ((this.data() instanceof Element) ? (
				($[10] || _1(El,$,10,this)).bindData(this,'data',[]).end()
			) : ((typeof this.data() == 'function') ? (
				($[11] || _1(Func,$,11,this)).bindData(this,'data',[]).end()
			) : ((depth > 3) ? (
				($[12] || _1('div',$,12,this).flag('more').setText("..."))
			) : (Array.isArray(this.data()) ? (
				($[13] || _1(Arr,$,13,this)).bindData(this,'data',[]).end()
			) : (((this.data() instanceof Object) || typeof (this.data()) == 'object') ? (
				($[14] || _1(Obj,$,14,this)).bindData(this,'data',[]).end()
			) : (
				($[15] || _1('span',$,15,this).flag('blank').setText(""))
			)))))))))))))))
		,3).synced();
		depth--;
		return this;
	};
	
	tag.prototype.__uid = function (){
		return this._uid || (this._uid = this.entry().refForElement(this.dom()));
	};
	
	tag.prototype.ontap = function (e){
		var id;
		e.halt();
		return id = this.__uid();
	};
	
	tag.prototype.getChildByRef = function (id){
		var node = this._dom.firstElementChild._tag;
		
		if (node && node.getChildByRef) {
			return node.getChildByRef(id);
		};
		
		return this;
	};
	
	tag.prototype.space = function (){
		return this.entry().space();
	};
	
	tag.prototype.entry = function (){
		return this.up('.ConsoleEntry');
	};
	
	tag.prototype.expandedDidSet = function (bool){
		return this.first().flag('expanded',!!bool);
	};
	
	tag.prototype.first = function (){
		return Imba.getTagForDom(this.dom().firstElementChild);
	};
	
	tag.prototype.up = function (sel){
		if (!sel) { return this.parent() };
		return this.parent() && this.parent().closest(sel);
	};
	
	tag.prototype.ontap = function (e){
		e.halt();
		// FIXME find the real space instead
		if (e.event().target == this.dom() || e.event().target == this.first().dom()) {
			// should utilize ctx instead
			return this.space().console().push_(ACTION.CONSOLE_VAL_EXPAND,[this.space().console().id(),this.__uid(),!(!!this._expanded)]);
		};
	};
})
exports.Val = Val;

Val.DEPTH = 0;

var Rich = Imba.defineTag('Rich', ValPart, function(tag){
	tag.prototype.ref = function(v){ return this.getAttribute('ref'); }
	tag.prototype.setRef = function(v){ this.setAttribute('ref',v); return this; };
	
	tag.prototype.body = function (){
		return this;
	};
	
	tag.prototype.entry = function (){
		return this.parent().entry();
	};
	
	tag.prototype.getChildByRef = function (ref){
		var entry = this.body().dom().children[ref];
		return entry ? entry._tag : null;
	};
});

var Arr = Imba.defineTag('Arr', Rich, function(tag){
	tag.prototype.render = function (){
		var self = this, $ = this.$;
		return self.$open(0).setChildren([
			(function tagLoop($0) {
				var $$ = $0.$iter();
				for (let i = 0, items = iter$(self.data()), len = items.length; i < len; i++) {
					if (i >= 10) { continue; };
					$$.push(($0[i] || _1(Val,$0,i)).setData(items[i]).dataset('ref',i).end());
				};return $$;
			})($[0] || _2($,0)),
			(self.data().length > 10) ? (
				($[1] || _1('div',$,1,self).flag('more').setText("..."))
			) : void(0)
		],1).synced();
	};
});

var Str = Imba.defineTag('Str', ValPart, function(tag){
	tag.prototype.render = function (){
		return this.$open(0).setChildren(this.data(),3).synced();
	};
});

var Num = Imba.defineTag('Num', ValPart, function(tag){
	tag.prototype.render = function (){
		return this.$open(0).setChildren(this.data(),3).synced();
	};
});

var KeyValPair = Imba.defineTag('KeyValPair', ValPart, function(tag){
	
	tag.prototype.ref = function(v){ return this.getAttribute('ref'); }
	tag.prototype.setRef = function(v){ this.setAttribute('ref',v); return this; };
	
	tag.prototype.entry = function (){
		return this._entry || (this._entry = this.up('.ConsoleEntry'));
	};
	
	tag.prototype.ontap = function (e){
		var id = this.__uid();
		return this;
	};
	
	tag.prototype.__uid = function (){
		return this._uid || (this._uid = this.entry().refForElement(this.dom()));
	};
	
	tag.prototype.getChildByRef = function (ref){
		return this.dom().children[ref]._tag;
	};
	
	tag.prototype.scrollIntoView = function (){
		// console.log "KeyValPair.scrollIntoView"
		if (this.entry().data().isEnabled()) {
			var top = this.offsetTopFromConsole();
			return this.entry().parent().dom().scrollTop = Math.max(top - 40,0);
		};
	};
});

var Obj = Imba.defineTag('Obj', Rich, function(tag){
	
	tag.prototype.body = function (){
		return this._body;
	};
	
	tag.prototype.name = function (){
		return this._name || (this._name = this.data().constructor.name);
	};
	
	tag.prototype.keys = function (){
		return Object.keys(this.data());
	};
	
	tag.prototype.render = function (){
		var $ = this.$, self = this;
		return self.$open(0).flag('inline').setChildren(
			(self.name() == 'Object') ? (
				(self._body = self._body||_1('div',self).flag('body')).setContent(
					(function tagLoop($0) {
						var t0;
						for (let i = 0, items = iter$(self.keys()), len = $0.taglen = items.length, key; i < len; i++) {
							key = items[i];
							(t0 = $0[i] || (t0=_1(KeyValPair,$0,i)).flag('pair').setContent([
								_1('div',t0.$,'A',t0).flag('key'),
								_1(Val,t0.$,'B',t0).dataset('ref','1')
							],2)).dataset('ref',i).setFlag(0,("k" + i)).end((
								t0.$.A.setContent(key,3),
								t0.$.B.bindData(self.data(),key).end()
							,true));
						};return $0;
					})($[0] || _3($,0,self._body))
				,4)
			) : (
				($[1] || _1('div',$,1,self).flag('type')).setContent(self.name(),3)
			)
		,3).synced();
	};
});

var Func = Imba.defineTag('Func', ValPart, function(tag){
	tag.prototype.render = function (){
		return this.$open(0).setText("Function").synced();
	};
});

var Err = Imba.defineTag('Err', ValPart, function(tag){
	tag.prototype.render = function (){
		return this.$open(0).setChildren(this.data().message,3).synced();
	};
});

var Instance = Imba.defineTag('Instance', ValPart, function(tag){
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).setChildren(
			$[0] || _1('div',$,0,this).flag('type')
		,2).synced((
			$[0].setContent(
				this.data().type()
			,3)
		,true));
	};
});


var El = Imba.defineTag('El', function(tag){
	
	var voidElements = {
		area: true,
		base: true,
		br: true,
		col: true,
		embed: true,
		hr: true,
		img: true,
		input: true,
		keygen: true,
		link: true,
		meta: true,
		param: true,
		source: true,
		track: true,
		wbr: true,
		circle: true,
		line: true
	};
	
	tag.prototype.el = function (){
		return this.data();
	};
	
	tag.prototype.name = function (){
		return (this.type() == 8) ? 'comment' : this.el().tagName.toLowerCase();
	};
	
	tag.prototype.type = function (){
		return this.el().nodeType;
	};
	
	tag.prototype.classNames = function (){
		var cls = (this.el().className || '');
		if (cls.baseVal != undefined) {
			cls = cls.baseVal;
		};
		
		return cls.replace(/\b(rnd(\d+)|__hover|__focus|__active)(\s+|$)/g,'').trim();
	};
	
	tag.prototype.render = function (){
		var $ = this.$, self = this;
		return self.$open(0).flag('el').setFlag(-1,("type" + self.type())).flagIf('selfclosing',(voidElements[self.name()])).setChildren(
			(self.type() == 8) ? (
				($[0] || _1('span',$,0,self)).setContent(self.el().textContent,3)
			) : Imba.static([
				($[1] || _1('div',$,1,self).flag('open')).setContent([
					($[2] || _1('div',$,2,1).flag('name')).setText("<" + self.name()),
					(function tagLoop($0) {
						var t0, $$ = $0.$iter();
						for (let i = 0, items = iter$(self.el().attributes), len = items.length, attr; i < len; i++) {
							attr = items[i];
							var v = (attr.name == 'class') ? self.classNames() : attr.value;
							$$.push((t0 = $0[i] || (t0=_1('div',$0,i)).flag('attr').setContent([
								_1('div',t0.$,'A',t0).flag('name'),
								_1('div',t0.$,'B',t0).flag('value')
							],2)).flagIf('hide',(attr.name == 'class' && !v)).end((
								t0.$.A.setContent(attr.name,3),
								t0.$.B.setContent(v,3)
							,true)));
						};return $$;
					})($[3] || _2($,3,$[1])),
					($[4] || _1('div',$,4,1).flag('rb').setText(">"))
				],1),
				
				($[5] || _1('div',$,5,self).flag('children')).flagIf('multi',(self.el().children.length > 0)).setContent(
					(function tagLoop($0,$1,$$) {
						for (let i = 0, items = iter$(self.el().childNodes), len = items.length, child; i < len; i++) {
							child = items[i];
							if (child.nodeType == 3) {
								$$.push(($0[i] || _1('div',$0,i).flag('text')).setContent(child.textContent,3));
							} else {
								$$.push(($1[i] || _1(El,$1,i)).setData(child).end());
							};
						};return $$;
					})($[6] || _2($,6,$[5]),$[7] || _2($,7,$[5]),_4())
				,5),
				($[8] || _1('div',$,8,self).flag('close')).setText("</" + self.name() + ">")
			],2,1)
		,3).synced();
	};
	
	tag.prototype.ontap = function (e){
		var $1;
		console.log('tapped element!');
		if (this.type() != 8) {
			var node = Imba.getTagForDom(this.data());
			return ($1 = node) && $1.ontap  &&  $1.ontap(e);
		};
	};
})
exports.El = El;

var CommentEl = Imba.defineTag('CommentEl', El, function(tag){
	
	tag.prototype.render = function (){
		return this.$open(0).flag('el').setChildren(this.el().textContent,3).synced();
	};
	
	tag.prototype.ontap = function (){
		return this;
	};
})
exports.CommentEl = CommentEl;

var ConsoleEntry = Imba.defineTag('ConsoleEntry', function(tag){
	tag.prototype.type = function(v){ return this._type; }
	tag.prototype.setType = function(v){ this._type = v; return this; };
	tag.prototype.options = function(v){ return this._options; }
	tag.prototype.setOptions = function(v){ this._options = v; return this; };
	tag.prototype.offset = function(v){ return this._offset; }
	tag.prototype.setOffset = function(v){ this._offset = v; return this; };
	tag.prototype.entry = function(v){ return this._entry; }
	tag.prototype.setEntry = function(v){ this._entry = v; return this; };
	
	tag.prototype.__hover = {watch: 'hoverDidSet',name: 'hover'};
	tag.prototype.hover = function(v){ return this._hover; }
	tag.prototype.setHover = function(v){
		var a = this.hover();
		if(v != a) { this._hover = v; }
		if(v != a) { this.hoverDidSet && this.hoverDidSet(v,a,this.__hover) }
		return this;
	};
	tag.prototype.__selected = {watch: 'selectedDidSet',name: 'selected'};
	tag.prototype.selected = function(v){ return this._selected; }
	tag.prototype.setSelected = function(v){
		var a = this.selected();
		if(v != a) { this._selected = v; }
		if(v != a) { this.selectedDidSet && this.selectedDidSet(v,a,this.__selected) }
		return this;
	};
	
	tag.prototype.hoverDidSet = function (bool){
		return this.flag('__hover',!!bool);
	};
	tag.prototype.selectedDidSet = function (bool){
		return this.flag('__selected',!!bool);
	};
	
	tag.prototype.isError = function (){
		return this.type() == CONSOLE.LOG_TYPES.ERROR;
	};
	
	tag.prototype.icon = function (){
		switch (this.type()) {
			case CONSOLE.LOG_TYPES.INFO: {
				return 'directions';
				break;
			}
			case CONSOLE.LOG_TYPES.WARN: {
				return 'warning';
				break;
			}
			case CONSOLE.LOG_TYPES.ERROR: {
				return 'error';
				break;
			}
			case CONSOLE.LOG_TYPES.META: {
				return 'report';
				break;
			}
			case CONSOLE.LOG_TYPES.RESULT: {
				return 'keyboard_arrow_left';
				break;
			}
			default:
			
				return 'info';
		
		};
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		depth = 0;
		count = 0;
		
		this.$open(0).flag('scon').setFlag(-1,("t" + this.type())).setChildren([
			($[0] || _1('span',$,0,this).flag('gutter').flag('icon')),
			(this.counter() > 1) ? (
				($[1] || _1('div',$,1,this).flag('badge').flag('repeats')).setContent(this.counter(),3)
			) : void(0),
			this.body()
		],1).synced();
		
		return this;
	};
	
	tag.prototype.type = function (){
		return this.entry()[1];
	};
	
	tag.prototype.items = function (){
		var entry_;
		return (entry_ = this.entry()).ITEMS || (entry_.ITEMS = this.data().deserializeParams(this.entry()[0]));
	};
	
	tag.prototype.ref = function (){
		return this.entry()[2];
	};
	
	tag.prototype.counter = function (){
		return this.entry()[3] || 1;
	};
	
	tag.prototype.space = function (){
		return this.data().space();
	};
	
	tag.prototype.body = function (){
		var $ = this.$$ || (this.$$ = {}), t0, self = this;
		return (t0 = self._body = self._body||(t0=_1('div',self)).flag('body').flag('items')).flagIf('firstIsString',(self.items() && (typeof self.items()[0]=='string'||self.items()[0] instanceof String))).setContent([
			t0.$.A || _1('div',t0.$,'A',t0).flag('offset'),
			(function tagLoop($0) {
				for (let i = 0, items = iter$(self.items()), len = $0.taglen = items.length; i < len; i++) {
					($0[i] || _1(Val,$0,i)).setData(items[i]).dataset('ref',i).end();
				};return $0;
			})(t0.$['B'] || _3(t0.$,'B',self._body))
		],1).end((
			t0.$.A.setContent(self.offset() ? util.msToStr(self.offset()) : '',3)
		,true));
	};
	
	tag.prototype.onmouseover = function (e){
		var rel = e.event().relatedTarget;
		return;
		
		if (!this.dom().contains(e.event().relatedTarget)) {
			if (this.data().space().recording()) {
				return this.data().options().set('hoverEntry',this.ref());
			};
		};
	};
	
	
	tag.prototype.onmouseout = function (e){
		var rel = e.event().relatedTarget;
		return;
		
		if (!this.dom().contains(rel)) {
			if (this.data().space().recording() && (!rel || !rel.closest('.ConsoleEntry'))) {
				return this.data().options().set('hoverEntry',null);
			};
		};
	};
	
	tag.prototype.ontap = function (e){
		return;
	};
	
	tag.prototype.scrollIntoView = function (){
		// console.log "scrollIntoView"
		
		var par;
		if (par = this.dom().parentNode) {
			var scrollTop = par.scrollTop;
			var offsetHeight = par.offsetHeight;
			var scrollBottom = scrollTop + offsetHeight;
			var top = this.dom().offsetTop;
			
			if (top < scrollTop) {
				return par.scrollTop = top;
			} else if (top > scrollBottom) {
				return par.scrollTop = top + 20;
			};
			
			// dom?.scrollIntoViewIfNeeded
		};
	};
	
	tag.prototype.__uid = function (){
		return this._uid || (this._uid = [this.data().id(),this.ref()]);
	};
	
	tag.prototype.__lookup = function (path,idx){
		// console.log "ConsoleWidget lookup!",path,idx
		if(idx === undefined) idx = 0;
		var item = this;
		
		if (path instanceof Array) {
			while (idx < len$(path)){
				var ref = path[idx++];
				item = item.getChildByRef(ref);
			};
		} else {
			item = this.getChildByRef(path);
		};
		
		return item;
	};
	
	tag.prototype.getChildByRef = function (id){
		return this._body.dom().children[id + 1]._tag;
	};
	
	tag.prototype.refForElement = function (el){
		var el = el._dom || el;
		var path = [];
		var ref;
		
		while (el && this.dom().contains(el)){
			if (ref = el.dataset.ref) {
				if (ref.match(/^\d+$/)) {
					ref = parseInt(ref);
				};
				path.unshift(ref);
			};
			el = el.parentNode;
		};
		
		path.unshift(this.ref());
		path.unshift(this.data().id());
		
		return path;
	};
})
exports.ConsoleEntry = ConsoleEntry;


var ConsolePane = Imba.defineTag('ConsolePane', PaneView, function(tag){
	
	tag.prototype.__hoverEntry = {watch: 'hoverEntryDidSet',name: 'hoverEntry'};
	tag.prototype.hoverEntry = function(v){ return this._hoverEntry; }
	tag.prototype.setHoverEntry = function(v){
		var a = this.hoverEntry();
		if(v != a) { this._hoverEntry = v; }
		if(v != a) { this.hoverEntryDidSet && this.hoverEntryDidSet(v,a,this.__hoverEntry) }
		return this;
	};
	
	tag.prototype.space = function (){
		return this.data().space();
	};
	
	tag.prototype.body = function (){
		let $ = this.$$ || (this.$$ = {});
		return this._body || (this._body = this._body||_1('div',this).flag('body'));
	};
	
	tag.prototype.header = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		return (t0 = this._header = this._header||(t0=_1('div',this)).flag('header').on$(0,['tap','toggleEnabled'],this).setContent([
			_1('div',t0.$,'A',t0).flag('title').setText("Console"),
			_1('div',t0.$,'B',t0).flag('tools').setContent(
				t0.$.C || _1('div',t0.$,'C','B').flag('tool').flag('toggler').dataset('icon','mup')
			,2)
		// <btn.icon-btn.refresher icon='not_interested' label='Clear console' cmd='tryclear'>
		],2)).end((
			t0.$.C.end()
		,true));
	};
	
	tag.prototype.toggleEnabled = function (){
		var v_;
		return (this.data().setEnabled(v_ = !this.data().enabled()),v_);
	};
	
	tag.prototype.ontryclear = function (){
		return this.data().clear();
	};
	
	tag.prototype.onwheel = function (e){
		return e.halt();
	};
	
	tag.prototype.add = function (node){
		if (this._group) {
			this._group.add(node);
		} else {
			this.body().dom().appendChild(node.dom());
		};
		return this;
	};
	
	tag.prototype.rem = function (node){
		var par = node.parent();
		node.orphanize();
		
		if (node == this._group) {
			this._group = node.PREV_GROUP;
		};
		
		return this;
	};
	
	tag.prototype.group = function (node){
		node.PREV_GROUP = this._group;
		this._group = node;
		this.body().dom().appendChild(this._group.dom());
		return this;
	};
	
	tag.prototype.refresh = function (){
		var last = this.body().dom().lastElementChild;
		
		if (last && last.offsetParent) {
			this.body().dom().scrollTop = last.offsetTop + last.offsetHeight;
		};
		
		return this;
	};
	
	tag.prototype.hoverEntryDidSet = function (new$,old){
		return this;
	};
	
	tag.prototype.relayout = function (){
		return this;
	};
	
	tag.prototype.clear = function (){
		let res = [];
		for (let i = 0, ary = iter$(this.body().dom().children), len = ary.length; i < len; i++) {
			res.push(ary[i]._tag);
		};
		var items = res;
		
		this.body().dom().innerHTML = '';
		return items;
	};
	
	tag.prototype.set = function (items){
		this.body().dom().innerHTML = '';
		for (let i = 0, ary = iter$(items), len = ary.length; i < len; i++) {
			this._body.dom().appendChild(ary[i].dom());
		};
		return this;
	};
	
	tag.prototype.revealEntriesInline = function (){
		// if the last entry is more than 5 seconds ago we should hide
		// if it is less than that -- try to make sure the log item
		return this;
	};
	
	tag.prototype.render = function (){
		if (true) { return this };
		
		return this.$open(0).setHoverEntry(this.data().getEntryForId(this.data().hoverEntry())).setChildren([
			this.header(),
			this.space().browser().page() ? (
				this.space().browser().page().logs().end()
			) : (
				this.body()
			),
			this.footer()
		],1).synced();
	};
})
exports.ConsolePane = ConsolePane;

function Console(){ return PaneWidget.apply(this,arguments) };

Imba.subclass(Console,PaneWidget);
exports.Console = Console; // export class 
Console.register('console',CONSOLE);

Console.option('hoverEntry');
Console.option('selectedEntry');
Console.option('enabled',{'default': false,overridable: true});

Console.prototype.native = function (){
	return console;
};

Console.prototype.setup = function (){
	this._entryMap = {};
	this._activeEntries = [];
	return this;
};

Console.prototype.nextEntryId = function (){
	return this.space().generateRandomId();
};

Console.prototype.addEntry = function (type,params){
	var pars = this.serializeParams(params);
	
	if (this._queue) {
		var prev = this._queue[len$(this._queue) - 1];
		// see if it is the same type of entry
		if (prev && JSON.stringify(prev[1][0]) == JSON.stringify(pars)) {
			console.log('second entry is the same!');
			prev[1][3]++;
		} else {
			this._queue.push([CONSOLE.LOG,[pars,type,this.nextEntryId(),1]]);
		};
	} else {
		this.push_(CONSOLE.LOG,[pars,type,this.nextEntryId(),1]);
	};
	
	return undefined;
};

Console.prototype.createEntry = function (type,params,badge){
	if(badge === undefined) badge = 1;
	var pars = this.serializeParams(params);
	return [CONSOLE.LOG,[pars,type,this.nextEntryId(),badge]];
};

Console.prototype.getEntryForId = function (id){
	return id && this._entryMap[id];
};

Console.prototype.getChildById = function (id){
	return id && this._entryMap[id];
};

// basic system for batching logs during run now
// should rather hook into push_
Console.prototype.startQueue = function (){
	this._queue = [];
	return this;
};

Console.prototype.flushQueue = function (){
	if (this._queue && len$(this._queue)) {
		var count = len$(this._queue);
		var items = this._queue;
		//  console.log('flushingQueue',count)
		if (count > 30) {
			var first = this._queue.slice(0,10);
			var last = this._queue.slice(-10);
			var trunc = this.createEntry(CONSOLE.LOG_TYPES.META,[("truncated " + (count - 20) + " log entries")],count - 20);
			first.push(trunc);
			items = first.concat(last);
		};
		this.batch_(items);
		this;
	};
	
	this._queue = null;
	return this;
};


Console.prototype.log = function (){
	var native_;
	var $0 = arguments, i = $0.length;
	var params = new Array(i>0 ? i : 0);
	while(i>0) params[i-1] = $0[--i];
	this.addEntry(CONSOLE.LOG_TYPES.LOG,params);
	return (native_ = this.native()).log.apply(native_,params);
};

Console.prototype.info = function (){
	var $0 = arguments, i = $0.length;
	var params = new Array(i>0 ? i : 0);
	while(i>0) params[i-1] = $0[--i];
	return this.addEntry(CONSOLE.LOG_TYPES.INFO,params);
};

Console.prototype.error = function (){
	// console.log 'Console.error',params and params[0]
	var $0 = arguments, i = $0.length;
	var params = new Array(i>0 ? i : 0);
	while(i>0) params[i-1] = $0[--i];
	return this.addEntry(CONSOLE.LOG_TYPES.ERROR,params);
};

Console.prototype.warn = function (){
	var $0 = arguments, i = $0.length;
	var params = new Array(i>0 ? i : 0);
	while(i>0) params[i-1] = $0[--i];
	return this.addEntry(CONSOLE.LOG_TYPES.WARN,params);
};

Console.prototype.result = function (){
	var $0 = arguments, i = $0.length;
	var params = new Array(i>0 ? i : 0);
	while(i>0) params[i-1] = $0[--i];
	return this.addEntry(CONSOLE.LOG_TYPES.RESULT,params);
};

Console.prototype.clear = function (){
	return this.push_(ACTION.CONSOLE_CLEAR,[]);
};

Console.prototype.serializeParams = function (obj){
	return JSON.parse(JSON.stringify(obj,JSONFormatter));
};

Console.prototype.deserializeParams = function (obj){
	if (obj) {
		obj = JSON.stringify(obj);
	};
	
	if (typeof obj == 'string') {
		var val = JSON.parse(obj,JSONReviver);
		return val;
	} else {
		return obj;
	};
	
	// return typeof obj == 'string' ? JSON.parse(obj,JSONReviver) : obj
};

Console.prototype.isEnabled = function (){
	return this.enabled();
};

Console.prototype.clearEntryCollections = function (){
	this._errors = null;
	return this._warnings = null;
};

Console.prototype.errors = function (){
	return this._errors || (this._errors = this._activeEntries.filter(function(item) { return item[1] == CONSOLE.LOG_TYPES.ERROR; }));
};

Console.prototype.apply = function (action){
	var $1;
	var op = action._params;
	
	switch (action._type) {
		case ACTION.CONSOLE_CLEAR: {
			// console.log "CLEAR!"
			if (false) {};
			
			op.REVACTIVE = this._activeEntries || [];
			this._activeEntries = [];
			this.tab().setWarnings(0);
			this.tab().setErrors(0);
			break;
		}
		case ACTION.CONSOLE_LOG: {
			this.clearEntryCollections();
			var id = op[2];
			var typ = op[1];
			var new$ = !op.ENTRY;
			
			if (false) {};
			
			this._activeEntries.push(op);
			this.async('refresh');
			break;
		}
		case CONSOLE.VAL_EXPAND: {
			var item = this.space().__lookup(op[0]);
			($1 = item) && $1.setExpanded  &&  $1.setExpanded(op[1]);
			break;
		}
	};
	
	// async(:refresh)
	this.clearEntryCollections();
	return this;
};

Console.prototype.revert = function (action){
	var $1;
	this.clearEntryCollections();
	var op = action._params;
	
	if (op.ENTRY) {
		if (false) {};
		
		let item = this._activeEntries.pop();
		if (op != item) {
			console.warn("tried op.ENTRY opp");
		};
	};
	
	switch (action._type) {
		case ACTION.CONSOLE_CLEAR: {
			if (false) {};
			
			// where do the next activeEntries go?
			this._activeEntries = op.REVACTIVE || [];
			break;
		}
		case ACTION.CONSOLE_VAL_EXPAND: {
			var item = this.space().__lookup(op[0]);
			($1 = item) && $1.setExpanded  &&  $1.setExpanded(!(!(!op[1])));
			break;
		}
	};
	
	if (op.REVTAB) {
		this.tab().setWarnings(op.REVTAB[0]);
		this.tab().setErrors(op.REVTAB[1]);
	};
	
	return this;
};

Console.prototype.refresh = function (){
	return this.node().refresh();
};

Console.prototype.title = function (){
	return 'Console';
};

Console.prototype.valForOp = function (op){
	return op.VAL || (op.VAL = (_1(Val)).setData(this.deserializeParams(op[0])).end());
};

Console.prototype.dispose = function (){
	this._entryMap = null;
	return this;
};

Console.prototype.persist_ = function (){
	var v_;
	var ae = this._activeEntries;
	if (ae.length) {
		this._data.activeEntries = ae;
	} else {
		(((v_ = this._data.activeEntries),delete this._data.activeEntries, v_));
	};
	return this;
};

Console.prototype.deserialized = function (){
	Console.prototype.__super__.deserialized.apply(this,arguments);
	// the logged items will have no offset
	// var e = {OFFSET: 0}
	var ops = this._data.activeEntries;
	
	// run through the serialized log elements and push
	// them as if they were regular events
	// FIXME - will not work with new concepts.
	if (ops) {
		for (let i = 0, items = iter$(ops), len = items.length; i < len; i++) {
			let e = {_offset: 0,_params: items[i],_type: ACTION.CONSOLE_LOG};
			this.apply(e);
		};
	};
	return this;
};

Console.prototype.node = function (){
	return this._node || (this._node = (_1(ConsolePane).flag('normal')).setData(this).end());
};
