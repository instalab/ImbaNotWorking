var Imba = require('imba'), _1 = Imba.createElement;
var ACTION = require('../protocol').ACTION;
var Widget = require('./widget').Widget;
var Dimensions = require('../core/Dimensions').Dimensions;

var PaneTab = Imba.defineTag('PaneTab', function(tag){
	tag.prototype.name = function(v){ return this._name; }
	tag.prototype.setName = function(v){ this._name = v; return this; };
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).setChildren(
			$[0] || _1('div',$,0,this).flag('pane-title').flag('title')
		,2).synced((
			$[0].setContent(this.name(),3)
		,true));
	};
	
	tag.prototype.ontap = function (){
		return this.data().open();
	};
})
exports.PaneTab = PaneTab;

var PaneView = Imba.defineTag('PaneView', 'section', function(tag){
	
	tag.prototype.__data = {watch: 'dataDidSet',name: 'data'};
	tag.prototype.data = function(v){ return this._data; }
	tag.prototype.setData = function(v){
		var a = this.data();
		if(v != a) { this._data = v; }
		if(v != a) { this.dataDidSet && this.dataDidSet(v,a,this.__data) }
		return this;
	};
	tag.prototype.__title = {'default': "Pane",name: 'title'};
	tag.prototype.title = function(v){ return this._title; }
	tag.prototype.setTitle = function(v){ this._title = v; return this; }
	tag.prototype._title = "Pane";
	tag.prototype.key = function(v){ return this._key; }
	tag.prototype.setKey = function(v){ this._key = v; return this; };
	
	tag.prototype.build = function (){
		this.setTabindex(0);
		return tag.prototype.__super__.build.apply(this,arguments);
	};
	
	tag.prototype.setContext = function (context){
		this.setData(context);
		return this;
	};
	
	tag.prototype.oncontextmenu = function (e){
		var menu;
		e.prevent().halt();
		if (menu = this.contextmenu()) {
			return menu.showAt(e.x(),e.y());
		};
	};
	
	tag.prototype.contextmenu = function (){
		return null;
	};
	
	tag.prototype.onfocusin = function (e){
		var v_;
		e.halt();
		
		if (this.data().space().cursor().canPush()) {
			return (this.data().space().agent().setFocus(v_ = this.data()),v_);
		};
	};
	
	tag.prototype.onfocusout = function (e){
		// console.log 'Pane.onfocusout',e.event:relatedTarget
		var v_;
		e.halt();
		if (!e.event().relatedTarget) {
			if (this.data().space().cursor().canPush()) {
				return (this.data().space().agent().setFocus(null),null);
			};
		};
	};
	
	tag.prototype.header = function (){
		return null;
	};
	tag.prototype.footer = function (){
		return null;
	};
	tag.prototype.body = function (){
		let $ = this.$$ || (this.$$ = {});
		return (this._body = this._body||_1('div',this).flag('body')).setText("Content of pane " + this.title());
	};
	
	tag.prototype.render = function (){
		return this.$open(0).setChildren([
			this.header(),
			this.body(),
			this.footer()
		],1).synced();
	};
})
exports.PaneView = PaneView;


function PaneWidget(){ return Widget.apply(this,arguments) };

Imba.subclass(PaneWidget,Widget);
exports.PaneWidget = PaneWidget; // export class 
PaneWidget.register('pane');

PaneWidget.option('layout',{overridable: true,type: Dimensions,action: ACTION.LAYOUT});

PaneWidget.prototype.clientLayout = function (){
	// (@clientLayout ||= Dimensions.build({})).wrap(options.locals:layout)
	return (this._clientLayout || (this._clientLayout = new Dimensions(null))).wrap(this.layout(this.space().me()));
};

PaneWidget.prototype.streamLayout = function (){
	return (this._streamLayout || (this._streamLayout = Dimensions.build({}))).wrap(this.layout(this.space().me().follows()));
};

PaneWidget.prototype.agentLayout = function (){
	return this.streamLayout();
};

PaneWidget.prototype.localLayout = function (){
	return this.clientLayout();
};

PaneWidget.prototype.setLayout = function (data){
	return this.options().set('layout',data);
};

PaneWidget.prototype.streamPosToClientPos = function (pos){
	return this;
};

PaneWidget.prototype.posToScreen = function (agent,px,py,sl,cl){
	sl || (sl = this.agentLayout());
	cl || (cl = this.localLayout());
	
	if (!(sl && cl && sl._data && cl._data)) {
		return null;
	};
	
	var absx = px;
	var absy = py;
	
	var sx = (cl.scaleX() || 1) / (sl.scaleX() || 1);
	var sy = (cl.scaleY() || 1) / (sl.scaleY() || 1);
	
	let relx = (absx - sl.left() + (sl.scrollLeft() || 0)) * sx;
	let rely = (absy - sl.top() + (sl.scrollTop() || 0)) * sy;
	
	let x = relx + cl.left() - (cl.scrollLeft() || 0);
	let y = rely + cl.top() - (cl.scrollTop() || 0);
	
	return [x,y];
};

PaneWidget.prototype.tab = function (){
	let $ = this.$$ || (this.$$ = {});
	return this._tab || (this._tab = this._tab||_1('div',this).flag('tab').on$(0,['tap','open'],this).setText("Tab"));
};

PaneWidget.prototype.open = function (){
	if (this._container) {
		this._container.setCurrentPane(this);
	};
	return this;
};
