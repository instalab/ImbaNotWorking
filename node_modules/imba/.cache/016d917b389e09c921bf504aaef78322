var Imba = require('imba'), _1 = Imba.createElement;
var AGENT = require('../protocol').AGENT;
var Widget = require('./widget').Widget;
var FileWidget = require('./FileWidget').FileWidget;
var F = AGENT.FLAGS;

var PointerView = require('../views/PointerView').PointerView;

function Agent(){ return Widget.apply(this,arguments) };

Imba.subclass(Agent,Widget);
exports.Agent = Agent; // export class 
Agent.register('agent',AGENT);

Agent.prototype.body = function(v){ return this.getAttribute('body'); }
Agent.prototype.setBody = function(v){ this.setAttribute('body',v); return this; };
Agent.prototype.sid = function(v){ return this.getAttribute('sid'); }
Agent.prototype.setSid = function(v){ this.setAttribute('sid',v); return this; };
Agent.prototype.kind = function(v){ return this.getAttribute('kind'); }
Agent.prototype.setKind = function(v){ this.setAttribute('kind',v); return this; };
Agent.prototype.editing = function(v){ return this._editing; }
Agent.prototype.setEditing = function(v){ this._editing = v; return this; };
Agent.prototype.audio = function(v){ return this._audio; }
Agent.prototype.setAudio = function(v){ this._audio = v; return this; };
Agent.prototype.__readyState = {watch: 'readyStateDidSet',name: 'readyState'};
Agent.prototype.readyState = function(v){ return this._readyState; }
Agent.prototype.setReadyState = function(v){
	var a = this.readyState();
	if(v != a) { this._readyState = v; }
	if(v != a) { this.readyStateDidSet && this.readyStateDidSet(v,a,this.__readyState) }
	return this;
};
Agent.prototype.__peerUser = {watch: 'peerUserDidSet',name: 'peerUser'};
Agent.prototype.peerUser = function(v){ return this._peerUser; }
Agent.prototype.setPeerUser = function(v){
	var a = this.peerUser();
	if(v != a) { this._peerUser = v; }
	if(v != a) { this.peerUserDidSet && this.peerUserDidSet(v,a,this.__peerUser) }
	return this;
};

Agent.option('pid');
Agent.option('uid');
Agent.option('color');
Agent.option('offline');
Agent.option('name');
Agent.option('token');
Agent.option('host');
Agent.option('machine');
Agent.option('ignored',{subjective: true});

// which agent is this agent following?
Agent.option('follows',{type: 'widget'});
Agent.option('showPointer');

// the widget that is currently in focus
// this should not really be overridable - the viewer should simply be a different agent
Agent.option('focus',{type: 'widget',
overridable: true,
mark: 'selections',
subjective: true,
shared: true});

// the main widget the agent is displaying
Agent.option('file',{type: 'widget',override: 'pause',shared: true,mark: 'selections',watch: 'fileDidSet'});

// widget -- really? what about views then?
Agent.option('hover',{type: 'widget',overridable: true});

// should probably be declared somewhere else
Agent.option('vw',{subjective: true}); // overridable: true
Agent.option('vh',{subjective: true}); // overridable: true

// legacy - this is moved to primaryEditor
Agent.prototype.fileDidSet = function (value,prev,key){
	console.log("fileDidSet",value,prev,key);
	return this.setLocal(this.space().primaryEditor(),'file',value);
};


Agent.prototype.peerUserDidSet = function (user,prev){
	var self = this;
	console.log("peerUserDidSet",user,prev);
	self.setUid(user ? user.id : null);
	if (user) {
		return self.api().db().summon(user.id).then(function(user) {
			var v_;
			return (self.setName(v_ = user.username),v_);
		});
	};
};

Agent.prototype.refresh = function (){
	if (this.peer()) {
		if (this.peer()._socket) {
			this.setReadyState(this.peer().socket().iceState());
		};
		this.setPeerUser(this.peer().user());
	};
	return this;
};

Agent.prototype.setup = function (){
	this.space().widgets().add(this,this.id());
	return this;
};

Agent.prototype.file = function (opts){
	return this.options().get('file',opts) || this.space().files().at(0);
};

Agent.prototype.user = function (){
	return this.api().db().get(this.uid());
};

Agent.prototype.readyStateDidSet = function (readyState,prev){
	return console.log(("agent " + this.pid() + ": " + readyState + " (from " + prev + ")"));
};

Agent.prototype.avatarUrl = function (size){
	if (this.user()) {
		return this.user().avatarUrl(size);
	} else {
		return ("https://github.com/identicons/" + this.color() + ".png");
	};
};

Agent.prototype.peer = function (){
	return this.api().db().get(this.pid());
};

// def deserialized
// 	commitAdd unless self == space.agent
// 	self

Agent.prototype.mount_ = function (){
	this.owner().widgets().add(this,this._id);
	if (this._id != -5) { this.owner().agents().add(this,this._id) };
	// if $web$ and pid == api.pid
	// 	# should only happen when we are live
	// 	owner.me = self
	return this;
};

Agent.prototype.unmount_ = function (){
	this.owner().widgets().remove(this);
	this.owner().agents().remove(this);
	return this;
};

Agent.prototype.isLocal = function (){
	return false;
};

Agent.prototype.isRecording = function (){
	return false;
};

Agent.prototype.isActive = function (){
	return this._branch && this.space().branch() == this._branch;
};

Agent.prototype.isMe = function (){
	return this.space().me() == this;
};

Agent.prototype.isHost = function (){
	return !(!(this.host()));
};

Agent.prototype.canCode = function (){
	return this.isMe();
};

Agent.prototype.canSaveFiles = function (){
	return true;
};

Agent.prototype.pointer = function (){
	return this._pointer || (this._pointer = (_1(PointerView)).bindData(this,'space',[]).setFlag(0,("agent-" + this.color())).setAgent(this).end());
};

Agent.prototype.activate = function (){
	if (this.isMe()) {
		this.log('activate agent in space!');
		if (this.showPointer()) {
			this._trackingPointer = true;
			this.space().pointerTracker().start();
		};
	};
	return this;
};

Agent.prototype.deactivate = function (){
	if (this._trackingPointer) {
		this._trackingPointer = false;
		this.space().pointerTracker().stop();
	};
	return this;
};

Agent.prototype.followers = function (){
	var self = this;
	var agents = self.space().agents().filter(function(agent) {
		return agent != self && !self.ignored(agent);
		// self.followed(agent)
	});
	return agents;
};


// return previous value
Agent.prototype.setLocal = function (target,key,value,schema){
	var id_, v_;
	let obj = (target == this) ? this._data : ((this._data[id_ = target.id()] || (this._data[id_] = {})));
	let prev = obj[key];
	
	// possibly create subaction here?
	
	if (schema && schema.inheritable == 'write' && this._data.follows) {
		return this.follows().setLocal(target,key,value);
	};
	
	if (value === undefined) {
		(((v_ = obj[key]),delete obj[key], v_));
	} else {
		obj[key] = value;
	};
	
	
	// should link this up in target widget?
	return prev;
};

Agent.prototype.getLocal = function (target,key,inheritable){
	let obj = (target == this) ? this._data : ((this._data[target.id()]));
	let val = obj ? obj[key] : undefined;
	// console.log "getlocal",key,inheritable
	if (val == undefined && inheritable && this.follows()) {
		return this.follows().getLocal(target,key,inheritable);
	};
	return val;
};

function Spectator(){ return Agent.apply(this,arguments) };

Imba.subclass(Spectator,Agent);
exports.Spectator = Spectator; // export class 
Spectator.prototype.token = function(v){ return this._token; }
Spectator.prototype.setToken = function(v){ this._token = v; return this; };

Spectator.prototype.token = function (){
	return this._token || (this._token = Date.now());
};

Spectator.prototype.setup = function (){
	this.log('Spectator created');
	return this;
};

Spectator.prototype.name = function (){
	return "you";
};

Spectator.prototype.color = function (){
	return 'grey';
};

Spectator.prototype.canCode = function (){
	return true;
};

Spectator.prototype.isHost = function (){
	return false;
};

Spectator.prototype.activate = function (){
	return this;
};

Spectator.prototype.deactivate = function (){
	return this;
};
