function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _2 = Imba.createTagList, _1 = Imba.createElement;
var UserAvatar = require('../../site/components/UserAvatar').UserAvatar;

var PeerSquare = Imba.defineTag('PeerSquare', function(tag){
	tag.prototype.space = function(v){ return this._space; }
	tag.prototype.setSpace = function(v){ this._space = v; return this; };
	tag.prototype.render = function (){
		// get color for peer?!
		var $ = this.$;
		return this.$open(0).setFlag(-1,this.data().color()).setChildren($.$ = $.$ || [
			// <span> "X"
			_1(UserAvatar,$,0,this),
			_1('div',$,1,this).flag('color')
		],2).synced((
			$[0].bindData(this.data(),'user',[]).end()
		,true));
	};
	
	tag.prototype.ontap = function (){
		if (this.space()) {
			// make this peer actually join the space
			return this.space().createAgent({pid: this.data().id});
		};
	};
})
exports.PeerSquare = PeerSquare;

var Peers = Imba.defineTag('Peers', function(tag){
	
	tag.prototype.space = function (){
		return this.data();
	};
	
	tag.prototype.peers = function (){
		return this.api().peers();
	};
	
	tag.prototype.render = function (){
		var self = this, $ = this.$;
		return self.$open(0).setChildren(
			(function tagLoop($0) {
				for (let i = 0, items = iter$(self.peers()), len = $0.taglen = items.length; i < len; i++) {
					($0[i] || _1(PeerSquare,$0,i)).setData(items[i]).setSpace(self.space()).end();
				};return $0;
			})($[0] || _2($,0))
		,4).synced();
	};
})
exports.Peers = Peers;
