var Imba = require('imba'), _1 = Imba.createElement;
var uxa$ = require('uxa'), Button = uxa$.Button, Menu = uxa$.Menu;

var InterfaceView = require('./InterfaceView').InterfaceView;
var TimelineView = require('./TimelineView').TimelineView;
var Slider = require('./Slider').Slider;
var Notification = require('./Notification').Notification;
var PlaybackMenu = require('./PlaybackMenu').PlaybackMenu;

var util = require('../util');

var SliderButton = Imba.defineTag('SliderButton');

var VolumeButton = Imba.defineTag('VolumeButton', SliderButton, function(tag){
	
	tag.prototype.toggle = function (e){
		e.halt();
		return this.data().getMuted() ? this.data().unmute() : this.data().mute();
	};
	
	tag.prototype.value = function (){
		return this.data().getRealVolume();
	};
	
	tag.prototype.updateValue = function (value){
		this.data().setVolume(value);
		if (this.data().getMuted() && value > 0) {
			this.data().unmute();
		};
		return this;
	};
	
	tag.prototype.onchange = function (e){
		return this.updateValue(e.target().value());
	};
	
	tag.prototype.icon = function (){
		if (this.value() == 0) {
			return 'vol0';
		} else if (this.value() < 0.20) {
			return 'vol1';
		} else if (this.value() < 0.40) {
			return 'vol2';
		} else if (this.value() < 0.75) {
			return 'vol3';
		} else {
			return 'vol3';
		};
	};
	
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).setChildren($.$ = $.$ || [
			_1('a',$,0,this).flag('tool').on$(0,['tap','toggle'],this),
			_1('div',$,1,this).flag('hitbox'),
			_1(Slider,$,2,this).flag('vertical').flag('abs').setName('volume').setMin(0).setMax(1).setStep(0.1)
		],2).synced((
			$[0].dataset('icon',this.icon()).end(),
			$[2].setValue(this.data().getRealVolume(),1).end()
		,true));
	};
});

var RecDuration = Imba.defineTag('RecDuration', function(tag){
	
	tag.prototype.mount = function (){
		return this.schedule({raf: true});
	};
	
	tag.prototype.unmount = function (){
		return this.unschedule();
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).flag('time').flag('rec').flag('label').setChildren($[0] || _1('span',$,0,this),2).synced((
			$[0].setContent(util.msToStr(this.data().duration(),3),3)
		,true));
	};
});

var PlaybackOverlay = Imba.defineTag('PlaybackOverlay', InterfaceView, function(tag){
	
	tag.prototype.__visibility = {'default': true,name: 'visibility'};
	tag.prototype.visibility = function(v){ return this._visibility; }
	tag.prototype.setVisibility = function(v){ this._visibility = v; return this; }
	tag.prototype._visibility = true;
	tag.prototype.__mode = {'default': 1,name: 'mode'};
	tag.prototype.mode = function(v){ return this._mode; }
	tag.prototype.setMode = function(v){ this._mode = v; return this; }
	tag.prototype._mode = 1;
	
	var modes = ['default','side'];
	
	tag.prototype.build = function (){
		this.setTabindex(-1);
		this.setMode(this.api().isMobile() ? 0 : 1);
		return this;
	};
	
	tag.prototype.space = function (){
		return this.data();
	};
	
	tag.prototype.timeline = function (){
		return this.space().timeline();
	};
	
	tag.prototype.onmouseover = function (e){
		e.silence();
		this.setHovered(true);
		return;
	};
	
	tag.prototype.onmouseout = function (e){
		e.silence();
		if (!this.dom().contains(e.event().relatedTarget)) {
			return (this.setHovered(false),false);
		};
	};
	
	tag.prototype.mount = function (){
		return this;
	};
	
	tag.prototype.commit = function (){
		this.setEnabled((this.space().state() != 'live')); // space.trunk.isTutorial # (hovered or space.trunk.isPaused or (api.idleTime < 3000 and space.isPlaying))
		return tag.prototype.__super__.commit.apply(this,arguments);
	};
	
	tag.prototype.skip = function (amount,e){
		if (e) { e.halt().prevent() };
		let time = Math.max(this.space().timeline().currentTime() + amount,0);
		return this.space().timeline().seek(this.space().timeline().timeToOffset(time));
	};
	
	tag.prototype.navigateTo = function (cast,e){
		e.halt().prevent();
		this.log("navigateTo");
		return this.trigger('spaceend');
	};
	
	tag.prototype.showSettings = function (e){
		e.uxa().open((_1(PlaybackMenu).flag('clickthrough')).bindData(this,'timeline',[]).end());
		return this;
	};
	
	tag.prototype.togglePlayback = function (tl){
		if (tl.isPlaying()) {
			tl.pause();
			this.trigger('spacepaused');
		} else if (tl.isPaused()) {
			tl.play();
			this.trigger('spaceplay');
		};
		return this;
	};
	
	tag.prototype.toggleRecording = function (){
		if (this.space().isRecording()) {
			this.trigger('recstop',this.space().branch());
		} else {
			this.trigger('recstart',this.space().branch());
		};
		return this;
	};
	
	tag.prototype.toggleBrushup = function (){
		if (this.space().branch().isAnnotating()) {
			this.trigger('brushupstop');
		} else {
			this.trigger('annotate',this.space().branch());
		};
		return this;
	};
	
	tag.prototype.exitBrushup = function (){
		return this.trigger('brushupstop');
	};
	
	tag.prototype.publish = function (){
		return this.trigger('branchpublish',this.space().branch());
	};
	
	tag.prototype.setViewMode = function (mode){
		return (this.space().view().setMode(mode),mode);
	};
	
	tag.prototype.ontogglequeue = function (e){
		return e.halt();
	};
	
	tag.prototype.render = function (){
		var $ = this.$, t0;
		var model = this.data().model();
		var author = model.owner();
		var target = this.branch().isLocal() ? ((this.branch().parent() || this.branch())) : this.branch();
		var tl = target.timeline();
		var dur = target.hasDuration();
		
		return this.$open(0).setFlag(-1,this.space().trunk().type()).setFlag(-2,this.space().branch().type()).setFlag(-3,tl.playState()).setChildren(
			t0 = $[0] || (t0=_1('div',$,0,this)).flag('body')
		,2).synced((
			$[0].setContent([
				($[1] || _1('div',$,1,0).flag('buttons').flag('play')).setContent([
					($[2] || _1('a',$,2,1).flag('tool').flag('pb').flag('primary').dataset('icon',"")).setData(tl).setFlag(0,tl.playState()).on$(0,['tap','stop',['togglePlayback',tl]],this).end(),
					
					// if target.canRecord
					// 	<a.tool.rec.unless-pip :tap.stop.toggleRecording> <i.rec>
					
					(!this.api().isMobile() && !target.isRecording()) ? (
						($[3] || _1(VolumeButton,$,3,1).flag('volume').flag('muted')).bindData(this.space(),'audio',[]).end()
					) : void(0)
				],1),
				
				// if target.isRecording
				// 	<RecDuration[space.recording]>
				
				target.hasDuration() ? (
					(this._timeline = this._timeline||_1(TimelineView,t0).flag('timeline')).bindData(target,'timeline',[]).end()
				) : void(0),
				
				($[4] || _1('div',$,4,t0).flag('buttons').flag('right')).setContent(
					this.space().isAnnotating() ? (
						($[5] || _1('div',$,5,4).flag('button').flag('primary').dataset('icon','check').on$(0,['tap','exitBrushup'],this).setContent($[6] || _1('span',$,6,5).setText("DONE"),2)).end()
					) : (
						($[7] || _1('a',$,7,4).flag('tool').flag('flash').flag('settings').flag('unless-pip').dataset('icon','morevert').on$(0,['tap','showSettings'],this)).end()
						// <a.tool.flash.settings.cog.unless-pip data-icon='mcog' :tap.showSettings>
						// <.tool.close.unless-inline.unless-fullscreen data-icon='mclose' :tap.trigger('close')>
					)
				,3)
			],1)
		,true));
	};
})
exports.PlaybackOverlay = PlaybackOverlay;

