function len$(a){
	return a && (a.len instanceof Function ? a.len() : a.length) || 0;
};
function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _2 = Imba.createTagList, _3 = Imba.createTagMap, _1 = Imba.createElement;
var Page = require('./Page').Page;
var UserAvatar = require('../components/UserAvatar').UserAvatar;
var Carousel = require('../components/Carousel').Carousel;
var CastTile = require('../components/CastTile').CastTile;
var PlaylistSection = require('../components/PlaylistSection').PlaylistSection;
var CollectionSection = require('../components/CollectionSection').CollectionSection;
var TweetView = require('../components/TweetView').TweetView;
var GroupTile = require('../components/GroupTile').GroupTile;

var Format = require('../components/Formatters').Format;

var uxa$ = require('uxa'), Menu = uxa$.Menu, MenuItem = uxa$.MenuItem, IconButton = uxa$.IconButton, Button = uxa$.Button;

var Tab = Imba.defineTag('Tab', function(tag){
	tag.prototype.name = function(v){ return this._name; }
	tag.prototype.setName = function(v){ this._name = v; return this; };
	tag.prototype.href = function(v){ return this._href; }
	tag.prototype.setHref = function(v){ this._href = v; return this; };
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).setChildren(
			$[0] || _1('a',$,0,this)
		,2).synced((
			$[0].setHref(this.href()).setContent(this.name(),3).end()
		,true));
	};
});

var Casts = Imba.defineTag('Casts', CollectionSection, function(tag){
	
	tag.prototype.groups = function(v){ return this._groups; }
	tag.prototype.setGroups = function(v){ this._groups = v; return this; };
	tag.prototype.__items = {watch: 'itemsDidSet',name: 'items'};
	tag.prototype.items = function(v){ return this._items; }
	tag.prototype.setItems = function(v){
		var a = this.items();
		if(v != a) { this._items = v; }
		if(v != a) { this.itemsDidSet && this.itemsDidSet(v,a,this.__items) }
		return this;
	};
	tag.prototype.__view = {watch: 'viewDidSet',name: 'view'};
	tag.prototype.view = function(v){ return this._view; }
	tag.prototype.setView = function(v){
		var a = this.view();
		if(v != a) { this._view = v; }
		if(v != a) { this.viewDidSet && this.viewDidSet(v,a,this.__view) }
		return this;
	};
	
	tag.prototype.filterGroup = function (item){
		// console.log "filterGroup!",item
		return (this.setView(item),item);
	};
	
	tag.prototype.itemsDidSet = function (items){
		var v_;
		return (this.setView(v_ = this.groups() && this.groups()[0] || null),v_);
	};
	
	tag.prototype.viewDidSet = function (view,prev){
		if (prev) {
			for (let o = prev[1], v, i = 0, keys = Object.keys(o), l = keys.length, k; i < l; i++){
				k = keys[i];v = o[k];if (!(view && view[k])) {
					this.items().filters().del(k);
				};
			};
		};
		
		if (view) {
			for (let o = view[1], v, i = 0, keys = Object.keys(o), l = keys.length, k; i < l; i++){
				k = keys[i];v = o[k];this.items().filters().set(k,v);
			};
		};
		this.render();
		return this;
	};
	
	
	tag.prototype.header = function (){
		var $ = this.$$ || (this.$$ = {}), t0, self = this;
		return (t0 = self._header = self._header||(t0=_1('header',self)).flag('header').flag('flat').setContent([
			_1('div',t0.$,'A',t0).flag('actions').setContent(t0.$.B || _1(IconButton,t0.$,'B','A').setAction('showoptions').setIcon('.'),2),
			_1('div',t0.$,'C',t0).flag('heading').flag('tabs')
		// <.count> items.len
		// <span.heading uxa:md=title>
		],2)).end((
			t0.$.B.end(),
			t0.$.C.setContent(
				(function tagLoop($0) {
					for (let i = 0, items = iter$(self.groups()), len = $0.taglen = items.length, item; i < len; i++) {
						item = items[i];
						($0[i] || _1('div',$0,i).flag('tab')).flagIf('selected',(item == self.view())).on$(0,['tap',['filterGroup',item]],self).setContent(item[0],3);
					};return $0;
				})(t0.$['D'] || _2(t0.$,'D',t0.$.C))
			,4)
		,true));
	};
});


var GroupPage = Imba.defineTag('GroupPage', Page, function(tag){
	
	tag.prototype.gid = function(v){ return this._gid; }
	tag.prototype.setGid = function(v){ this._gid = v; return this; };
	tag.prototype.__data = {watch: 'dataDidSet',name: 'data'};
	tag.prototype.data = function(v){ return this._data; }
	tag.prototype.setData = function(v){
		var a = this.data();
		if(v != a) { this._data = v; }
		if(v != a) { this.dataDidSet && this.dataDidSet(v,a,this.__data) }
		return this;
	};
	tag.prototype.__status = {'default': 404,name: 'status'};
	tag.prototype.status = function(v){ return this._status; }
	tag.prototype.setStatus = function(v){ this._status = v; return this; }
	tag.prototype._status = 404;
	tag.prototype.membership = function(v){ return this._membership; }
	tag.prototype.setMembership = function(v){ this._membership = v; return this; };
	tag.prototype.playlists = function(v){ return this._playlists; }
	tag.prototype.setPlaylists = function(v){ this._playlists = v; return this; };
	tag.prototype.related = function(v){ return this._related; }
	tag.prototype.setRelated = function(v){ this._related = v; return this; };
	
	tag.prototype.path = function (){
		return [this.data()];
	};
	
	tag.prototype.load = async function (queue){
		var v_;
		return (this.setData(v_ = await this.api().prefetch(['group',this.gid()])),v_);
	};
	
	tag.prototype.dataDidSet = function (data){
		var v_;
		if (!data) { return (this.setStatus(v_ = 404),v_) };
		
		this.setStatus(200);
		this.setPlaylists(data.playlists().sel({sort: '-created_at'},function(_0) { return _0.privacy != 'private'; }));
		this.setRelated(this.api().db().groups().sel('-created_at',function(_0) { return _0.coverart && _0.id != data.id; }));
		if (false) {};
		return;
	};
	
	tag.prototype.title = function (){
		return (this.data() ? this.data().title : "Course") + " | Scrimba.com";
	};
	
	tag.prototype.desc = function (){
		return this.data() && this.data().tagline || "Scrimba is a community of developers sharing knowledge through interactive coding screencasts.";
	};
	
	tag.prototype.image = function (){
		if (this.data() && this.data().coverart) {
			return ("https://scrimba.com/static/art/" + (this.data().id) + ".png");
		} else {
			return null;
		};
	};
	
	tag.prototype.membership = function (){
		return this.api().user() && this.data() && this.data().membership(this.api().uid());
	};
	
	tag.prototype.tab = function (){
		return this.params().tab || 'casts';
	};
	
	tag.prototype.mount = function (){
		this.schedule({events: true});
		this.render();
		return tag.prototype.__super__.mount.apply(this,arguments);
	};
	
	// def oncastopen e, params
	// 	unless membership
	// 		e.halt
	// 		trigger('groupjoin',data)
	// 		return
	
	tag.prototype.onenroll = async function (e){
		var self = this;
		e.halt();
		await self.api().tryLogin();
		return self.api().user() && self.api().rpc('groupJoin',[self.data().id],{models: true}).then(function() {
			self.api().analytics().courseEnrolled(self.data().id);
			return self.render();
		});
	};
	
	tag.prototype.render = function (){
		var $ = this.$, self = this;
		return self.$open(0).setChildren([
			$[0] || _1('header',$,0,self).setContent(
				$[1] || _1('section',$,1,0).flag('narrow').setContent([
					_1('h1',$,2,1).flag('title'),
					_1('h3',$,3,1).flag('tagline'),
					// unless membership
					// 	<Button[data].enroll uxa:action='enroll' label="Take the course!">
					_1('div',$,4,1).flag('clear')
				],2)
			,2),
			
			$[5] || _1('section',$,5,self).flag('full').flag('playlists'),
			
			$[7] || _1('section',$,7,self).flag('full').flag('about').setContent(
				$[8] || _1('section',$,8,7).flag('narrow').setContent(
					$[9] || _1('div',$,9,8)
				,2)
			,2),
			
			$[10] || _1('section',$,10,self).flag('full').flag('tweets').setContent([
				_1('h2',$,11,10).flag('title').setText("What people are saying about Scrimba:"),
				_1(TweetView,$,12,10)
			],2),
			
			$[13] || _1('section',$,13,self).flag('full').flag('related').setContent([
				// <header.header>
				_1('h2',$,14,13).flag('title').setText("Related courses"),
				_1(Carousel,$,15,13).flag('sm').setLimit(24).setInfinite(true)
			],2),
			
			self.footer()
		],1).synced((
			$[2].setContent(self.data().title,3),
			$[3].setContent(self.data().tagline,3),
			$[5].setContent(
				// <h2.title> "Full course content"
				(function tagLoop($0) {
					var t0, $$ = $0.$iter();
					for (let i = 0, items = iter$(self.playlists()), len = items.length, item; i < len; i++) {
						item = items[i];
						if (!len$(item.item_ids)) { continue; };
						$$.push((t0 = $0[i] || (t0=_1('article',$0,i)).setContent(
							t0.$.A || _1('div',t0.$,'A',t0).flag('items').flag('sm')
						,2)).end((
							t0.$.A.setContent(
								(function tagLoop($0) {
									for (let j = 0, ary = iter$(item.items()), len = $0.taglen = ary.length; j < len; j++) {
										($0[j] || _1(CastTile,$0,j)).setData(ary[j]).setContext(item).end();
									};return $0;
								})(t0.$['B'] || _2(t0.$,'B',t0.$.A))
							,4)
						,true)));
					};return $$;
				})($[6] || _3($,6,$[5]))
			,5),
			$[9].setNestedAttr('uxa','md',(self.data().description)).end(),
			$[12].setIds(self.data().tweets).end(),
			$[15].bindData(self,'related',[]).setRenderer(GroupTile.Renderer).end()
		,true));
	};
})
exports.GroupPage = GroupPage;

