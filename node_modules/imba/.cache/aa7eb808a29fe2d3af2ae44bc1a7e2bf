function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
function len$(a){
	return a && (a.len instanceof Function ? a.len() : a.length) || 0;
};
var Imba = require('imba'), _2 = Imba.createTagCache, _3 = Imba.createTagList, _1 = Imba.createElement;
var uxa$ = require('uxa'), Button = uxa$.Button, IconButton = uxa$.IconButton, Actionable = uxa$.Actionable, Icon = uxa$.Icon;
var UserAvatar = require('./components/UserAvatar').UserAvatar;
var KarmaCounter = require('./components/KarmaCounter').KarmaCounter;
var SpacePage = require('./pages/SpacePage').SpacePage;
var UserPage = require('./pages/UserPage').UserPage;
var HomePage = require('./pages/HomePage').HomePage;

var Cast = require('../models/Cast').Cast;
var User = require('../models/User').User;
var Group = require('../models/Group').Group;
var Playlist = require('../models/Playlist').Playlist;

var Item = Imba.defineTag('Item', 'a', function(tag){
	
	tag.prototype.__data = {watch: 'dataDidSet',name: 'data'};
	tag.prototype.data = function(v){ return this._data; }
	tag.prototype.setData = function(v){
		var a = this.data();
		if(v != a) { this._data = v; }
		if(v != a) { this.dataDidSet && this.dataDidSet(v,a,this.__data) }
		return this;
	};
	
	tag.prototype.dataDidSet = function (data){
		if (data) {
			this.draw();
			this.measure();
		} else {
			this.unflag('current');
			this.unflag('first');
		};
		
		this.flag('current',data && data.CURR);
		this.flag('first',data && data.FIRST);
		this.flag('pre',data && data.PRE);
		return this.flag('on',!!data);
	};
	
	tag.prototype.measure = function (){
		if (false && this._label) {
			this.dom().offsetWidth;
			var w = this._label.dom().offsetWidth;
			this.dom().style.setProperty('--label-width',w + 'px');
		};
		return this;
	};
	
	tag.prototype.draw = function (){
		var $ = ($_ = this.$).$draw$ || ($_.$draw$ = _2(this));
		return this.$open('draw0').setHref(this.data()[0]).setChildren($.$ = $.$ || [
			_1(Icon,$,0,this),
			this._label = this._label||_1('b',this).flag('label')
		],2).synced((
			$[0].setData('#').end(),
			this._label.setContent(this.data()[1],3)
		,true));
	};
});

// tag SearchButton < form
// 
// 	prop value watch: yes
// 
// 	def onfocusin
// 		flag('focus')
// 
// 	def onfocusout
// 		unflag('focus')
// 
// 	def onkeydown e
// 		self
// 
// 	def onsubmit e
// 		e.prevent.halt
// 		unless @query.value
// 			@query.dom.blur
// 		else
// 			router.go("/search?q={@query.value}")
// 
// 		e.@responder = null
// 
// 	def input
// 		<input@query placeholder="SEARCH">
// 
// 	def valueDidSet value
// 		input.value = value
// 		self
// 
// 	def render
// 		<self.Button.uxa .active=(value)>
// 			<i.Icon data-icon='search'>
// 			<b> input

var SiteHeader = Imba.defineTag('SiteHeader', 'header', function(tag){
	
	tag.prototype.page = function(v){ return this._page; }
	tag.prototype.setPage = function(v){ this._page = v; return this; };
	tag.prototype.path = function(v){ return this._path; }
	tag.prototype.setPath = function(v){ this._path = v; return this; };
	tag.prototype.__scope = {'default': 0,watch: 'scopeDidSet',name: 'scope'};
	tag.prototype.scope = function(v){ return this._scope; }
	tag.prototype.setScope = function(v){
		var a = this.scope();
		if(v != a) { this._scope = v; }
		if(v != a) { this.scopeDidSet && this.scopeDidSet(v,a,this.__scope) }
		return this;
	}
	tag.prototype._scope = 0;
	
	tag.prototype.user = function (){
		return this.data().user();
	};
	
	tag.prototype.refresh = function (){
		var path = [["/","Scrimba"]].concat(this.page().path());
		var items = [];
		var start = (len$(path) > 2) ? 1 : 0;
		
		for (let i = 0, ary = iter$(path), len = ary.length, item; i < len; i++) {
			item = ary[i];
			let next = path[i + 1];
			if (item instanceof Cast) {
				let title = item.isFork() ? (("" + (item.owner().name) + "'s fork")) : item.title;
				item = [item.url(),title];
			} else if (item instanceof User) {
				item = [item.url(),item.username];
			} else if (item instanceof Playlist) {
				item = [item.url(),item.title];
			} else if (item instanceof Group) {
				item = [item.url(),item.title];
			};
			
			if (item instanceof Array) {
				// item.PRE = i < start
				// item.FIRST = i == start
				item.CURR = !next;
				items.push(item);
			};
		};
		
		while (len$(items) < 4){
			items.push(null);
		};
		
		this.setPath(items);
		this.render();
		this.setScope(start);
		return this;
	};
	
	tag.prototype.scopeDidSet = function (lvl){
		return this;
		var item = this._breadcrumb.dom().children[lvl];
		var x = item.offsetLeft;
		this._breadcrumb.css({transform: ("translateX(-" + x + "px)")});
		return this;
	};
	
	tag.prototype.mount = function (){
		// scopeDidSet(scope)
		for (let i = 0, items = iter$(this.dom().getElementsByClassName('Item')), len = items.length; i < len; i++) {
			items[i]._tag.measure();
		};
		return this;
	};
	
	tag.prototype.render = function (){
		var $ = this.$, self = this, page_, t0;
		return self.$open(0).setChildren([
			self._breadcrumb = self._breadcrumb||_1('div',self).flag('breadcrumb'),
			
			(page_ = self.page()) && page_.masthead  &&  page_.masthead(),
			
			t0 = self._right = self._right||(t0=_1('div',self)).flag('right')
		],1).synced((
			self._breadcrumb.setContent(
				(function tagLoop($0) {
					for (let i = 0, items = iter$(self.path()), len = $0.taglen = items.length; i < len; i++) {
						($0[i] || _1(Item,$0,i)).setData(items[i]).setFlag(0,("n" + i)).end();
					};return $0;
				})($[0] || _3($,0,self._breadcrumb))
			,4),
			self._right.setContent([
				(self.page() && self.page().tools()) ? (
					(self._tools = self._tools||_1('div',t0).flag('tools')).setContent(self.page().tools(),3)
				) : (
					// <SearchButton.pos value=(page?.searchQuery or "")>
					(self._tabs = self._tabs||_1('div',t0).flag('tabs').setContent([
						_1('a',$,1,self._tabs).flag('tab').setHref("/search").setContent($[2] || _1('b',$,2,1).setText("Search"),2),
						// <a.tab href="https://gitter.im/scrimba_community/Lobby" target="_blank"> <b> "Chat"
						_1('a',$,3,self._tabs).flag('tab').setHref("https://github.com/scrimba/community").setTarget("_blank").setContent($[4] || _1('b',$,4,3).setText("Community"),2)
					// <a.tab.create :tap.trigger('addcast','tutorial')> <b> 'Create'
					// <Button.pos.create action=['addcast','tutorial'] label='Create'>
					],2)).end((
						$[1].end(),
						$[3].end()
					,true))
				),
				self.user() ? Imba.static([
					($[5] || _1('a',$,5,t0).flag('create').dataset('icon','madd').on$(0,['tap',['trigger','addcast','tutorial']],self)).end(),
					($[6] || _1(Actionable,$,6,t0).flag('session').setAction('usermenu').setContent($[7] || _1(UserAvatar,$,7,6).setS(60),2)).bindData(self,'user',[]).end((
						$[7].bindData(self,'user',[]).end()
					,true)),
					self.user().karma ? (
						($[8] || _1(KarmaCounter,$,8,t0).setTitle("Karma")).bindData(self,'user',[]).end()
					) : void(0)
				],1,1) : (
					($[9] || _1('a',$,9,t0).flag('tab').flag('login').on$(0,['tap',['trigger','signin']],self).setContent($[10] || _1('b',$,10,9).setText("Sign in"),2))
					// <Button.pri.login action='signin' label=(api.isMobile ? "Join" : "Login / Signup") icon='>'>
				)
			],1)
		,true));
	};
})
exports.SiteHeader = SiteHeader;
