var Imba = require('imba'), _1 = Imba.createElement;
var uxa$ = require('uxa'), Dialog = uxa$.Dialog, TextField = uxa$.TextField, TextArea = uxa$.TextArea, Button = uxa$.Button;

var GroupJoinDialog = Imba.defineTag('GroupJoinDialog', Dialog, function(tag){
	
	tag.prototype.cast = function(v){ return this._cast; }
	tag.prototype.setCast = function(v){ this._cast = v; return this; };
	tag.prototype.__dismissable = {'default': true,name: 'dismissable'};
	tag.prototype.dismissable = function(v){ return this._dismissable; }
	tag.prototype.setDismissable = function(v){ this._dismissable = v; return this; }
	tag.prototype._dismissable = true;
	
	tag.prototype.submitLabel = function (){
		return "Enroll for free";
	};
	
	tag.prototype.body = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		return (t0 = this._body = this._body||(t0=_1('div',this)).flag('body')).setContent(
			this.cast() ? (
				(t0.$.A || _1('p',t0.$,'A',t0)).setText("To watch this tutorial you need to enroll in the \"" + (this.data().title) + "\" course.")
			) : (
				(t0.$.B || _1('p',t0.$,'B',t0)).setText("Are you sure you want to enroll in the \"" + (this.data().title) + "\" course?")
			)
		,3);
	};
	
	tag.prototype.footer = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		return (t0 = this._footer = this._footer||(t0=_1('footer',this)).flag('footer').flag('flat')).setContent([
			this.dismissable() ? (
				(t0.$.A || _1(Button,t0.$,'A',t0).setType('button').on$(0,['tap','tapDismiss'],this)).setLabel(this.cancelLabel()).end()
			) : void(0),
			(t0.$.B || _1(Button,t0.$,'B',t0).flag('primary').setType('submit')).setLabel(this.submitLabel()).end()
		],1);
	};
	
	
	tag.prototype.onuxahide = function (e){
		if (!(this.dismissable()) && this.data() && !this.data().membership(this.api().uid())) {
			return e.halt().cancel();
		};
	};
	
	tag.prototype.onuxasubmit = function (e){
		var self = this;
		e.stopPropagation();
		
		return self.uxa().queue().add(200,function() {
			return new Promise(async function(resolve,reject) {
				var res = await self.api().tryLogin();
				
				if (!self.api().user()) {
					return reject("Not logged in");
				};
				
				return self.api().rpc('groupJoin',[self.data().id,self.formData()],{models: true}).then(function(membership) {
					if (membership) {
						self.api().analytics().courseEnrolled(self.data().id);
					};
					
					return membership ? resolve(res) : reject("Could not enroll");
				});
			});
		});
	};
})
exports.GroupJoinDialog = GroupJoinDialog;
