// move redis-specific stuff here
var fs = require('fs');
var path = require('path');
var Redis = exports.Redis = require('ioredis');
Promise = require('bluebird');

var PROTOCOL = require('../scrimba/protocol');

var commands = {};
var utils = {};
utils.loadScript = function (src,array){
	var self = this;
	if (array[src]) { return };
	array[src] = true;
	
	var body = fs.readFileSync(path.resolve(("" + __dirname + "/lua/" + src + ".lua")),'utf8');
	
	body = body.replace(/\bE\.([\w\.]+)/g,function(m,code) {
		var val = PROTOCOL;
		var path = code.split(".");
		while (path[0]){
			val = val[path.shift()];
		};
		return val;
	});
	
	body.replace(/\bapi\.(\w+)\(/g,function(m,call) {
		// console.log 'loading api-script'
		self.loadScript(("api/" + call),array);
		return m;
	});
	
	return array.push(body);
};



utils.defineCommand = function (redis,name,keys){
	if(keys === undefined) keys = 0;
	var scripts = ['local api = {}'];
	this.loadScript('shared',scripts);
	this.loadScript(name,scripts);
	commands[name] = {};
	var binary = scripts[scripts.length - 1].indexOf("return cmsgpack") >= 0;
	
	if (binary) {
		console.log('command is binary!!!',name);
		commands[name].binary = true;
	};
	// console.log "defining command",name,!!redis:defineCommand,scripts.join("\n")
	redis.defineCommand('rpc' + name,{numberOfKeys: keys,lua: scripts.join("\n")});
	return;
};



	
	Redis.prototype.time = function(v){ return this._time; }
	Redis.prototype.setTime = function(v){ this._time = v; return this; };
	
	Redis.prototype.now = function (){
		return this._time || Date.now();
	};
	
	Redis.prototype.api = function (name){
		var $0 = arguments, i = $0.length;
		var params = new Array(i>1 ? i-1 : 0);
		while(i>1) params[--i - 1] = $0[i];
		if (!this['rpc' + name]) { utils.defineCommand(this,name) };
		var cmd = commands[name];
		
		var pars = params.map(function(par) {
			return (par && par.constructor == Object) ? JSON.stringify(par) : par;
		});
		
		if (cmd.binary) {
			return this['rpc' + name + 'Buffer'].apply(this,pars);
		} else {
			return this['rpc' + name].apply(this,pars);
		};
	};
	
	Redis.prototype.jsonapi = function (){
		var $0 = arguments, i = $0.length;
		var params = new Array(i>0 ? i : 0);
		while(i>0) params[i-1] = $0[--i];
		return this.api.apply(this,params).then(function(res) { return JSON.parse(res); });
	};
	
	Redis.prototype.bufferapi = function (name){
		var $0 = arguments, i = $0.length;
		var params = new Array(i>1 ? i-1 : 0);
		while(i>1) params[--i - 1] = $0[i];
		if (!this['rpc' + name]) { utils.defineCommand(this,name) };
		var cmd = commands[name];
		var pars = params.map(function(par) {
			return (par && par.constructor == Object) ? JSON.stringify(par) : par;
		});
		return this['rpc' + name + 'Buffer'].apply(this,pars);
	};
	
	Redis.prototype.rawrpc = function (name){
		var $0 = arguments, i = $0.length;
		var params = new Array(i>1 ? i-1 : 0);
		while(i>1) params[--i - 1] = $0[i];
		if (!this['rpc' + name]) { utils.defineCommand(this,name) };
		
		var pars = params.map(function(par) {
			return (par && par.constructor == Object) ? JSON.stringify(par) : par;
		});
		
		return this['rpc' + name].apply(this,pars);
	};
	
	Redis.prototype.rpc = function (name,user,space,session,params){
		if(params === undefined) params = [];
		if (!this['rpc' + name]) { utils.defineCommand(this,name) };
		
		var pars = params.map(function(par) {
			return (par && par.constructor == Object) ? JSON.stringify(par) : par;
		});
		
		if (!this['rpc' + name]) {
			console.log("command is still not defined!!",'rpc' + name);
		};
		
		return this['rpc' + name].apply(this,[].concat([space || 0,Date.now(),user || 0,session || 0], [].slice.call(pars)));
	};

