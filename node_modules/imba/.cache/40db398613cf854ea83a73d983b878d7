function len$(a){
	return a && (a.len instanceof Function ? a.len() : a.length) || 0;
};
var Imba = require('imba'), _2 = Imba.createTagCache, _1 = Imba.createElement;
var ROLES = require('../scrimba/protocol').ROLES;

var Tab = Imba.defineTag('Tab', 'a', function(tag){
	tag.prototype.alert = function(v){ return this._alert; }
	tag.prototype.setAlert = function(v){ this._alert = v; return this; };
	
	tag.prototype.badge = function (){
		return this.data().badge || (this.data().source && len$(this.data().source));
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).flagIf('disabled',(this.data().disabled)).setFlag(-1,this.data().slug).flagIf('empty',(this.badge() == 0)).setChildren([
			($[0] || _1('b',$,0,this)).setContent(this.data().title,3),
			($[1] || _1('span',$,1,this).flag('badge')).setContent(this.badge(),3),
			this.alert() ? (
				($[2] || _1('span',$,2,this).flag('badge').flag('alert')).setContent(this.alert(),3)
			) : void(0)
		],1).synced();
	};
})
exports.Tab = Tab;


var Aside = Imba.defineTag('Aside', 'aside')
exports.Aside = Aside;

var Sheet = Imba.defineTag('Sheet', 'article', function(tag){
	tag.prototype.state = function(v){ return this._state; }
	tag.prototype.setState = function(v){ this._state = v; return this; };
	
	tag.prototype.render102 = function (){
		var $ = ($_ = this.$).$render102$ || ($_.$render102$ = _2(this));
		if (this._mounted && (Date.now() - this._mounted) > 1000) { return false };
		return this.$open('render1020').setChildren($[0] || _1('div',$,0,this),2).synced();
	};
})
exports.Sheet = Sheet;

var Main = Imba.defineTag('Main', 'main', function(tag){
	tag.prototype.collection = function(v){ return this._collection; }
	tag.prototype.setCollection = function(v){ this._collection = v; return this; };
	tag.prototype.key = function(v){ return this._key; }
	tag.prototype.setKey = function(v){ this._key = v; return this; };
	
	tag.prototype.items = function (){
		return this.collection() || ((this.key() && this.data()) ? this.data()[this.key()]() : []);
	};
	
	tag.prototype.render102 = function (){
		// dont do that with everything?!
		var $ = ($_ = this.$).$render102$ || ($_.$render102$ = _2(this));
		if (this._mounted && (Date.now() - this._mounted) > 1000) { return false };
		return this.$open('render1020').setChildren(
			$[0] || _1('aside',$,0,this)
		,2).synced();
	};
})
exports.Main = Main;

var Section = Imba.defineTag('Section', 'section', function(tag){
	
	tag.prototype.source = function (){
		return this.data().source;
	};
	
	tag.prototype.render = function (){
		return this.$open(0).synced();
		//	if source
		//		<ol.grid>
		//			for item in source
		//				<li> <EntityTile[item].tile>
	};
})
exports.Section = Section;

var Avatar = Imba.defineTag('Avatar', 'span', function(tag){
	tag.prototype.__s = {'default': 100,name: 's'};
	tag.prototype.s = function(v){ return this._s; }
	tag.prototype.setS = function(v){ this._s = v; return this; }
	tag.prototype._s = 100;
	
	tag.prototype.src = function (){
		if (this.data()) {
			return ("url('" + this.data().avatarUrl(this.s()) + "')");
		} else {
			return "none";
		};
	};
	
	tag.prototype.render = function (){
		return this.$open(0).flagIf('anon',(!(this.data()))).css('background-image',this.src()).synced();
	};
})
exports.Avatar = Avatar;

var Tile = Imba.defineTag('Tile', function(tag){
	
	tag.prototype.options = function(v){ return this._options; }
	tag.prototype.setOptions = function(v){ this._options = v; return this; };
	tag.prototype.context = function(v){ return this._context; }
	tag.prototype.setContext = function(v){ this._context = v; return this; };
	
	tag.prototype.url = function (){
		return "";
	};
	
	tag.prototype.beforeRender = function (){
		if (!(this.data() && this.data().v > 0 && (!this.data().CODE || this.data().CODE == 200))) { return false };
		return true;
	};
})
exports.Tile = Tile;

var Role = Imba.defineTag('Role', function(tag){
	
	var cache = {};
	
	tag.prototype.name = function (){
		if (this.data() & ROLES.OWNER) {
			return 'Owner';
		} else if (this.data() & ROLES.MAINTAINER) {
			return 'Maintainer';
		} else if (this.data() & ROLES.DEVELOPER) {
			return 'Developer';
		} else if (this.data() & ROLES.REPORTER) {
			return 'Reporter';
		} else if (this.data() & ROLES.GUEST) {
			return 'Guest';
		} else {
			return 'None';
		};
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).setChildren($[0] || _1('span',$,0,this),2).synced((
			$[0].setContent(this.name(),3)
		,true));
	};
})
exports.Role = Role;

var Invite = Imba.defineTag('Invite', 'form', function(tag){
	tag.prototype.__name = {'default': '',name: 'name'};
	tag.prototype.name = function(v){ return this._name; }
	tag.prototype.setName = function(v){ this._name = v; return this; }
	tag.prototype._name = '';
	
	tag.prototype.invite = function (){
		return this.log('invite ',this.name());
	};
	
	tag.prototype.onsubmit = async function (e){
		var v_;
		e.prevent();
		e.stop();
		this.invite();
		var res = await this.data().invite({username: this.name()});
		console.log("returned from invite!",res);
		return (this.setName(v_ = ''),v_);
	};
	
	tag.prototype.onkeydown = function (e){
		return true;
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).flag('bar').setChildren($.$ = $.$ || [
			_1('input',$,0,this).flag('flex').setType('text').setPlaceholder("GitHub username"),
			_1('button',$,1,this).flag('button').flag('primary').setType('submit').setText("Invite")
		],2).synced((
			$[0].bindData(this,'name',[]).end(),
			$[1].setDisabled((len$(this.name()) < 1)).end()
		,true));
	};
})
exports.Invite = Invite;
