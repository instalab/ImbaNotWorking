function len$(a){
	return a && (a.len instanceof Function ? a.len() : a.length) || 0;
};
var Imba = require('imba'), _1 = Imba.createElement;
var PaneWidget$ = require('./PaneWidget'), PaneWidget = PaneWidget$.PaneWidget, PaneView = PaneWidget$.PaneView, PaneTab = PaneWidget$.PaneTab;
var TerminalModel = require('./terminal/model').TerminalModel;

function TerminalSessionWidget(){ return PaneWidget.apply(this,arguments) };

Imba.subclass(TerminalSessionWidget,PaneWidget);
exports.TerminalSessionWidget = TerminalSessionWidget; // export class 
TerminalSessionWidget.register('terminalsession');

// readyState
// 
// connecting
// open
// closing
// closed

TerminalSessionWidget.option('name');
TerminalSessionWidget.option('ref');
TerminalSessionWidget.option('width',{'default': 100});
TerminalSessionWidget.option('height',{'default': 24});
TerminalSessionWidget.option('screenIndex',{'default': 0});
TerminalSessionWidget.option('caretRow');
TerminalSessionWidget.option('caretCol');
TerminalSessionWidget.option('readyState',{'default': 'connecting'});
TerminalSessionWidget.option('selections',{subjective: true,overridable: true,shared: true}); // ?

// overridable?
TerminalSessionWidget.option('scrollTop');
TerminalSessionWidget.option('scrollLeft');

TerminalSessionWidget.prototype.model = function (){
	return this._model || (this._model = new TerminalModel(this.width(),this.height()));
};

TerminalSessionWidget.prototype.mount_ = function (){
	TerminalSessionWidget.prototype.__super__.mount_.apply(this,arguments);
	return this.space().inspector().addPane(this,this.id());
};

TerminalSessionWidget.prototype.unmount_ = function (){
	TerminalSessionWidget.prototype.__super__.unmount_.apply(this,arguments);
	return this.space().inspector().removePane(this,this.id());
	// parentDir.entries.remove(self)
};

TerminalSessionWidget.prototype.node = function (){
	return this.space().terminal().node();
};

TerminalSessionWidget.prototype.tab = function (){
	let $ = this.$$ || (this.$$ = {});
	return this._tab || (this._tab = this._tab||_1(PaneTab,this).flag('tab').setName("Terminal")).setData(this).end();
};

TerminalSessionWidget.prototype.applyPatch = function (params){
	// log "applyPatch",params
	return this.model().applyPatch(params);
};

TerminalSessionWidget.prototype.revertPatch = function (params){
	// log "revertPatch",params
	return this.model().revertPatch(params);
};

TerminalSessionWidget.prototype.screen = function (){
	return this.model().screens()[this.screenIndex()];
};

TerminalSessionWidget.prototype.write = function (stdout){
	var machine_;
	return (machine_ = this.space().branch().machine()) && machine_.terminalSessionWrite  &&  machine_.terminalSessionWrite(this,stdout);
};

TerminalSessionWidget.prototype.autoScrollTop = function (){
	let lineCount = len$(this.screen().lines());
	let topLine = lineCount - this.screen().height();
	return topLine * this.space().terminal().lineHeight();
};
