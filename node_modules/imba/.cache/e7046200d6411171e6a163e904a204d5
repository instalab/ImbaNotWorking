var Imba = require('imba'), _1 = Imba.createElement;
var uxa$ = require('uxa'), Dialog = uxa$.Dialog, TextField = uxa$.TextField, SelectField = uxa$.SelectField, Button = uxa$.Button;
var MediaRecordingStats = require('./MediaRecordingStats').MediaRecordingStats;
var MediaRecording = require('../util/MediaRecording').MediaRecording;
var AudioManager = require('../util/AudioManager').AudioManager;
var MicrophonePicker = require('./MicrophonePicker').MicrophonePicker;

var util = require('../util');

var UserMediaDialog = Imba.defineTag('UserMediaDialog', Dialog, function(tag){
	tag.prototype.promise = function(v){ return this._promise; }
	tag.prototype.setPromise = function(v){ this._promise = v; return this; };
	tag.prototype.options = function(v){ return this._options; }
	tag.prototype.setOptions = function(v){ this._options = v; return this; };
	
	tag.prototype.setup = function (){
		this._options = {
			setup: {}
		};
		let defaults = {
			mic: {
				channelCount: 1,
				deviceId: 'default',
				autoGainControl: true
			}
		};
		this._options.setup = this.api().localStore().getobj('join:defaults',defaults);
		return this;
	};
	
	tag.prototype.mount = function (){
		this.schedule({events: true,interval: 1000});
		return this;
	};
	
	tag.prototype.submitLabel = function (){
		return "Save";
	};
	
	tag.prototype.body = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		return (t0 = this._body = this._body||(t0=_1('div',this)).flag('body').setContent([
			_1('h2',t0.$,'A',t0).setText("Join broadcast"),
			_1(MicrophonePicker,t0.$,'B',t0).flag('mb-md')
		],2)).end((
			t0.$.B.bindData(this.options().setup,'mic').end()
		,true));
	};
	
	tag.prototype.unmount = function (){
		if (this.promise()) {
			this.promise().resolve(null);
			this.setPromise(null);
		};
		return tag.prototype.__super__.unmount.apply(this,arguments);
	};
	
	tag.prototype.onuxasubmit = async function (e,pars){
		// e.prevent.stop
		var options = this.options();
		this.api().localStore().setobj('join:defaults',options.setup);
		console.log("join with options",options);
		
		try {
			var stream = await this.api().media().getUserMedia({audio: options.setup.mic});
			this.api().peer().rtc().setMedia(stream);
			if (this.promise()) {
				this.promise().resolve(stream);
				this.setPromise(null);
			};
			this.hide();
		} catch (e) {
			console.log("failed getUserMedia",e);
		};
		return;
	};
})
exports.UserMediaDialog = UserMediaDialog;
