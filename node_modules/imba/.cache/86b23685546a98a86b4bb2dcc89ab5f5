function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba');
// externs;



function Store(){ };

Store.prototype.setItem = function (k,v){
	return this[k] = v;
};

Store.prototype.getItem = function (k){
	return this[k];
};

Store.prototype.removeItem = function (k){
	var v_;
	return (((v_ = this[k]),delete this[k], v_));
};

if (true) {
	// WARNING real localStorage will stringify values
	var localStorage = new Store();
	var sessionStorage = new Store();
};

function StoreWrapper(prefix,store){
	this._prefix = prefix || '';
	
	if (store == 'temporary') {
		store = new Store();
	} else {
		store || (store = localStorage);
	};
	
	this._store = store;
	this;
};

exports.StoreWrapper = StoreWrapper; // export class 
StoreWrapper.prototype.clear = function (){
	if (!this._prefix) {
		return this._store.clear();
	};
	
	for (let i = 0, items = iter$(Object.keys(this._store)), len = items.length, key; i < len; i++) {
		key = items[i];
		if (key.startsWith(this._prefix)) {
			this._store.removeItem(key);
		};
	};
	return this;
};

StoreWrapper.prototype.set = function (key,value){
	if (this._store) {
		var strkey = this._prefix + this.serializeKey(key);
		var strvalue = this.serialize(value);
		try {
			this._store.setItem(strkey,strvalue);
		} catch (e) { };
	};
	return value;
};

StoreWrapper.prototype.get = function (key){
	var val = this._store ? this._store.getItem(this._prefix + this.serializeKey(key)) : null;
	return val;
};

StoreWrapper.prototype.getset = function (key,value){
	return this.set(key,this.get(key) || value);
};

StoreWrapper.prototype.setnx = function (key,value){
	var val = this.get(key);
	if (!val) { this.set(key,value) };
	return val || value;
};

StoreWrapper.prototype.getnum = function (key){
	return parseFloat(this.get(key) || 0);
};

StoreWrapper.prototype.getobj = function (key,fallback){
	if(fallback === undefined) fallback = null;
	let val = JSON.parse(this.get(key) || 'null');
	return (val == null) ? fallback : val;
};

StoreWrapper.prototype.setobj = function (key,value){
	return this.set(key,JSON.stringify(value));
};

StoreWrapper.prototype.del = function (key){
	return this._store ? this._store.removeItem(this._prefix + this.serializeKey(key)) : null;
};

StoreWrapper.prototype.inc = function (key,amount){
	if(amount === undefined) amount = 1;
	let val = this.getnum(key) + amount;
	this.set(key,val);
	return val;
};

StoreWrapper.prototype.serializeKey = function (key){
	return (typeof key == 'object') ? JSON.stringify(key) : key;
};

StoreWrapper.prototype.serialize = function (value){
	var val = (typeof value == 'object') ? JSON.stringify(value) : value;
	return val;
};

StoreWrapper.prototype.deserialize = function (value){
	return value;
};

function LocalStore(){ return StoreWrapper.apply(this,arguments) };

Imba.subclass(LocalStore,StoreWrapper);
exports.LocalStore = LocalStore; // export class 


function TempStore(){ return StoreWrapper.apply(this,arguments) };

Imba.subclass(TempStore,StoreWrapper);
exports.TempStore = TempStore; // export class 



function SessionStore(prefix,store){
	this._prefix = prefix || '';
	try {
		this._store = store || sessionStorage;
	} catch (e) { };
	this;
};
Imba.subclass(SessionStore,StoreWrapper);
exports.SessionStore = SessionStore; // export class 

