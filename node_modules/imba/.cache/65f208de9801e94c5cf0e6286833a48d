function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _2 = Imba.createTagList, _1 = Imba.createElement;
var uxa$ = require('uxa'), Dialog = uxa$.Dialog, TextField = uxa$.TextField, TextArea = uxa$.TextArea, Button = uxa$.Button;
var Select = require('./Controls').Select;
var PrivacyField = require('./PrivacyField').PrivacyField;

Imba.extendTag('iframe', function(tag){
	tag.prototype.allowfullscreen = function(v){ return this.getAttribute('allowfullscreen'); }
	tag.prototype.setAllowfullscreen = function(v){ this.setAttribute('allowfullscreen',v); return this; };
});

var EmbedTextarea = Imba.defineTag('EmbedTextarea', 'textarea', function(tag){
	tag.prototype.castId = function (){
		return this.data();
	};
	
	tag.prototype.url = function (){
		return ("https://scrimba.com/cast/" + this.castId() + ".embed");
	};
	
	tag.prototype.embedHTML = function (){
		var t0, embed;
		return this._embedHTML || (this._embedHTML = true && (
			embed = (t0 = (t0=_1('div')).css('position',"relative").setContent(
				t0.$.A || _1('iframe',t0.$,'A',t0).css('border',0).css('position',"absolute").css('width','100%').css('height','100%').setAllowfullscreen(true)
			,2)).css('paddingBottom',("" + (9 / 16 * 100) + "%")).end((
				t0.$.A.setSrc(this.url()).end()
			,true)),
			embed.dom().outerHTML
		));
	};
	
	tag.prototype.ontap = function (){
		return this.dom().select();
	};
	
	tag.prototype.render = function (){
		this.css('font-family','monospace');
		this.setValue(this.embedHTML());
		return this.setAttribute('readonly',true);
	};
});


var Tagger = Imba.defineTag('Tagger', function(tag){
	
	tag.prototype.newItem = function(v){ return this._newItem; }
	tag.prototype.setNewItem = function(v){ this._newItem = v; return this; };
	
	tag.prototype.remItem = function (item){
		let idx = this.data().indexOf(item);
		if (idx >= 0) {
			this.data().splice(idx,1);
		};
		return this;
	};
	
	tag.prototype.addItem = function (e){
		let value = '#' + e.target().value();
		this.data().push(value);
		e.target().setValue('');
		return this;
	};
	
	// link to DataProxy?
	tag.prototype.render = function (){
		var self = this, $ = this.$;
		return self.$open(0).flag('TextField').setChildren([
			(function tagLoop($0) {
				var t0;
				for (let i = 0, items = iter$(self.data()), len = $0.taglen = items.length, item; i < len; i++) {
					item = items[i];
					(t0 = $0[i] || (t0=_1('div',$0,i)).flag('hashtag').setContent([
						_1('span',t0.$,'A',t0),
						_1('span',t0.$,'B',t0).flag('rem').dataset('icon','mcross')
					],2)).end((
						t0.$.A.setContent(item,3),
						t0.$.B.on$(0,['tap',['remItem',item]],self).end()
					,true));
				};return $0;
			})($[0] || _2($,0)),
			$[1] || _1('input',$,1,self).flag('input').setPlaceholder("Add...").on$(0,['keydown','enter','prevent','addItem'],self),
			$[2] || _1('span',$,2,self).flag('after'),
			$[3] || _1('hr',$,3,self).flag('static'),
			$[4] || _1('hr',$,4,self).flag('anim')
		],1).synced((
			$[1].end()
		,true));
	};
});


var CastDialog = Imba.defineTag('CastDialog', Dialog, function(tag){
	tag.prototype.__data = {watch: 'dataDidSet',name: 'data'};
	tag.prototype.data = function(v){ return this._data; }
	tag.prototype.setData = function(v){
		var a = this.data();
		if(v != a) { this._data = v; }
		if(v != a) { this.dataDidSet && this.dataDidSet(v,a,this.__data) }
		return this;
	};
	tag.prototype.hashtags = function(v){ return this._hashtags; }
	tag.prototype.setHashtags = function(v){ this._hashtags = v; return this; };
	
	tag.prototype.dataDidSet = function (){
		var v_;
		return (this.setHashtags(v_ = (this.data().hashtags || []).slice(0)),v_);
	};
	
	tag.prototype.mount = function (){
		return this.schedule({events: true});
	};
	
	tag.prototype.body = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		return (t0 = this._body = this._body||(t0=_1('div',this)).flag('body').setContent([
			_1(TextField,t0.$,'A',t0).setType('text').setName('title').setLabel('Title').setRequired(true).setPlaceholder('Untitled cast').setAutocomplete("off"),
			_1(Tagger,t0.$,'B',t0),
			_1(TextArea,t0.$,'C',t0).flag('mb-md').setName('description').setLabel('Description').setDesc('Short description (markdown supported)'),
			_1(PrivacyField,t0.$,'D',t0) // are we sure?
		],2)).end((
			t0.$.A.end(),
			t0.$.B.bindData(this,'hashtags',[]).end(),
			t0.$.C.end(),
			t0.$.D.bindData(this,'data',[]).end()
		,true));
	};
	
	tag.prototype.onuxasubmit = function (e){
		var self = this;
		return self.uxa().queue().add(200,async function() {
			var vals = self.formData();
			self.log('onsubmit',vals,self.hashtags());
			vals.hashtags = self.hashtags();
			// WARN must validate which fields one can update?
			return await self.api().db().get(self.data().id).update(vals);
		});
	};
})
exports.CastDialog = CastDialog;
