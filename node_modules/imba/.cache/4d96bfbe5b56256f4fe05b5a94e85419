var self = {};
var env = require('../env');
var db = require('../server/db').db;
var DB = require('../store/db').DB;

var ROLEFLAGS = require('../scrimba/protocol').ROLEFLAGS;

exports.lookup = self.lookup = async function (id){
	return await db.table('entities').where({ref: id}).first();
};

exports.update = self.update = async function (data){
	var rows = await db.table('entities').update(data).returning('*').where({id: data.id});
	return rows[0];
};

self.assign = function (base,patch){
	var dest = Object.assign({},base,patch);
	for (let i = 0, items = ['data','git','github','roles'], len = items.length, key; i < len; i++) {
		key = items[i];
		if (base[key] && patch[key]) {
			dest[key] = Object.assign({},base[key],patch[key]);
		};
	};
	return dest;
};



exports.upsert = self.upsert = async function (data,adapter){
	if(adapter === undefined) adapter = db;
	let entity;
	console.log("upsert",data);
	
	if (data.id) {
		entity = await adapter.table('entities').where({id: data.id}).first();
	} else if (data.ref) {
		entity = await adapter.table('entities').where({ref: data.ref}).first();
	};
	
	if (entity) {
		data = self.assign(entity,data);
		// console.log "updating entity data!!",data,entity:id
		// await adapter.table('entities').update(assign(entity,data)).where(id: entity:id)
		// data:id = entity:id
	};
	// else
	//	let res = await adapter.table('entities').returning('id').insert(data)
	//	data:id = res[0]
	
	return db.put('entities',data);
	// return adapter.table('entities').where(id: data:id).first
};

exports.entityIdForUid = self.entityIdForUid = async function (uid){
	let user = await db.table('users').where({id: uid}).first();
	
	if (user && user.eid) {
		return user.eid; // db.table('entities').where(id: user:eid)
	};
	
	let data = {
		type: user.is_org ? 'org' : 'user',
		ref: user.username,
		uid: user.id,
		visibility: 0, // ROLEFLAGS.GUEST
		data: {name: user.name}
	};
	
	let entity = await self.upsert(data);
	// await link(uid,entity:id,role: ROLES.OWNER)
	// update linke
	await db.table('users').where({id: uid}).update({eid: entity.id});
	return entity.id;
};

// export def setRole uid, eid, role
// 	link(uid,eid,{role: role})

exports.link = self.link = async function (uid,eid,params){
	var v_;
	if (!uid) { return };
	var link = await db.table('links').where({uid: uid,eid: eid}).first();
	
	if (params) {
		if (link) {
			(((v_ = params.id),delete params.id, v_));
			// how do we update json?
			// fast equality check
			// for own k,v of params
			//	if v == link[]
			// check if params exist
			await db.table('links').update(params).where({id: link.id});
		} else {
			params.id = ("l-" + uid + "-" + eid);
			params.uid = uid;
			params.eid = eid;
			await db.table('links').insert(params);
		};
		
		link = await db.table('links').where({uid: uid,eid: eid}).first();
		console.log('return from link',link);
	};
	return link;
};
