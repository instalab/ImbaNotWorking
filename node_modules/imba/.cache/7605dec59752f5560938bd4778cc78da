function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _2 = Imba.createTagList, _1 = Imba.createElement;
var protocol$ = require('../protocol'), ACTION = protocol$.ACTION, CAST = protocol$.CAST, LAYOUTMASK = protocol$.LAYOUTMASK;

var uxa$ = require('uxa'), Icon = uxa$.Icon, Menu = uxa$.Menu;
var SidebarPanel$ = require('./SidebarPanel'), SidebarPanel = SidebarPanel$.SidebarPanel, SidebarEntry = SidebarPanel$.SidebarEntry;

var SPATH = CAST.EXPLORER_PANEL + 'S$';

var EntryHead = Imba.defineTag('EntryHead', function(tag){
	
	tag.prototype.build = function (){
		return this.setAttribute('draggable',true);
	};
	
	tag.prototype.ondragstart = function (e){
		var dt = e.event().dataTransfer;
		return e.event().dataTransfer.setData("scrimba/widget",("" + (this.data().id())));
	};
	
	tag.prototype.layoutMask = function (){
		return LAYOUTMASK.SCALED;
	};
});

var Entry = Imba.defineTag('Entry', SidebarEntry, function(tag){
	tag.prototype.__level = {'default': 0,name: 'level'};
	tag.prototype.level = function(v){ return this._level; }
	tag.prototype.setLevel = function(v){ this._level = v; return this; }
	tag.prototype._level = 0;
	
	tag.prototype.rename = function (){
		var name = window.prompt("Rename",this.name());
		return this.data().rename(name);
	};
	
	tag.prototype.remove = function (e){
		if (window.confirm(("Are you sure you want to delete " + (this.data().path()) + "?"))) {
			return this.data().rm();
		};
	};
	
	tag.prototype.name = function (){
		return this.data().name();
	};
	
	tag.prototype.icon = function (){
		let $ = this.$$ || (this.$$ = {});
		return (this._icon = this._icon||_1('i',this).flag('icon')).setFlag(0,this.data().ext());
	};
	
	tag.prototype.head = function (){
		// should measure-text
		let $ = this.$$ || (this.$$ = {}), t0;
		let long = this.name().length + (this.level() * 2) > 28;
		let ext = this.data().ext();
		// let shortname = (ext ? data.name.slice(0,-ext:length - 1) : data.name)
		
		return (t0 = this._head = this._head||(t0=_1(EntryHead,this)).flag('head')).bindData(this,'data',[]).setSref((SPATH + this.data().id())).flagIf('lazy',(this.data().isLazy())).flagIf('unsaved',(this.data().isUnsaved())).setContent([
			this.icon(),
			long ? Imba.static([
				(t0.$.A || _1('div',t0.$,'A',t0).flag('name').flag('long')).setTitle(this.name()).setContent((ext ? this.name().slice(0,-ext.length - 1) : this.name()),3).end(),
				(t0.$.B || _1('div',t0.$,'B',t0).flag('ext')).setText("." + ext)
			],2,1) : (
				(t0.$.C || _1('div',t0.$,'C',t0).flag('name')).setContent(this.name(),3)
			)
		],1).end();
	};
	
	tag.prototype.render = function (){
		return this.$open(0).setChildren(this.head(),3).synced();
	};
	
	tag.prototype.oncontextmenu = function (e){
		var t0;
		e.prevent().stop();
		
		return this._head.uxa().open((t0 = (t0=_1(Menu)).flag('narrow').setContent([
			_1('div',t0.$,'A',t0).flag('item').on$(0,['tap','rename'],this).setText('Rename...'),
			_1('div',t0.$,'B',t0).flag('item').on$(0,['tap','remove'],this).setText('Delete file')
		],2)).end());
	};
});

var FileEntry = Imba.defineTag('FileEntry', Entry, function(tag){
	
	tag.prototype.ontap = function (e){
		var self = this;
		e.halt();
		// rather set the value on primaryEditor -- this is more correct
		self.data().space().primaryEditor().setFile(self.data());
		// data.space.agent.file = data
		return setTimeout(function() {
			if (self.data().space().isEditing()) {
				return self.data().space().view().editor().focus();
			};
		},0);
	};
	
	tag.prototype.sontouchstart = function (t){
		return this;
	};
	
	tag.prototype.sontouchend = function (t){
		return this;
	};
	
	tag.prototype.render = function (){
		this.flag('active',this.data().clientIsShowing());
		this.flag('active-agent',this.data().agentIsShowing(this.data().space().me().follows()));
		return tag.prototype.__super__.render.apply(this,arguments);
	};
});

var ChangeEntry = Imba.defineTag('ChangeEntry', Entry, function(tag){
	
	tag.prototype.ontap = function (e){
		e.stop();
		return this.toggle();
	};
	
	tag.prototype.entries = function (){
		return this.data().entries().toArray().slice().sort(function(a,b) {
			return (a.TYPE == b.TYPE) ? (((a.name() > b.name()) ? 1 : (-1))) : (((a.TYPE == 'dir') ? (-1) : 1));
		});
	};
	
	tag.prototype.name = function (){
		return this.data().newPath || this.data().oldPath;
	};
	
	tag.prototype.oncontextmenu = function (e){
		var t0;
		e.prevent().stop();
		
		return this._head.uxa().open((t0 = (t0=_1(Menu)).flag('narrow').setContent([
			_1('div',t0.$,'A',t0).flag('item').on$(0,['tap','newfile'],this).setText("New File"),
			_1('div',t0.$,'B',t0).flag('item').on$(0,['tap','rename'],this).setText("Rename..."),
			_1('hr',t0.$,'C',t0),
			_1('div',t0.$,'D',t0).flag('item').on$(0,['tap','newdir'],this).setText('New Folder...'),
			_1('div',t0.$,'E',t0).flag('item').on$(0,['tap','remove'],this).setText('Delete Folder')
		],2)).end());
	};
	
	
	tag.prototype.head = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		return (t0 = this._head = this._head||(t0=_1(EntryHead,this)).flag('head').setContent([ //  sref=(SPATH + 10)
			this._icon = this._icon||_1('i',t0).flag('icon').flag('folder').flag('toggler'),
			_1('div',t0.$,'A',t0).flag('name')
		],2)).bindData(this,'data',[]).end((
			t0.$.A.setContent(this.name(),3)
		,true));
	};
	
	tag.prototype.render = function (){
		return this.$open(0).setChildren(
			this.head()
		,3).synced();
	};
});

var RepoEntry = Imba.defineTag('RepoEntry', Entry, function(tag){
	
	tag.prototype.name = function (){
		return "Workspace";
	};
	
	tag.prototype.ontap = function (e){
		return e.halt();
	};
	
	tag.prototype.diffs = function (){
		return this.data().diffs().HEAD;
	};
	
	tag.prototype.render = function (){
		var $ = this.$, self = this;
		return self.$open(0).setChildren([
			self.head(),
			self._body = self._body||_1('div',self).flag('body')
		],1).synced((
			self._body.setContent(
				(function tagLoop($0) {
					for (let i = 0, items = iter$(self.diffs()), len = $0.taglen = items.length; i < len; i++) {
						($0[i] || _1(ChangeEntry,$0,i)).setData(items[i]).end();
					};return $0;
				})($[0] || _2($,0,self._body))
			,4)
		,true));
	};
});

var SourceControlPanel = Imba.defineTag('SourceControlPanel', SidebarPanel, function(tag){
	
	tag.prototype.__droptarget = {watch: 'droptargetDidSet',name: 'droptarget'};
	tag.prototype.droptarget = function(v){ return this._droptarget; }
	tag.prototype.setDroptarget = function(v){
		var a = this.droptarget();
		if(v != a) { this._droptarget = v; }
		if(v != a) { this.droptargetDidSet && this.droptargetDidSet(v,a,this.__droptarget) }
		return this;
	};
	
	tag.prototype.oncontextmenu = function (e){
		e.prevent().stop();
		return this.showMenu();
	};
	
	tag.prototype.focusWidgetForNode = function (){
		return this.space().primaryEditor();
	};
	
	tag.prototype.showMenu = function (){
		return this;
	};
	
	tag.prototype.ondragenter = function (e){
		var v_;
		e.prevent().stop();
		try {
			var dir = e.event().target.closest('.DirEntry');
			return (this.setDroptarget(v_ = dir ? dir._tag : this._main),v_);
		} catch (e) { };
	};
	
	
	tag.prototype.ondragover = function (e){
		return e.prevent().stop();
	};
	
	tag.prototype.ondragleave = function (e){
		var v_;
		e.prevent().stop();
		if (!this.dom().contains(e.event().relatedTarget)) {
			return (this.setDroptarget(null),null);
		};
	};
	
	tag.prototype.ondrop = async function (e){
		var self = this;
		if (!(self.droptarget())) { return };
		
		var dd = e.event().dataTransfer;
		var target = self.droptarget();
		e.prevent().stop();
		
		self.setDroptarget(null);
		
		var promises = [];
		var moveWidget = null;
		var entries = [];
		
		for (let i = 0, items = iter$(dd.items), len = items.length, item; i < len; i++) {
			item = items[i];
			let node = item;
			self.log("ondrop",item); // ,item.getAsString
			
			if (item.type == "scrimba/widget") {
				promises.push(new Promise(function(resolve) {
					return item.getAsString(function(str) {
						let widget = self.space().__lookup(str);
						self.log("found widget",str);
						moveWidget = widget;
						return resolve(widget);
					});
				}));
				continue;
				// entries.push(space.__lookup())
			};
			
			if (item.webkitGetAsEntry) {
				node = item.webkitGetAsEntry();
				console.log("webkit entry",node);
			};
			
			if (node.isDirectory || node.isFile) {
				entries.push(node);
			};
		};
		
		await Promise.all(promises);
		// log entries
		// this drop consisted of local moves(!)
		if (moveWidget) {
			moveWidget.moveTo(target.data());
		};
		
		return self.addEntriesToDirectory(target.data(),entries);
	};
	
	tag.prototype.droptargetDidSet = function (curr,prev){
		var $1, $2;
		($1 = curr) && $1.flag  &&  $1.flag('droptarget');
		return ($2 = prev) && $2.unflag  &&  $2.unflag('droptarget');
	};
	
	tag.prototype.beforeRender = function (){
		let val = this.space().changed(['sidebar','fs','widget'],this);
		return val;
	};
	
	tag.prototype.render = function (){
		var $ = this.$, self = this;
		return self.$open(0).setSref(self.data().id()).setChildren([
			self._header = self._header||_1('header',self).flag('header').setContent([
				_1('div',$,0,self._header).flag('title').setText("Changes"),
				_1('div',$,1,self._header).flag('tools').setContent($[2] || _1('div',$,2,1).flag('tool').dataset('icon','mcog').on$(0,['tap','showMenu'],self),2)
			],2),
			(function tagLoop($0) {
				for (let i = 0, items = iter$(self.data().fs().repos()), len = $0.taglen = items.length; i < len; i++) {
					($0[i] || _1(ChangeEntry,$0,i)).end();
				};return $0;
			})($[3] || _2($,3))
		//
		// <RootEntry[space.fs]@main>
		],1).synced((
			$[2].end()
		,true));
	};
})
exports.SourceControlPanel = SourceControlPanel;
