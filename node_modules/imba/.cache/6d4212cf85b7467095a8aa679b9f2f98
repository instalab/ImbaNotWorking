function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _1 = Imba.createElement;
var protocol$ = require('../protocol'), WIDGET = protocol$.WIDGET, SCON = protocol$.SCON, ACTION = protocol$.ACTION, WIDGET_TYPE_MAP = protocol$.WIDGET_TYPE_MAP;
var Widgets = require('./widgets').Widgets;
var WidgetOptions = require('./WidgetOptions').WidgetOptions;
var StreamAction = require('../core/StreamAction').StreamAction;

var F = WIDGET.FLAGS;

function Widget(owner,data,action){
	this.__ = {};
	this._owner = owner;
	this._id = data.id;
	this._data = data;
	this._state = {v: 0};
	this._event = action;
	this._branch = action && action.branch() || this.space().branch();
	this._isLocal = !(this.event()) || this.event().LOCAL;
	this.setup();
	this;
};

exports.Widget = Widget; // export class 
Widget.prototype.id = function(v){ return this._id; }
Widget.prototype.setId = function(v){ this._id = v; return this; };
Widget.prototype.owner = function(v){ return this._owner; }
Widget.prototype.setOwner = function(v){ this._owner = v; return this; };
Widget.prototype.data = function(v){ return this._data; }
Widget.prototype.setData = function(v){ this._data = v; return this; };
Widget.prototype.state = function(v){ return this._state; }
Widget.prototype.setState = function(v){ this._state = v; return this; };
Widget.prototype.localData = function(v){ return this._localData; }
Widget.prototype.setLocalData = function(v){ this._localData = v; return this; };
Widget.prototype.isLocal = function(v){ return this._isLocal; }
Widget.prototype.setIsLocal = function(v){ this._isLocal = v; return this; };
Widget.prototype.event = function(v){ return this._event; }
Widget.prototype.setEvent = function(v){ this._event = v; return this; };

Widget.register = function (code,protocol){
	var WIDGET_TYPE_MAP_;
	WIDGET_TYPE_MAP[code] || (WIDGET_TYPE_MAP[code] = this);
	return Widgets.register(code,this);
};

Widget.load = function (owner,data,e){
	return owner.widgets().get(data.id) || owner.widgets().create(data.type,data,e);
};

Widget.option = function (name,o){
	if(o === undefined) o = {};
	var proto = this.prototype;
	var props = proto._schema_;
	
	o.name = name;
	
	if (!proto.hasOwnProperty('_schema_')) {
		proto._schema_ = [];
		if (props) {
			for (let i = 0, items = iter$(props), len = items.length, item; i < len; i++) {
				item = items[i];
				this.option(item.name,item);
			};
		};
		props = proto._schema_;
	};
	
	if (props[name]) {
		props[name] = o;
		return;
	};
	
	props.push(o);
	props[name] = o;
	
	proto[name] = function(v) {
		return this.options().get(name,v);
	};
	
	proto[Imba.toCamelCase(("set-" + name))] = function(value) {
		this.options().set(name,value);
		return this;
	};
	
	return o;
};

Widget.register('widget');


Widget.prototype.id = function (){
	return this._id;
};

Widget.prototype.key = function (){
	return this.id();
};

Widget.prototype.v = function (){
	return this._options ? this._options._v : 0;
};

Widget.prototype.options = function (){
	return this._options || (this._options = new WidgetOptions(this));
};

// def optionsDidUpdate changes
// 	self

// helper
Widget.prototype.delay = function (name,time,blk){
	var self = this, $1;
	self._timeouts || (self._timeouts = {});
	clearTimeout(self._timeouts[name]);
	
	if (!blk) {
		blk = self._timeouts[$1 = name + 'FN'] || (self._timeouts[$1] = function() { return self[name](); });
	};
	
	if (time != -1) { self._timeouts[name] = setTimeout(blk,time) };
	return self;
};

Widget.prototype.async = function (name){
	var self = this;
	self._asyncTriggers || (self._asyncTriggers = {});
	var fn = self._asyncTriggers[name] || (self._asyncTriggers[name] = function() { return self[name](); });
	Imba.TICKER.add(fn);
	return self;
};

Widget.prototype.__uid = function (){
	if (this._owner == this.space()) {
		return this.id();
	};
	
	if (this._wid) {
		return this._wid;
	};
	
	var item = this;
	var uid = this._wid = [];
	while (item instanceof Widget){
		uid.unshift(item.id());
		item = item._owner;
	};
	return this._wid;
};

Widget.prototype.__lookup = function (ref,idx){
	if(idx === undefined) idx = 0;
	var item;
	if (ref instanceof Array) {
		item = this.getChildById(ref[idx++]);
		return (idx == ref.length) ? item : item.__lookup(ref,idx);
	};
	return this.getChildById(ref);
};

Widget.prototype.getChildById = function (id){
	return this.widgets().get(id);
};

Widget.prototype.setup = function (){
	return this;
};

Widget.prototype.space = function (){
	return this._space || (this._space = this._owner && this._owner.space());
};

Widget.prototype.branch = function (){
	return this._branch; // @event ? @event.@branch : @owner
};

Widget.prototype.root_ = function (){
	return this.space();
};

Widget.prototype.client = function (){
	return this.space().client();
};

Widget.prototype.api = function (){
	return this.space().api();
};

Widget.prototype.widgets = function (){
	return this._widgets || (this._widgets = new Widgets(this));
};

Widget.prototype.widget = function (){
	return this;
};

Widget.prototype.isEnabled = function (){
	return true;
};

Widget.prototype.getAttribute = function (key){
	return this.data()[key];
};

Widget.prototype.setAttribute = function (key,value){
	this.data()[key] = value;
	return this;
};
// does it really need to go through directly
Widget.prototype.configure = function (obj){
	this.options().set(obj);
	return this;
};

Widget.prototype.commitAdd = function (){
	return this.mount_();
	// owner.widgets.add(self,@id)
};

Widget.prototype.revertAdd = function (){
	return this.unmount_();
	// owner.widgets.remove(self)
};

Widget.prototype.commitDel = function (){
	return this.unmount_();
	// owner.widgets.remove(self)
};

Widget.prototype.revertDel = function (){
	return this.mount_();
	// owner.widgets.add(self,@id)
};

Widget.prototype.mount_ = function (){
	this.owner().widgets().add(this,this._id);
	return this;
};

Widget.prototype.unmount_ = function (){
	this.owner().widgets().remove(this);
	return this;
};

Widget.prototype.preload = function (){
	return this;
};

Widget.prototype.node = function (){
	return this._node || (this._node = (_1('div')));
};

Widget.prototype.title = function (){
	return 'Widget';
};

Widget.prototype.marker = function (){
	return null;
};

Widget.prototype.log = function (){
	var api_;
	var $0 = arguments, i = $0.length;
	var pars = new Array(i>0 ? i : 0);
	while(i>0) pars[i-1] = $0[--i];
	return (api_ = this.api()).log.apply(api_,[].concat(['widget:' + this.TYPE], [].slice.call(pars)));
	// console.log "Widget", *pars
};

// automatic marking after an option is changed
Widget.prototype.mark_ = function (val){
	this.space().mark_(val);
	return this;
};

Widget.prototype.push_ = function (code,params,o){
	if (!o) { o = this.state() };
	// create action here already?
	let action = this.action(code,params,o);
	return this.root_().__push(action,o);
};

Widget.prototype.batch_ = function (pairs,o){
	if (!o) { o = this.state() };
	for (let i = 0, items = iter$(pairs), len = items.length, item; i < len; i++) {
		item = items[i];
		this.push_(item[0],item[1],o);
	};
	return this;
};

Widget.prototype.action = function (code,params,state){
	return StreamAction.type(code).build(params,state,this);
};

Widget.prototype.append = function (agent,code,params,e){
	// console.log 'Widget.append',code
	return this;
};

Widget.prototype.apply = function (agent,code,op,action){
	return op ? false : true;
};

Widget.prototype.revert = function (agent,code,op,action){
	return op ? false : true;
};

// destroy the whole widget, teardown bindings, nodes etc.
// this is only called by the space if the initial WIDGET.CREATE
// event is removed from the stream
Widget.prototype.destroy_ = function (){
	// -- remove widgets - clear models and more
	console.warn("destroy widget");
	return this.owner().widgets().remove(this);
};

Widget.prototype.persist_ = function (){
	return this;
};

Widget.prototype.focus_ = function (){
	return this.space().agent() && ((this.space().agent().setFocus(this),this));
};

Widget.prototype.blur_ = function (){
	var v_;
	if (this.isFocused()) {
		console.log('try to blur widget!',this);
		return (this.space().agent().setFocus(v_ = this.space().agent().prevFocus()),v_);
	};
};

Widget.prototype.isFocused = function (){
	return this.space().agent() && this.space().agent().focus() == this;
};

Widget.prototype.toggleFocus = function (){
	return this.isFocused() ? this.blur_() : this.focus_();
};


Widget.prototype.serialize = function (o,state){
	var v_;
	this.persist_();
	var data = SCON.clone(this.data());
	(((v_ = data.state),delete data.state, v_)); // from server
	
	if (o.local && this._options && this._options._overrides) {
		for (let o1 = this._options._overrides, v, i = 0, keys = Object.keys(o1), l = keys.length, k; i < l; i++){
			k = keys[i];v = o1[k];data[k] = v;
		};
	};
	
	if (this._widgets) {
		data.widgets = this._widgets.map(function(item) { return item.serialize(o,item,state); }).filter(function(_0) { return _0; });
	};
	
	return data;
};

Widget.prototype.deserialize = function (o,state){
	// reset config options?
	var data = this.data();
	
	// default options should not be overridden
	for (let v, i = 0, keys = Object.keys(data), l = keys.length, k; i < l; i++){
		k = keys[i];v = data[k];if (o[k] === undefined) {
			o[k] = v;
		};
	};
	
	this._data = o; // is this correct though?
	if (this._options) { this._options._v++ };
	
	state.items.push(this);
	this.owner().widgets().add(this,this._id); // add to widgets list immediately
	if (o.widgets) { this.deserializeWidgets(o.widgets,state) };
	// console.log "widget deserialize!",self
	// deserialized
	return this;
};

Widget.prototype.deserializeWidgets = function (widgets,state){
	state.stack.push(this);
	for (let i = 0, items = iter$(widgets), len = items.length, item; i < len; i++) {
		item = items[i];
		Widget.load(this,item,state.event).deserialize(item,state);
	};
	return state.stack.pop();
};

Widget.prototype.deserialized = function (){
	this.commitAdd(); // what if it already existed?
	return this;
};

Widget.prototype.emit = function (name){
	var $0 = arguments, i = $0.length;
	var params = new Array(i>1 ? i-1 : 0);
	while(i>1) params[--i - 1] = $0[i];
	return Imba.emit(this,name,params);
};

Widget.prototype.on = function (name){
	var Imba_;
	var $0 = arguments, i = $0.length;
	var params = new Array(i>1 ? i-1 : 0);
	while(i>1) params[--i - 1] = $0[i];
	return Imba.listen.apply(Imba,[].concat([this,name], [].slice.call(params)));
};

Widget.prototype.un = function (name){
	var Imba_;
	var $0 = arguments, i = $0.length;
	var params = new Array(i>1 ? i-1 : 0);
	while(i>1) params[--i - 1] = $0[i];
	return Imba.unlisten.apply(Imba,[].concat([this,name], [].slice.call(params)));
};

Widget.prototype.createWidget = function (pkg,extra){
	// not really sure we need this many things
	if(extra === undefined) extra = {};
	pkg.id = this.widgets().getNextId();
	return this.push_(WIDGET.CREATE,[this.__uid(),pkg],extra);
};

Widget.prototype.isLocal = function (){
	return this._isLocal;
};

Widget.prototype.dispose = function (){
	return this;
};

Widget.prototype.valueOf = function (type){
	return this.__uid();
};

