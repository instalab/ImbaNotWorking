var Imba = require('imba'), _1 = Imba.createElement;
var ExplorerView = require('./ExplorerView').ExplorerView;
var DependenciesPanel = require('./DependenciesPanel').DependenciesPanel;
var SidebarPanel = require('./SidebarPanel').SidebarPanel;
var WidgetPanel = require('./WidgetPanel').WidgetPanel;

var SpaceMenu = require('./SpaceMenu').SpaceMenu;

// Should move somewhere else
var LogEntry = require('../widgets/browser/PlayerPage').LogEntry;
var ScrimbaGesture = require('../util/ScrimbaGesture').ScrimbaGesture;
// import CastDialog from '../../site/components/CastDialog'

var DebugView = require('./DebugView').DebugView;

var Resizer = Imba.defineTag('Resizer', function(tag){
	
	tag.prototype.ontouchstart = function (t){
		return ScrimbaGesture.wrap(t);
	};
	
	tag.prototype.onresizestart = function (g){
		return g._width = this.data().width();
	};
	
	tag.prototype.onresizeupdate = function (g){
		var v_;
		return (this.data().setWidth(v_ = g.clamp(100,g._width + g.dx(),320,10)),v_);
	};
});

var SidebarView = Imba.defineTag('SidebarView', function(tag){
	
	tag.prototype.setup = function (){
		var v_;
		return (this.setSref(v_ = this.data().id()),v_);
	};
	
	tag.prototype.space = function (){
		return this.data().space();
	};
	
	tag.prototype.showMenu = function (e){
		return e.uxa().open((_1(SpaceMenu)).bindData(this,'space',[]).end());
	};
	
	tag.prototype.editMetadata = function (){
		throw "not implemented";
		// uxa.open <CastDialog[space.model].modal formData=space.model>
	};
	
	tag.prototype.showShortcuts = function (){
		return this;
	};
	
	tag.prototype.goBack = function (){
		if (!this.space().view().isFullscreen()) {
			this.space().view().close();
		} else if (!this.space().option('referer')) {
			this.router().go('/?');
		} else {
			this.router().history().back();
		};
		return this;
	};
	
	tag.prototype.checkOver = function (){
		var self = this;
		var pointers = self.space().view().pointers();
		var over = pointers.some(function(pointer) {
			return !pointer.hidden() && pointer.target() && self.contains(pointer.target());
		});
		self.flag('autoshow',!!over);
		// go through pointers and see if any are over SidebarView and visible
		return self;
	};
	
	tag.prototype.ondragenter = function (e){
		return this._explorer.ondragenter(e);
	};
	
	tag.prototype.ondragover = function (e){
		return this._explorer.ondragover(e);
	};
	
	tag.prototype.ondragleave = function (e){
		if (!this.dom().contains(e.event().relatedTarget)) {
			return this._explorer.ondragleave(e);
		};
	};
	
	tag.prototype.ondrop = function (e){
		return this._explorer.ondrop(e);
	};
	
	tag.prototype.backText = function (){
		if (this.space().option('referer')) {
			return "Back";
		} else if (this.space().view().isFullscreen()) {
			return "Dashboard";
		} else {
			return "Back";
		};
	};
	
	tag.prototype.render = function (){
		var $ = this.$, t0;
		this.checkOver();
		return this.$open(0).setChildren($.$ = $.$ || [
			// <.top-shadow>
			_1(Resizer,$,0,this).flag('resizer').flag('right').dataset('gesture','resize'),
			t0 = (t0=_1('section',$,1,this)).flag('main')
		// <.field.range>
		// 	<input[space.view.contrastRatio] type='range' min=0 max=1 step=0.1>
		],2).synced((
			$[0].bindData(this,'data',[]).end(),
			$[1].setContent([
				($[2] || _1('header',$,2,1).flag('header').setContent([
					_1('div',$,3,2).flag('title').setContent(
						$[4] || _1('a',$,4,3).flag('back').on$(0,['tap','goBack'],this).setTip("Go to dashboard")
					// <span> "Project"
					,2),
					// if space.model.can(api.user,'edit')
					// 	<.tool.edit data-icon='medit' :tap.editMetadata>
					// <.tool.edit data-icon='keyboard' :tap.showShortcuts>
					_1('div',$,5,2).flag('tool').flag('cog').dataset('icon','mcog').on$(0,['tap','showMenu'],this)
				],2)).end((
					$[4].setContent(this.backText(),3).end(),
					$[5].end()
				,true)),
				(this._explorer = this._explorer||_1(ExplorerView,t0).flag('explorer')).bindData(this.space(),'explorerPanel',[]).setSpace(this.space()).end(),
				($[6] || _1(DependenciesPanel,$,6,t0)).bindData(this.space(),'dependenciesPanel',[]).setSpace(this.space()).end(),
				this.space().api().debug() ? (
					($[7] || _1(DebugView,$,7,t0)).bindData(this,'space',[]).end()
				) : void(0)
			],1)
		,true));
	};
})
exports.SidebarView = SidebarView;
