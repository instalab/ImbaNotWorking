var Imba = require('imba'), _1 = Imba.createElement;

var uxa$ = require('uxa'), Dialog = uxa$.Dialog, TextField = uxa$.TextField, TextArea = uxa$.TextArea, Button = uxa$.Button;
var PrivacyField = require('../../site/components/PrivacyField').PrivacyField;

var SaveDialog = Imba.defineTag('SaveDialog', Dialog, function(tag){
	
	tag.prototype.branch = function (){
		return this.data();
	};
	
	tag.prototype.model = function (){
		return this.branch().model();
	};
	
	tag.prototype.toggleBusy = function (){
		return this.toggleFlag('busy');
	};
	
	tag.prototype.loadFormData = function (){
		return this.applyFormData(this.model());
	};
	
	tag.prototype.submitLabel = function (){
		return this.model().isLocal() ? "Save note" : "Save";
	};
	
	tag.prototype.body = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		return (t0 = this._body = this._body||(t0=_1('div',this)).flag('body')).setContent(
			this.model().isLocal() ? Imba.static([
				(this._typefield = this._typefield||_1('input',t0).flag('typefield').setType('hidden').setName('type').setValue('note',1)).end(),
				(t0.$.A || _1(TextField,t0.$,'A',t0).flag('mb-md').setType('text').setName('title').setLabel('Title').setRequired(true).setPlaceholder('Untitled note')).end(),
				(t0.$.B || _1(PrivacyField,t0.$,'B',t0).setLabel("Privacy")).end()
			],2,1) : Imba.static([
				(t0.$.C || _1(TextField,t0.$,'C',t0).setType('text').setName('title').setLabel('Title').setRequired(true).setPlaceholder('Untitled fork')).end(),
				(t0.$.D || _1(TextArea,t0.$,'D',t0).flag('mb-md').setName('description').setLabel('Description').setDesc('Short description (markdown supported)')).end(),
				(t0.$.E || _1(PrivacyField,t0.$,'E',t0).setLabel("Privacy")).end()
			],2,2)
		,3);
	};
	
	tag.prototype.onuxasubmit = function (e,pars){
		var self = this;
		return self.uxa().queue().add(async function() {
			var branch;
			var local = self.branch().isLocal();
			return branch = await self.branch().save(pars);
			// if local
			//	# TODO Should not happen anymore!!
			//	branch.model.open(self)
			//	branch.leave
		});
	};
})
exports.SaveDialog = SaveDialog;
