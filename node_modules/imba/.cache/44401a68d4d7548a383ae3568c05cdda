var Imba = require('imba'), _1 = Imba.createElement;
var Notification = Imba.defineTag('Notification', function(tag){
	
	var current;
	tag.prototype.text = function(v){ return this._text; }
	tag.prototype.setText = function(v){ this._text = v; return this; };
	tag.prototype.sticky = function(v){ return this._sticky; }
	tag.prototype.setSticky = function(v){ this._sticky = v; return this; };
	
	tag.show = function (content,options){
		if(options === undefined) options = {};
		if (current) {
			current.hide();
			current = null;
		};
		let node = (content instanceof Notification) ? content : (((_1(Notification)).setData(options).setText(content).setSticky((options.sticky)).end()));
		let target = options.target || document.body;
		return Imba.mount(current = node,target._dom || target);
	};
	
	tag.prototype.setup = function (){
		this._data || (this._data = {});
		this.render();
		return this.autosize();
	};
	
	tag.prototype.target = function (){
		return this.data().target;
	};
	
	tag.prototype.mount = function (){
		var self = this;
		self.dom().offsetWidth;
		self.flag('show');
		if (!(self.sticky())) {
			return setTimeout(function() { return self.hide(); },self.data().duration || 2000);
		};
	};
	
	tag.prototype.autosize = function (){
		var Math_;
		let txt = this.dom().innerText;
		let lines = txt.split("\n");
		let longest = Math.max.apply(Math,lines.map(function(l) { return l.length; }));
		let ow = this.target() ? this.target().offsetWidth : window.innerWidth;
		let maxWidth = ow * 0.8; // container:offsetWidth * 0.8
		let minFont = 13;
		let maxFont = maxWidth / (longest * 0.6);
		// console.log "autosize?",txt,longest,maxFont
		let fontSize = Math.round(Math.min(Math.max(maxFont,minFont),30));
		this.css('fontSize',fontSize + 'px');
		this.flag('overflows',maxFont < minFont);
		return this;
	};
	
	tag.prototype.hide = function (){
		var self = this;
		if (self.hasFlag('hide')) { return };
		self.flag('hide');
		return setTimeout(function() {
			self.orphanize();
			if (current == self) { return current = null };
		},3000);
	};
	
	tag.prototype.ontap = function (){
		return this.hide();
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).flagIf('info',this.data().info).setFlag(-1,this.data().type).setFlag(-2,this.data().size).setChildren(
			$[0] || _1('div',$,0,this).flag('main').setContent([
				_1('div',$,1,0).flag('triangle'),
				_1('div',$,2,0).flag('item')
			],2)
		,2).synced((
			$[2].setNestedAttr('uxa','md',this.text()).end()
		,true));
	};
})
exports.Notification = Notification;

