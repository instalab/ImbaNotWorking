var Imba = require('imba'), _1 = Imba.createElement;
var Widget = require('./widget').Widget;

var TerminalView = require('../views/TerminalView').TerminalView;

function TerminalWidget(){ return Widget.apply(this,arguments) };

Imba.subclass(TerminalWidget,Widget);
exports.TerminalWidget = TerminalWidget; // export class 
TerminalWidget.register('terminal');

TerminalWidget.option('left');
TerminalWidget.option('top');
TerminalWidget.option('width');
TerminalWidget.option('height');
TerminalWidget.option('contentTop'); // relative to top
TerminalWidget.option('contentLeft'); // relative to left
TerminalWidget.option('fontSize');
TerminalWidget.option('lineHeight');

TerminalWidget.prototype.context = function (){
	return this.node().context();
};

// calculate pointer
TerminalWidget.prototype.posToScreen = function (agent,x,y,pars){
	
	// what about using the targetFrame for this?
	
	if(pars === undefined) pars = this._data;
	let ctx = this.context();
	if (!ctx) { return null };
	
	var scrollLeft = (pars.scrollLeft || ctx.scrollLeft() || 0);
	var scrollTop = (pars.scrollTop || ctx.scrollTop() || 0);
	
	var agentViewTop = pars.top + pars.contentTop;
	var agentViewLeft = pars.left + pars.contentLeft;
	
	var localViewTop = this.node().top() + this.node().contentTop();
	var localViewLeft = this.node().left() + this.node().contentLeft();
	
	// calculate the line,column for agent
	var agentX = x - (pars.left + pars.contentLeft) + scrollLeft;
	var agentY = y - (pars.top + pars.contentTop) + scrollTop;
	
	// var agentScrollTop = file.scrollTop # based on agent
	// var agentScrollLeft = file.scrollLeft # based on agent
	// if fontSize,lineHeight,scrollTop and scrollLeft are the same
	// skip converting
	// need to know if we have the same currentFile(!)
	
	var line = agentX;
	var scaleX = this.view().fontSize() / (pars.fontSize || 14);
	var scaleY = this.view().lineHeight() / (pars.lineHeight || 21);
	
	var localX = agentX * scaleX - this.view().scrollLeft();
	var localY = agentY * scaleY - this.view().scrollTop();
	
	// offset relative to scrollTop and scrollLeft
	// first calculate how many lines down 
	
	if (this.view()) {
		this.view()._agentPointerX = agentX * scaleX;
		this.view()._agentPointerY = agentY * scaleY;
	};
	
	// assuming the same position  round to 0.5?
	var spaceY = Math.round(localViewTop + localY);
	var spaceX = Math.round(localViewLeft + localX);
	
	// log 'agentToLocalPoint',point,pars,agentX,agentY,spaceX - point.x,spaceY - point.y
	
	return [spaceX,spaceY];
};

TerminalWidget.prototype.createSession = function (){
	var machine_;
	let session = this.space().createWidget(
		{type: 'terminalsession',
		name: 'Terminal',
		height: this.space().inspector().showLineCount()}
	).widget();
	(machine_ = this.space().branch().machine()) && machine_.connectTerminalSession  &&  machine_.connectTerminalSession(session);
	return session;
};

TerminalWidget.prototype.node = function (){
	let $ = this.$$ || (this.$$ = {});
	return this._node || (this._node = this._node||_1(TerminalView,this).flag('node')).setData(this).end();
};

TerminalWidget.prototype.view = function (){
	return this.node();
};
