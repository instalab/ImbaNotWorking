var Imba = require('imba');
var Widget = require('./widget').Widget;

function EditorWidget(){ return Widget.apply(this,arguments) };

Imba.subclass(EditorWidget,Widget);
exports.EditorWidget = EditorWidget; // export class 
EditorWidget.register('editor');

// option :renderWhitespace, default: no, overridable: yes

// layout related options
EditorWidget.option('left',{subjective: true});
EditorWidget.option('top',{subjective: true});
EditorWidget.option('width',{subjective: true});
EditorWidget.option('height',{subjective: true});
EditorWidget.option('contentTop',{subjective: true});
EditorWidget.option('contentLeft',{subjective: true});
EditorWidget.option('fontSize',{subjective: true});
EditorWidget.option('lineHeight',{subjective: true});

EditorWidget.option('renderIndentGuides',{'default': false});
EditorWidget.option('renderWhitespace',{'default': false,overridable: true});

EditorWidget.option('wordWrap',{'default': true,overridable: true});
EditorWidget.option('wordWrapColumn',{'default': 100,overridable: true});
EditorWidget.option('wrappingIndent',{'default': 'same',overridable: true});

EditorWidget.option('file',{type: 'widget',
subjective: true,
follow: true,
inheritable: true,
invalidate: 'backwards',
watch: 'fileDidSet',
mark: ['pointer','selections','fs']});

EditorWidget.prototype.view = function(v){ return this._view; }
EditorWidget.prototype.setView = function(v){ this._view = v; return this; };

EditorWidget.prototype.setup = function (){
	return this;
};

// should at some point store on EditorWidget instead
EditorWidget.prototype.currentFile = function (){
	console.warn("EditorWidget#currentFile deprecated");
	return this.space().agent().file();
};

EditorWidget.prototype.agentFile = function (){
	console.warn("EditorWidget#agentFile deprecated");
	return this.space().agent().file(false);
};

EditorWidget.prototype.hasFocus = function (){
	return this.space().agent().focus() == this || this.space().agent().focus(false) == this;
};

EditorWidget.prototype.posToScreen = function (agent,x,y){
	return this.agentToLocalPoint(agent,x,y);
};

EditorWidget.prototype.fileDidSet = function (value,prev,key){
	var $1;
	let file = value && this.space().__lookup(value);
	return ($1 = file) && $1.fetch  &&  $1.fetch();
};

// calculate pointer
EditorWidget.prototype.agentToLocalPoint = function (agent,x,y,pars){
	// what about using the targetFrame for this?
	if(pars === undefined) pars = this._data;
	let localFile = this.file();
	let agentFile = this.file(agent);
	
	// if we are seeing a different file than agent  return
	if (!localFile || localFile != agentFile) {
		// console.log "wrong file for pointer(!)"
		return null;
	};
	
	var agentPars = agent._data[this.id()] || this._data;
	// might be inheriting from something?
	
	// Backwards compatibility for when layout properties
	// were not subjective
	if (pars.left && pars.width) {
		pars = Object.assign(pars,agentPars);
	} else {
		pars = agentPars;
	};
	
	
	
	var agentViewTop = pars.top + pars.contentTop;
	var agentViewLeft = pars.left + pars.contentLeft;
	
	var localViewTop = this.view().top() + this.view().contentTop();
	var localViewLeft = this.view().left() + this.view().contentLeft();
	
	// calculate the line,column for agent
	var agentX = x - (pars.left + pars.contentLeft) + (pars.scrollLeft || localFile.scrollLeft(agent) || 0);
	var agentY = y - (pars.top + pars.contentTop) + (pars.scrollTop || localFile.scrollTop(agent) || 0);
	
	var line = agentX;
	var scaleX = this.view().fontSize() / (pars.fontSize || 14);
	var scaleY = this.view().lineHeight() / (pars.lineHeight || 21);
	
	var localX = agentX * scaleX - this.view().scrollLeft();
	var localY = agentY * scaleY - this.view().scrollTop();
	
	// offset relative to scrollTop and scrollLeft
	// first calculate how many lines down 
	
	if (this.view()) {
		this.view()._agentPointerX = agentX * scaleX;
		this.view()._agentPointerY = agentY * scaleY;
	};
	
	// assuming the same position  round to 0.5?
	var spaceY = Math.round(localViewTop + localY);
	var spaceX = Math.round(localViewLeft + localX);
	// console.log "agentToLocalPoint",pars,x,y,localX,localY,localViewTop,localViewLeft,pars
	// log 'agentToLocalPoint',point,pars,agentX,agentY,spaceX - point.x,spaceY - point.y
	
	return [spaceX,spaceY];
};
