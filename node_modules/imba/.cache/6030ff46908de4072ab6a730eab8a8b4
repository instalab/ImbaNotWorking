function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
function len$(a){
	return a && (a.len instanceof Function ? a.len() : a.length) || 0;
};
var Imba = require('imba');

var Widget = require('./widget').Widget;
var protocol$ = require('../protocol'), ACTION = protocol$.ACTION, SCON = protocol$.SCON;

var List = require('../util/List').List;

function DirWidget(){ return Widget.apply(this,arguments) };

Imba.subclass(DirWidget,Widget);
exports.DirWidget = DirWidget; // export class 
DirWidget.register('dir');

DirWidget.option('name');
DirWidget.option('parent',{type: 'widget'});
DirWidget.option('expanded');

DirWidget.prototype.setup = function (){
	return this;
};

DirWidget.prototype.entries = function (){
	return this._entries || (this._entries = new List(this,[]));
};

DirWidget.prototype.uri = function (){
	return ("" + (this.space().namespace()) + "/" + this.name());
};

DirWidget.prototype.ext = function (){
	return this.name().substr(this.name().lastIndexOf('.') + 1);
};

DirWidget.prototype.mkdir = function (name){
	var data = {
		name: name,
		parent: this.id(),
		type: 'dir'
	};
	
	var dir = this.space().createWidget(data).widget();
	return dir;
};

DirWidget.prototype.mkfile = function (name,o){
	
	if(o === undefined) o = {};
	var data = {
		name: name,
		parent: this.id(),
		type: 'file',
		body: o.body || ''
	};
	
	for (let v, i = 0, keys = Object.keys(o), l = keys.length, k; i < l; i++){
		k = keys[i];v = o[k];data[k] || (data[k] = v);
	};
	
	if (!name || this.entries().any(function(entry) { return entry.name() == name; })) {
		console.log(("file already exists " + name));
		return null;
	};
	
	return this.space().createWidget(data).widget();
};


DirWidget.prototype.rename = function (name){
	// should check with filesystem(!)
	if (!name || name == this.name() || this.parentDir().entries().any(function(f) { return f.name() == name; })) {
		return this;
	};
	
	return this.push_(ACTION.FS_RENAME,[this.id(),name]);
};

DirWidget.prototype.rm = function (){
	if (len$(this.entries())) {
		this.log("Directory is not empty");
		return this;
	};
	
	return this.push_(ACTION.FS_REMOVE,[this.id()]);
};


DirWidget.prototype.moveTo = function (target){
	// should be separate action, or just change parent?
	this.log("moveTo",target);
	if (target.path().indexOf(this.path()) == 0) {
		this.log("target is inside folder - not allowed");
		return this;
	};
	
	if (this.parent() == target) {
		return this;
	};
	
	this.push_(ACTION.FS_MOVE,[this.id(),target.id()]);
	return this;
};

DirWidget.prototype.mount_ = function (){
	DirWidget.prototype.__super__.mount_.apply(this,arguments);
	if (this.parentDir()) { return this.parentDir().entries().add(this) };
};

DirWidget.prototype.unmount_ = function (){
	DirWidget.prototype.__super__.unmount_.apply(this,arguments);
	if (this.parentDir()) { return this.parentDir().entries().remove(this) };
};

DirWidget.prototype.parentDir = function (){
	return this.parent() || this.space().fs();
};

DirWidget.prototype.path = function (){
	return ("" + (this.parentDir().path()) + "/" + this.name());
};

function FileSystemWidget(){ return DirWidget.apply(this,arguments) };

Imba.subclass(FileSystemWidget,DirWidget);
exports.FileSystemWidget = FileSystemWidget; // export class 
FileSystemWidget.register('fs');

FileSystemWidget.prototype.name = function (){
	return "project";
};

FileSystemWidget.prototype.path = function (){
	return "";
};

FileSystemWidget.prototype.rm = function (){
	return this;
};

FileSystemWidget.prototype.parentDir = function (){
	return null;
};

FileSystemWidget.prototype.find = function (path){
	for (let i = 0, items = iter$(this.space().widgets()), len = items.length, item; i < len; i++) {
		item = items[i];
		if (item.TYPE != 'file') { continue; };
		if (item.path() == path) {
			return item;
		};
	};
	return null;
};

FileSystemWidget.prototype.nodemap = function (){
	var nodes = {};
	for (let i = 0, items = iter$(this.space().widgets()), len = items.length, item; i < len; i++) {
		item = items[i];
		if (item.TYPE != 'file') { continue; };
		nodes[item.path()] = item.id();
	};
	return nodes;
};
