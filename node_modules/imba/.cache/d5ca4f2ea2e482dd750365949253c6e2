function len$(a){
	return a && (a.len instanceof Function ? a.len() : a.length) || 0;
};
var Imba = require('imba'), _1 = Imba.createElement;
var Queue = require('./Queue').Queue;

var Indicator = Imba.defineTag('Indicator', function(tag){
	
	tag.prototype.__progress = {'default': 0,watch: 'progressDidSet',name: 'progress'};
	tag.prototype.progress = function(v){ return this._progress; }
	tag.prototype.setProgress = function(v){
		var a = this.progress();
		if(v != a) { this._progress = v; }
		if(v != a) { this.progressDidSet && this.progressDidSet(v,a,this.__progress) }
		return this;
	}
	tag.prototype._progress = 0;
	tag.prototype.__type = {'default': 'indeterminate',name: 'type'};
	tag.prototype.type = function(v){ return this._type; }
	tag.prototype.setType = function(v){ this._type = v; return this; }
	tag.prototype._type = 'indeterminate';
	tag.prototype.__busy = {watch: 'busyDidSet',name: 'busy'};
	tag.prototype.busy = function(v){ return this._busy; }
	tag.prototype.setBusy = function(v){
		var a = this.busy();
		if(v != a) { this._busy = v; }
		if(v != a) { this.busyDidSet && this.busyDidSet(v,a,this.__busy) }
		return this;
	};
	tag.prototype.__state = {'default': 'idle',watch: 'stateDidSet',name: 'state'};
	tag.prototype.state = function(v){ return this._state; }
	tag.prototype.setState = function(v){
		var a = this.state();
		if(v != a) { this._state = v; }
		if(v != a) { this.stateDidSet && this.stateDidSet(v,a,this.__state) }
		return this;
	}
	tag.prototype._state = 'idle';
	tag.prototype.__time = {'default': 2100,name: 'time'};
	tag.prototype.time = function(v){ return this._time; }
	tag.prototype.setTime = function(v){ this._time = v; return this; }
	tag.prototype._time = 2100;
	tag.prototype.__threshold = {'default': 0,name: 'threshold'};
	tag.prototype.threshold = function(v){ return this._threshold; }
	tag.prototype.setThreshold = function(v){ this._threshold = v; return this; }
	tag.prototype._threshold = 0;
	
	
	tag.prototype.busyDidSet = function (bool){
		return bool ? this.start() : this.stop();
	};
	
	tag.prototype.setup = function (){
		this._items = [];
		this._starter = null;
		this._endAt = 0;
		
		if (this.data() instanceof Queue) {
			this._queue = this.data();
			// console.log "setting up Indicator for queue"
			this._handler = this.refresh.bind(this);
			this.data().on('incr',this._handler);
			this.data().on('decr',this._handler);
		};
		return this;
	};
	
	tag.prototype.refresh = function (){
		var end = this.expectedEndAt();
		// console.log "Indicator.refresh",end - Date.now,state
		if (len$(this._queue)) {
			this.start();
		} else {
			this.stop();
		};
		return this;
	};
	
	tag.prototype.expectedEndAt = function (){
		var Math_;
		if (this._queue) {
			var times = this._queue.map(function(item) { return item._uxa.endAt || 0; });
			// console.log "times",times,@queue.@pending[0]
			var time = Math.max.apply(Math,times);
			return Math.max(time,Date.now());
		};
		
		return Math.max(this._endAt,Date.now());
	};
	
	// TODO should allow recalculation when more promises come in?
	tag.prototype.start = function (dur){
		if(dur === undefined) dur = 1000;
		this.setBusy(true);
		if (this.state() == 'done' || this.state() == 'idle') {
			this._startAt = Date.now();
			this._endAt = this._startAt + dur;
			this.setState('prep');
		};
		return this;
	};
	
	tag.prototype.stop = function (){
		// what if this happens too soon?
		this.setBusy(false);
		// still not started -- stop it before
		if (this.state() == 'prep') {
			this.setState('done');
		} else if (this.state() == 'busy' || this.state() == 'stalled') {
			this.setState('finish');
		};
		return this;
	};
	
	tag.prototype.calculatedProgress = function (){
		var now = Date.now();
		return (now - this._startAt) / (this._endAt - this._startAt);
	};
	
	tag.prototype.step = function (){
		// console.log 'step to next state from',state
		var v_;
		if (this.state() == 'prep') {
			return (this.setState(v_ = 'start'),v_);
		} else if (this.state() == 'start') {
			// if we have requested stopping - move to finish
			if (this.busy()) {
				return (this.setState(v_ = 'busy'),v_);
			} else {
				return (this.setState(v_ = 'finish'),v_);
			};
		} else if (this.state() == 'busy') {
			if (this._queue && !this._queue.idle()) {
				return (this.setState(v_ = 'stalled'),v_);
			} else {
				return (this.setState(v_ = 'finish'),v_);
			};
		} else if (this.state() == 'finish') {
			return (this.setState(v_ = 'done'),v_);
		} else if (this.state() == 'done') {
			return (this.setState(v_ = 'idle'),v_);
		};
	};
	
	tag.prototype.stateDidSet = function (state,prev){
		var self = this;
		self.setFlag('state',state);
		// console.log "Indicator.state",state,prev
		clearTimeout(self._stateTimeout);
		
		let ms = 2;
		let ease;
		let x = 0;
		
		if (state == 'prep') {
			self.unflag('running');
			ms = self.threshold() || 2;
			self._ind.css({transition: "none",transform: "scaleX(0)"});
			self.dom().offsetParent;
			self.flag('running');
		} else if (state == 'start') {
			self._startedAt = Date.now();
			ms = 240;
			x = 0.12;
			ease = "cubic-bezier(0.250, 1.190, 0.300, 0.865)";
			self._ind.css({transition: ("transform " + ms + "ms " + ease),transform: "scaleX(0.1)"});
		} else if (state == 'busy') {
			ms = self.expectedEndAt() - Date.now();
			x = 0.85;
			ease = "cubic-bezier(0.225, 0.710, 0.565, 0.985)";
			self._ind.css({transition: ("transform " + ms + "ms " + ease),transform: "scaleX(0.85)"});
		} else if (state == 'stalled') {
			self._ind.css({transition: "transform 3s linear",transform: "scaleX(0.95)"});
		} else if (state == 'finish') {
			var dur = (Date.now() - self._startedAt);
			ms = Math.max(200,600 - dur);
			// console.log "finish now -- have been animating for {dur}"
			ease = "cubic-bezier(0.260, 0.025, 0.000, 0.995)";
			ease = "cubic-bezier(0.4, 0.0, 0.2, 1)";
			x = 1;
			self._ind.css({transition: ("transform " + ms + "ms " + ease),transform: "scaleX(1)"});
		} else if (state == 'done') {
			self.unflag('running');
			ms = 200;
		};
		
		return self._stateTimeout = setTimeout(function() { return self.step(); },ms);
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).flag('uxa').setFlag(-1,this.type()).setChildren(this._ind = this._ind||_1('div',this).flag('ind'),2).synced((
			this._ind.setFlag(0,this.type())
		,true));
	};
})
exports.Indicator = Indicator;
