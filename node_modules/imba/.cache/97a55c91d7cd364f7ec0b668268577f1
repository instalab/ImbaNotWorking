var Imba = require('imba'), _1 = Imba.createElement;
var Page = require('./Page').Page;
var Format = require('../components/Formatters').Format;
var Delay = require('../../util/Delay').Delay;

if (false) {};

var uxa$ = require('uxa'), Indicator = uxa$.Indicator, TextArea = uxa$.TextArea, Form = uxa$.Form, Button = uxa$.Button;

var tracking = require('../../scrimba/tracking');

var NextUpView = require('../components/NextUpView').NextUpView;

var SpacePage = Imba.defineTag('SpacePage', Page, function(tag){
	
	tag.prototype.user = function(v){ return this._user; }
	tag.prototype.setUser = function(v){ this._user = v; return this; };
	
	tag.prototype.cid = function(v){ return this._cid; }
	tag.prototype.setCid = function(v){ this._cid = v; return this; };
	tag.prototype.pid = function(v){ return this._pid; }
	tag.prototype.setPid = function(v){ this._pid = v; return this; };
	
	tag.prototype.__data = {watch: 'dataDidSet',name: 'data'};
	tag.prototype.data = function(v){ return this._data; }
	tag.prototype.setData = function(v){
		var a = this.data();
		if(v != a) { this._data = v; }
		if(v != a) { this.dataDidSet && this.dataDidSet(v,a,this.__data) }
		return this;
	};
	tag.prototype.__playlist = {watch: 'playlistDidSet',name: 'playlist'};
	tag.prototype.playlist = function(v){ return this._playlist; }
	tag.prototype.setPlaylist = function(v){
		var a = this.playlist();
		if(v != a) { this._playlist = v; }
		if(v != a) { this.playlistDidSet && this.playlistDidSet(v,a,this.__playlist) }
		return this;
	};
	tag.prototype.__space = {watch: 'spaceDidSet',name: 'space'};
	tag.prototype.space = function(v){ return this._space; }
	tag.prototype.setSpace = function(v){
		var a = this.space();
		if(v != a) { this._space = v; }
		if(v != a) { this.spaceDidSet && this.spaceDidSet(v,a,this.__space) }
		return this;
	};
	tag.prototype.__status = {'default': 404,name: 'status'};
	tag.prototype.status = function(v){ return this._status; }
	tag.prototype.setStatus = function(v){ this._status = v; return this; }
	tag.prototype._status = 404;
	tag.prototype.trunk = function(v){ return this._trunk; }
	tag.prototype.setTrunk = function(v){ this._trunk = v; return this; };
	tag.prototype.__noscroll = {watch: 'noscrollDidSet',name: 'noscroll'};
	tag.prototype.noscroll = function(v){ return this._noscroll; }
	tag.prototype.setNoscroll = function(v){
		var a = this.noscroll();
		if(v != a) { this._noscroll = v; }
		if(v != a) { this.noscrollDidSet && this.noscrollDidSet(v,a,this.__noscroll) }
		return this;
	};
	
	tag.prototype.title = function (){
		return ("" + (this.data().title || ("Cast " + (this.data().id))) + " - Scrimba screencast");
	};
	
	tag.prototype.desc = function (){
		return this.data().description || this.data().title;
	};
	
	tag.prototype.load = async function (){
		// log 'load',cid
		var self = this, v_;
		let model = self.api().db().get(self.cid());
		
		if (model == self.trunk() || model.trunk() == self.trunk()) {
			true;
		} else {
			model = null;
		};
		
		// expensive to preload every time(!)
		self.setData(await (model || self.api().prefetch(['cast',self.cid(),self.pid()])));
		// console.log "DATA?",data,cid,pid
		self.setPlaylist(self.pid() ? self.api().db().get(self.pid()) : null);
		
		if (!(self.data()) || !self.data().can(self.api().user(),'read')) {
			return (self.setStatus(v_ = 404),v_);
		};
		
		self.setStatus(self.data() ? ((self.data().CODE || 200)) : 404);
		self.setTrunk(self.data() && self.data().trunk());
		// console.log "DATA?!?",status
		
		if (true || self.status() != 200) {
			return;
		};
		
		if (self.space() && self.space().model() != self.trunk()) {
			self.log("remove previous space");
			self.setSpace(null);
		};
		
		if (self.space()) {
			if (self.space().branch().model() == self.data()) {
				self.log("already at correct branch");
			} else {
				self.space().navigateTo(self.data());
			};
			return self.render();
		} else {
			self.setSpace(new Space(self.trunk(),{api: self.api(),playlist: self.playlist()}));
			await self.space().setup();
			
			// now asynchronously start loading the space
			self.uxa().queue().add(1000,async function() {
				await self.space().load();
				if (self.space()) {
					self.render();
					if (self.trunk() != self.data()) {
						return self.space().navigateTo(self.data());
					};
				};
			});
			
			return self;
		};
	};
	
	tag.prototype.path = function (){
		var path = [this.trunk()];
		if (this.data().group()) {
			path.unshift(this.data().group());
		} else if (this.data().playlist()) {
			path.unshift(this.data().playlist());
		} else if (this.playlist()) {
			path.unshift(this.playlist());
		};
		
		if (this.data() != this.trunk()) { path.push(this.data()) };
		return path;
	};
	
	tag.prototype.spaceDidSet = function (space,prev){
		if (prev) {
			prev.terminate();
			prev.dispose();
		};
		return this;
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		var model = this.data();
		
		return this.$open(0).flag('dark').setChildren([
			(this._indicator = this._indicator||_1(Indicator,this).flag('indicator').setType('forward')).bindData(this.uxa(),'queue',[]).end(),
			this.space() ? (
				this.space().view()
			) : (
				($[0] || _1('div',$,0,this).flag('SpaceView'))
			)
		],1).synced();
	};
	
	tag.prototype.tools = function (){
		let $ = this.$$ || (this.$$ = {});
		return (this._tools = this._tools||_1('div',this).flag('tools'));
	};
	
	tag.prototype.onkeydown = function (e){
		return this;
		// TODO redirect pause/play outside of SpaceView
		// if e.keychar == 'space' and e.event:target == document:body
		// 	e.cancel
	};
	
	tag.prototype.setup = function (){
		this.onwinwheel = this.onwinwheel.bind(this);
		this.onwinscroll = this.onwinscroll.bind(this);
		return this;
	};
	
	tag.prototype.hasPhoneInterface = function (){
		return this.api().ua().isPhone();
	};
	
	tag.prototype.mount = function (){
		this._winScrollZone = Math.max(window.innerWidth,window.innerHeight) + 40;
		App.doc().flag('space'); // should not be needed
		window.addEventListener('scroll',this.onwinscroll,false);
		// window.addEventListener('mousewheel',self:onwinwheel,true)
		this.schedule({events: true});
		this.flag('mount');
		
		if (this.data()) {
			App.setScrollTop(0);
			this.setNoscroll(true);
			this.render();
		};
		return this;
	};
	
	tag.prototype.unmount = function (){
		App.doc().unflag('space');
		this.setData(null);
		this.setSpace(null);
		this._params = null;
		window.removeEventListener('scroll',this.onwinscroll,false);
		// window.removeEventListener('mousewheel',self:onwinwheel,true)
		this.render();
		return this.unschedule();
	};
	
	tag.prototype.onwinwheel = function (e){
		let target = e.target;
		
		if (this.api().ua().isPhone()) {
			return;
		};
		// if we are inside editor - what about on mobile?
		if (target.closest('.EditorView')) {
			e.stopPropagation();
		} else {
			var scroller = target.closest('.scroll');
			if (!scroller || Math.abs(e.deltaX) > Math.abs(e.deltaY)) {
				e.preventDefault();
			};
		};
		return this;
	};
	
	tag.prototype.onwinscroll = function (e){
		var st = App.scrollTop();
		// now we can force the body flog
		if (st == 0) {
			this.setNoscroll(true);
		};
		
		this.flag('scrolled',st != 0);
		this.flag('covered',st > this._winScrollZone);
		return this;
	};
	
	tag.prototype.onfocusin = function (e){
		return this;
	};
	
	tag.prototype.onspaceclose = function (e){
		e.halt();
		var last = this.router().history().filter(function(item) { return !(/^\/c(asts?)?\//).test(item); })[0];
		return this.router().go(last || '/');
	};
	
	tag.prototype.onspaceend = function (e){
		e.halt();
		var next = this.playlist() ? this.playlist().itemAfter(this.data()) : null;
		// log 'spaceend',next
		if (next && !NextUpView.Instance) {
			return this.uxa().open((_1(NextUpView).flag('modal')).setData(next).setContext(this.playlist()).end());
		};
	};
	
	
	tag.prototype.onshowannotation = function (e,annotation){
		e.halt();
		return (this.space().setAnnotation(annotation),annotation);
	};
	
	tag.prototype.ontogglecontrols = function (e){
		return e.halt();
	};
	
	tag.prototype.onspaceplay = function (e){
		return e.halt();
	};
	
	tag.prototype.noscrollDidSet = function (bool){
		if (this.api().ua().isPhone()) { return };
		this.flag('noscroll',bool);
		return App.doc().flag('noscroll',bool);
	};
	
	tag.prototype.onbeforenavigate = function (e){
		if (this.space() && (this.space().isEditing() || this.space().isAnnotating())) {
			return e.preventDefault();
		};
	};
})
exports.SpacePage = SpacePage;

