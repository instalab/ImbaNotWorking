var Imba = require('imba'), _1 = Imba.createElement;
var Icon = require('./Icon').Icon;

var Button = Imba.defineTag('Button', 'button', function(tag){
	
	tag.prototype.action = function(v){ return this._action; }
	tag.prototype.setAction = function(v){ this._action = v; return this; };
	tag.prototype.icon = function(v){ return this._icon; }
	tag.prototype.setIcon = function(v){ this._icon = v; return this; };
	tag.prototype.label = function(v){ return this._label; }
	tag.prototype.setLabel = function(v){ this._label = v; return this; };
	tag.prototype.href = function(v){ return this._href; }
	tag.prototype.setHref = function(v){ this._href = v; return this; };
	tag.prototype.uxaAnchor = function(v){ return this._uxaAnchor; }
	tag.prototype.setUxaAnchor = function(v){ this._uxaAnchor = v; return this; };
	
	tag.prototype.build = function (){
		// buttons should be of type button by default
		return this.dom().setAttribute('type','button');
	};
	
	tag.prototype.contextData = function (){
		var data = null;
		var el = this;
		while (el){
			if (data = el.data()) {
				return data;
			};
			el = el.parent();
		};
		return null;
	};
	
	tag.prototype.ontap = function (e){
		var action = this.action();
		
		if (action) {
			this.trigger("uxa:action",action);
		};
		
		if ((typeof action=='string'||action instanceof String)) {
			e.halt().silence();
			this.trigger(action,this.contextData());
		} else if (action instanceof Array) {
			e.halt().silence();
			this.trigger(action[0],action.slice(1));
		} else {
			e._responder = null;
		};
		return this;
	};
	
	// by default we want to capture the touch fully
	tag.prototype.ontouchstart = function (t){
		return this.flag('_touch');
	};
	
	tag.prototype.ontouchend = function (){
		return this.unflag('_touch');
	};
	
	tag.prototype.ontouchcancel = function (){
		return this.unflag('_touch');
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).flag('button').setChildren([
			this.icon() ? (
				($[0] || _1(Icon,$,0,this)).bindData(this,'icon',[]).end()
			) : void(0),
			this.label() ? (
				this.href() ? (
					($[1] || _1('b',$,1,this).setContent($[2] || _1('a',$,2,1),2)).end((
						$[2].setHref(this.href()).setNestedAttr('uxa','md',this.label()).end()
					,true))
				) : (
					($[3] || _1('b',$,3,this)).setNestedAttr('uxa','md',this.label()).end()
				)
			) : void(0)
		],1).synced();
	};
})
exports.Button = Button;

var IconButton = Imba.defineTag('IconButton', Button)
exports.IconButton = IconButton;
