var Imba = require('imba'), _1 = Imba.createElement;
var Menu = require('./Menu').Menu;
var Popover = require('./Popover').Popover;
var Snackbar = require('./Snackbar').Snackbar;

var Overlay = Imba.defineTag('Overlay', function(tag){
	tag.prototype.component = function(v){ return this._component; }
	tag.prototype.setComponent = function(v){ this._component = v; return this; };
	tag.prototype.target = function(v){ return this._target; }
	tag.prototype.setTarget = function(v){ this._target = v; return this; };
	tag.prototype.options = function(v){ return this._options; }
	tag.prototype.setOptions = function(v){ this._options = v; return this; };
	
	tag.prototype.isModal = function(v){ return this._isModal; }
	tag.prototype.setIsModal = function(v){ this._isModal = v; return this; };
	tag.prototype.isMenu = function(v){ return this._isMenu; }
	tag.prototype.setIsMenu = function(v){ this._isMenu = v; return this; };
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).setChildren([
			this.component().flag('floating').flag('paper').end(),
			$[0] || _1('div',$,0,this).flag('backdrop').on$(0,['tap','autohide'],this)
		],1).synced();
	};
	
	// TODO improve state transitioning to allow reusing overlays
	tag.prototype.show = function (){
		var self = this, target_;
		self._activeElement = document.activeElement;
		self._autohider = function(e) {
			if (!e || !self.component().dom().contains(e.target)) { return self.hide() };
		};
		// also store the closest focusable parent?
		document.body.appendChild(self.dom());
		self.component().trigger('uxashow');
		if (self._isMenu || self._options.anchor) self.reflow();
		self.dom().offsetWidth;
		Imba.TagManager.insert(self,self.dom().parentNode);
		self.flag('uxa-show');
		self.flag('autohide',!!self._options.autohide);
		self.component().flag('uxa-show');
		Imba.TagManager.refresh(true);
		if (self.target()) {
			(target_ = self.target()) && target_.flag  &&  target_.flag('uxa-overlay-active');
		};
		
		if (self._options.autohide) {
			window.addEventListener('click',self._autohider,true);
		};
		return self;
	};
	
	tag.prototype.mount = function (){
		return this.schedule({events: true});
	};
	
	tag.prototype.unmount = function (){
		return this.unschedule();
	};
	
	tag.prototype.hide = function (){
		var self = this, target_;
		if (self.hasFlag('uxa-hide')) { return };
		self.flag('uxa-hide');
		self.component().flag('uxa-hide');
		self.unflag('uxa-show');
		self.component().unflag('uxa-show');
		
		var refocus = self._activeElement;
		self._activeElement = null;
		
		if (self.target()) {
			(target_ = self.target()) && target_.unflag  &&  target_.unflag('uxa-overlay-active');
		};
		
		window.removeEventListener('click',self._autohider,true);
		
		setTimeout(function() {
			if (refocus && refocus.offsetParent) {
				return refocus.focus();
			};
		},20);
		
		setTimeout(function() {
			var par = self.dom().parentNode;
			par.removeChild(self.dom());
			Imba.TagManager.remove(self,par);
			self.component().unflag('uxa-hide');
			// remove css positions as well
			return Imba.TagManager.refresh(true);
		},200);
		return self;
	};
	
	tag.prototype.onevent = function (e){
		// If it is a custom event
		if (this._eventResponder && e.bubble() && !this.contains(this._eventResponder) && !(e.event() instanceof Event)) {
			e.redirect(this._eventResponder);
		};
		return this;
	};
	
	tag.prototype.autohide = function (){
		if (!this._isModal) {
			return this.component().trigger('uxa:hide');
		};
	};
	
	tag.prototype.onuxahide = function (e){
		e.stop();
		return this.hide();
	};
	
	tag.prototype.onuxashow = function (e){
		return e.stop();
	};
	
	tag.prototype.setup = function (){
		this._isMenu = (this.component() instanceof Menu) || (this.component() instanceof Popover) || this.component().hasFlag('menu');
		this._isModal = this.component().hasFlag('modal');
		return this._eventResponder = (this._options && this._options.responder) || (this.target());
	};
	
	tag.prototype.reflow = function (){
		let box = this._options.anchor;
		if ((!box || box == true) && (this.target() && (this.target()._dom instanceof Element))) { // isa Imba.Tag 
			if (!this.target().dom().offsetParent) {
				if (!this.hasFlag('hide')) this.hide();
				return this;
			};
			box = this.target().dom().getBoundingClientRect();
		};
		
		// var box = target.dom.getBoundingClientRect
		if (!box) { return };
		
		var w = this.component().dom().offsetWidth;
		var h = this.component().dom().offsetHeight;
		
		var vw = window.innerWidth;
		var vh = window.innerHeight;
		
		var sx = 0; // window:scrollX
		var sy = 0; // window:scrollY
		
		var x = Math.round(box.left + sx + box.width * 0.5);
		var y = Math.round(box.top + sy + box.height * 0.5);
		
		var ax = (x > vw * 0.5) ? 1 : 0;
		var ay = (y > vh * 0.5) ? 1 : 0;
		
		var xmax = vw - 10;
		var xmin = 10;
		
		this.setFlag('ay',ay ? 'below' : 'above');
		this.setFlag('ax',(x > (vw * 0.5)) ? null : 'lft');
		
		var css = {
			maxWidth: 400
		};
		this.component().flag('abs');
		
		if (ay < 0.5) {
			css.top = Math.round(box.bottom);
			css.maxHeight = vh - css.top;
		} else {
			css.bottom = Math.round(vh - box.top);
			css.maxHeight = vh - css.bottom;
		};
		
		if (ax < 0.5) {
			css.left = Math.round(Math.max(box.left,10));
		} else {
			css.right = Math.round(Math.max((vw - box.right),10));
		};
		
		console.log(x,vw,y,vh,ax,ay,box);
		return this.component().css(css);
	};
})
exports.Overlay = Overlay;


function Stack(){ };

exports.Stack = Stack; // export class 
Stack.show = function (item,rel,o){
	if(o === undefined) o = {};
	var overlay = (_1(Overlay)).setComponent(item).setTarget(rel).setOptions(o).end();
	return overlay.show();
};
