
function ContentEditable(dom,options){
	var self = this;
	if(options === undefined) options = {};
	self._dom = dom;
	self._node = dom._tag;
	self._state = 'init';
	self._options = options;
	
	if (dom.ContentEditableInstance) {
		return;
	};
	
	dom.ContentEditableInstance = self;
	
	self._handlers = {};
	
	self._handlers.keydown = function(e) {
		console.log('keydown',e);
		e.stopPropagation();
		
		// enter
		if (e.keyCode == 13) {
			e.preventDefault();
			return self.submit();
		};
	};
	
	self._handlers.keyup = function(e) {
		e.stopPropagation();
		if (e.keyCode == 27) {
			e.preventDefault();
			return self.cancel();
		};
	};
	
	self._handlers.blur = function(e) {
		e.stopPropagation();
		if (self._state == 'init') {
			return self.cancel();
		};
	};
	self.activate();
	self;
};

exports.ContentEditable = ContentEditable; // export class 
ContentEditable.prototype.node = function(v){ return this._node; }
ContentEditable.prototype.setNode = function(v){ this._node = v; return this; };
ContentEditable.prototype.dom = function(v){ return this._dom; }
ContentEditable.prototype.setDom = function(v){ this._dom = v; return this; };

ContentEditable.prototype.value = function (){
	return this._dom.innerText;
};

ContentEditable.prototype.isValid = function (){
	if (this._options.pattern) {
		return this._options.pattern.test(this.value());
	} else {
		return true;
	};
};

ContentEditable.prototype.submit = function (){
	if (!(this.isValid())) { return this.cancel() };
	this._state = 'submit';
	this.deactivate();
	this._node.trigger('change',this.value());
	return this;
};

ContentEditable.prototype.cancel = function (){
	this._state = 'cancel';
	this._dom.innerText = this._initialValue;
	this.deactivate();
	return this;
};

ContentEditable.prototype.activate = function (){
	var self = this;
	self._initialValue = self.value();
	self.dom().tabindex = 0;
	self.dom().contenteditable = true;
	self.dom().setAttribute('contenteditable','plaintext-only');
	self.dom().focus();
	
	for (let o = self._handlers, handler, i = 0, keys = Object.keys(o), l = keys.length, e; i < l; i++){
		e = keys[i];handler = o[e];self.dom().addEventListener(e,handler,true);
	};
	
	return setTimeout(function() {
		self.dom().focus();
		return self.selectAll();
	},5);
};

ContentEditable.prototype.deactivate = function (){
	this.dom().contenteditable = false;
	this.dom().removeAttribute('contenteditable');
	this.dom().blur();
	this.dom().tabindex = null;
	window.getSelection().removeAllRanges();
	this.dom().ContentEditableInstance = null;
	// for item in @captures
	//	@node[item] = @overrides[item]
	
	for (let o = this._handlers, handler, i = 0, keys = Object.keys(o), l = keys.length, e; i < l; i++){
		e = keys[i];handler = o[e];this.dom().removeEventListener(e,handler,true);
	};
	return this;
};

ContentEditable.prototype.selectAll = function (){
	var sel,range;
	
	if (window.getSelection && document.createRange) {
		range = document.createRange();
		range.selectNodeContents(this._dom);
		sel = window.getSelection();
		sel.removeAllRanges();
		sel.addRange(range);
	} else if (document.body.createTextRange) {
		range = document.body.createTextRange();
		range.moveToElementText(this._dom);
		range.select();
	};
	return this;
};
