var Imba = require('imba'), _1 = Imba.createElement;
var PrivacyField = require('./PrivacyField').PrivacyField;
var CastTypeField = require('./CastTypeField').CastTypeField;
var CastTopicField = require('./CastTopicField').CastTopicField;

var Carousel = require('./Carousel').Carousel;
var CastTile = require('./CastTile').CastTile;

// externs;

var uxa$ = require('uxa'), Dialog = uxa$.Dialog, TextField = uxa$.TextField;

var TemplateTile = Imba.defineTag('TemplateTile', CastTile, function(tag){
	
	tag.Renderer = function (data,key,context){
		let key_, $ = this.$$ || (this.$$ = {}), $1;
		return ($[($1 = 'key$' + key)] || _1(TemplateTile,$,$1,this)).setData(data).flagIf('selected',(context.preset() == data)).end();
	};
	
	tag.prototype.ontap = function (){
		this.trigger('selectpreset',this.data());
		return this;
	};
});

var CastCreateDialog = Imba.defineTag('CastCreateDialog', Dialog, function(tag){
	
	var options = {selectable: true};
	
	tag.prototype.presets = function(v){ return this._presets; }
	tag.prototype.setPresets = function(v){ this._presets = v; return this; };
	tag.prototype.__preset = {watch: 'presetDidSet',name: 'preset'};
	tag.prototype.preset = function(v){ return this._preset; }
	tag.prototype.setPreset = function(v){
		var a = this.preset();
		if(v != a) { this._preset = v; }
		if(v != a) { this.presetDidSet && this.presetDidSet(v,a,this.__preset) }
		return this;
	};
	
	tag.prototype.setup = function (){
		tag.prototype.__super__.setup.apply(this,arguments);
		return this.fetch();
	};
	
	tag.prototype.fetch = async function (){
		var self = this;
		await self.api().prefetch('templates');
		console.log("received templates");
		
		self.setPresets(self.api().db().spaces().sel({sort: ['-featured_at','-created_at']},function(item) {
			return item.type == 'template' && (item.featured_at || item.uid == self.api().uid()) && !item.archived_at;
		}));
		
		self.render();
		if (!self.api().isMod() && !self.data().parent_id) { self._parentId.dom().setCustomValidity("Please select template") };
		self.setFormData(self.data());
		return self;
	};
	
	tag.prototype.onselectpreset = function (e,data){
		this.setPreset(data);
		return this.render();
	};
	
	tag.prototype.presetDidSet = function (preset,prev){
		this._parentId.setValue(preset ? preset.id : null);
		this._parentId.dom().setCustomValidity("");
		
		var prevTitle = this.formData().title;
		if (preset && (!prevTitle || (prev && prev.title == prevTitle))) {
			this.setFormData({title: preset.title});
		};
		return this.render();
	};
	
	tag.prototype.body = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		return (t0 = this._body = this._body||(t0=_1('div',this)).flag('body')).setContent([
			this.data().parent_id ? (
				(t0.$.A || _1('h2',t0.$,'A',t0).setText("Create cast from current workspace"))
			) : void(0),
			
			(t0.$.B || _1('input',t0.$,'B',t0).flag('hidden').setType('text').setName('uid').setRequired(true)).end(),
			
			(!this.data().parent_id) ? Imba.static([
				(t0.$.C || _1('label',t0.$,'C',t0).flag('caption').setText("Select template")),
				(t0.$.D || _1(Carousel,t0.$,'D',t0).flag('sm').flag('boxed').setRows(1)).bindData(this,'presets',[]).setRenderer(TemplateTile.Renderer).setContext(this).end()
			],2,1) : void(0),
			
			(this._parentId = this._parentId||_1('input',t0).flag('parentId').flag('invisible').setType('text').setName('parent_id')).setRequired((!this.api().isMod())).end(),
			
			this.data().parent_id ? (
				(t0.$.E || _1(CastTypeField,t0.$,'E',t0).flag('large').flag('bm-xl').setLabel("Select type")).bindData(this,'data',[]).end()
			) : (
				(t0.$.F || _1(CastTypeField,t0.$,'F',t0).flag('large').flag('bm-xl').setLabel("Select type")).bindData(this,'data',[]).setPattern((/lab|tutorial/)).end()
			),
			
			(t0.$.G || _1(TextField,t0.$,'G',t0).setType('text').setName('title').setRequired(true).setLabel('Title').setPlaceholder('Untitled').setDesc("Please name your project").setAutocomplete("off")).end()
		],1);
	};
	
	tag.prototype.onuxasubmit = function (e){
		var self = this, v_;
		var params = self.formData();
		if (!params.parent_id) {
			(((v_ = params.parent_id),delete params.parent_id, v_));
			if (!self.api().isMod()) {
				e.prevent();
				return self.uxa().flash(new Error("Please select a template"));
			};
		};
		
		e.halt();
		
		return self.uxa().queue().add(300,async function() {
			var cast = await self.api().rpc('castCreate',[params,self.data().snapshot,self.data().stream],{models: true});
			if (cast) {
				self.api().analytics().castCreated(cast.id);
				return App.router().go(cast.url());
			};
		});
	};
})
exports.CastCreateDialog = CastCreateDialog;
