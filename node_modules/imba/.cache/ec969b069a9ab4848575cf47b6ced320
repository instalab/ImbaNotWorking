function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _1 = Imba.createElement;


var protocol$ = require('../protocol'), SIMULATOR = protocol$.SIMULATOR, SCON = protocol$.SCON;

var List = require('../util/List').List;

var DOMPlayer = require('./simulator/player').DOMPlayer;
var Stylesheet = require('./simulator/stylesheet').Stylesheet;
var WindowGesture = require('../util/WindowGesture').WindowGesture;
var LayoutGesture = require('../util/LayoutGesture').LayoutGesture;

var Delay = require('../../util/Delay').Delay;

var Dimensions = require('../core/Dimensions').Dimensions;

var Frame = Imba.defineTag('Frame', 'iframe', function(tag){
	
	tag.prototype.sandbox = function(v){ return this.getAttribute('sandbox'); }
	tag.prototype.setSandbox = function(v){ this.setAttribute('sandbox',v); return this; };
	
	tag.prototype.zoom = function(v){ return this._zoom; }
	tag.prototype.setZoom = function(v){ this._zoom = v; return this; };
	tag.prototype.src = function(v){ return this._src; }
	tag.prototype.setSrc = function(v){ this._src = v; return this; };
	tag.prototype.__baseStyle = {watch: 'baseStyleDidSet',name: 'baseStyle'};
	tag.prototype.baseStyle = function(v){ return this._baseStyle; }
	tag.prototype.setBaseStyle = function(v){
		var a = this.baseStyle();
		if(v != a) { this._baseStyle = v; }
		if(v != a) { this.baseStyleDidSet && this.baseStyleDidSet(v,a,this.__baseStyle) }
		return this;
	};
	tag.prototype.cssFiles = function(v){ return this._cssFiles; }
	tag.prototype.setCssFiles = function(v){ this._cssFiles = v; return this; };
	tag.prototype.__frameContext = {watch: 'frameContextDidSet',name: 'frameContext'};
	tag.prototype.frameContext = function(v){ return this._frameContext; }
	tag.prototype.setFrameContext = function(v){
		var a = this.frameContext();
		if(v != a) { this._frameContext = v; }
		if(v != a) { this.frameContextDidSet && this.frameContextDidSet(v,a,this.__frameContext) }
		return this;
	};
	
	tag.prototype.didFocus = function (){
		return this.data().focus_();
	};
	
	tag.prototype.cssOptions = function (){
		return {};
	};
	
	tag.prototype.addCSSFile = function (file){
		var id_;
		this._cssFiles.add(file);
		var sheet = this._cssSheets[id_ = file.id()] || (this._cssSheets[id_] = new Stylesheet(file,this.cssOptions()));
		
		if (sheet) {
			sheet.setDoc(this.doc());
		};
		// @cssSheets.add Stylesheet.new(file,null)
		return this;
	};
	
	tag.prototype.removeCSSFile = function (file){
		var sheet;
		if (sheet = this._cssSheets[file.id()]) {
			sheet.setDoc(null);
		};
		this._cssFiles.remove(file);
		return this;
	};
	
	tag.prototype.getSheetForCSSFile = function (file){
		return this._cssSheets[file.id()];
	};
	
	tag.prototype.setup = function (){
		var self = this;
		self._cssSheets = {};
		self._cssFiles = new List(self,[]);
		self._docflags = {};
		// FIX
		self.dom().src = self.src();
		self.dom().onload = function(e) {
			self.setFrameContext(self.dom().contentWindow);
			return self.loaded(e);
		};
		return tag.prototype.__super__.setup.apply(self,arguments);
	};
	
	tag.prototype.reload = function (cb){
		if (cb) { Imba.once(this,'ready',cb) };
		return this.ctx().location.reload();
	};
	
	tag.prototype.ctx = function (){
		return this.dom().contentWindow;
	};
	
	tag.prototype.doc = function (){
		return this.dom().contentDocument || (this.ctx() && this.ctx().document);
	};
	
	tag.prototype.body = function (){
		return this.doc().body;
	};
	
	tag.prototype.scripts = function (){
		return [];
	};
	
	tag.prototype.isReady = function (){
		return this._isReady;
	};
	
	tag.prototype.resetStylesheets = function (){
		var v_;
		for (let i = 0, items = iter$(this.cssFiles()), len = items.length; i < len; i++) {
			var sheet = this.getSheetForCSSFile(items[i]);
			sheet && ((sheet.setDoc(v_ = this.doc()),v_));
		};
		return this;
	};
	
	tag.prototype.cssSuffix = function (){
		return '';
	};
	
	tag.prototype.loaded = function (e){
		var self = this;
		var html = ("<link href='/static/simulator/" + (self.baseStyle() || 'normalize') + self.cssSuffix() + ".css' rel='stylesheet' type='text/css' id='scrimbaBaseStyleLink' />");
		self.doc().head.innerHTML = html;
		
		self.resetStylesheets();
		
		var externaljs = self.scripts().slice(0);
		
		var loader = function() {
			var src;
			if (src = externaljs.shift()) {
				var el = self.doc().createElement("script");
				el.type = 'text/javascript';
				el.src = src;
				self.doc().head.appendChild(el);
				return el.onload = loader;
			} else {
				return self.onready(self);
			};
		};
		loader();
		return self;
	};
	
	tag.prototype.onready = function (){
		this._isReady = true;
		this.trigger('frameload');
		Imba.emit(this,'ready');
		return this;
	};
	
	tag.prototype.setZoom = function (zoom){
		this._zoom = zoom;
		this;
		return this;
	};
	
	tag.prototype.commit = function (){
		this.setBaseStyle(this.data().baseStyle());
		return this;
	};
	
	tag.prototype.resize = function (){
		return this;
	};
	
	tag.prototype.baseStyleDidSet = function (new$,old){
		if (this.ctx() && this.ctx().scrimbaBaseStyleLink) {
			this.ctx().scrimbaBaseStyleLink.setAttribute('href',("/static/simulator/" + (new$ || 'blank') + this.cssSuffix() + ".css"));
		};
		return this;
	};
	
	tag.prototype.frameContextDidSet = function (new$,old){
		if (old) {
			// remove some stuff for the recorder as well?
			old.ScrimbaConsole = null;
		};
		
		if (new$) {
			new$.NativeConsole = new$.console;
		};
		
		return this;
	};
	
	tag.prototype.dispose = function (){
		var self = this;
		self.dom().onload = null;
		self.setFrameContext(null);
		// Remove stylesheets!
		self._cssFiles.toClonedArray().map(function(item) {
			return self.removeCSSFile(item);
		});
		
		self._cssSheets = null;
		self._cssFiles = null;
		
		if (self.ctx()) {
			self.ctx().location.reload(); // reload - really?
		};
		return self;
	};
});

var Player = Imba.defineTag('Player', Frame, function(tag){
	
	tag.prototype.cssOptions = function (){
		return {fakePseudoStates: true};
	};
	
	tag.prototype.cssSuffix = function (){
		return '.preview';
	};
	
	tag.prototype.src = function (){
		return ("/cast/" + (this.data().space().id()) + ".preview");
	};
	
	tag.prototype.mutator = function (){
		return this._mutator || (this._mutator = new DOMPlayer(this));
	};
	
	tag.prototype.bridge = function (){
		return this.mutator();
	};
	
	tag.prototype.onready = function (){
		this.bridge().attachTo(this.ctx(),this.body());
		tag.prototype.__super__.onready.apply(this,arguments);
		
		if (this._snapshot) {
			this.bridge().fromSnapshot(this._snapshot);
			this._snapshot = null;
		};
		return this;
	};
	
	tag.prototype.nodeForPath = function (path){
		return this.bridge().nodeForPath(path);
	};
	
	tag.prototype.dispose = function (){
		this._mutator && this._mutator.dispose  &&  this._mutator.dispose();
		this._mutator = null;
		return tag.prototype.__super__.dispose.apply(this,arguments);
	};
	
	tag.prototype.deserialized = function (){
		if (true) { return };
		var body = this.data().data().body;
		this.bridge().fromSnapshot(body);
		return this;
	};
});


var Resizer = Imba.defineTag('Resizer');

var SimulatorHeader = Imba.defineTag('SimulatorHeader', function(tag){
	
	tag.prototype.zoom = function(v){ return this._zoom; }
	tag.prototype.setZoom = function(v){ this._zoom = v; return this; }; // watch: :render
	
	tag.prototype.close = function (e){
		e.halt();
		return this.api().log('warn',"SIM_CLOSE - not implemented - should stop running");
	};
	
	tag.prototype.min = function (e){
		e.halt();
		return this.data().blur_();
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).dataset('gesture','move').setChildren($.$ = $.$ || [
			_1('div',$,0,this).flag('center').setContent([
				_1('div',$,1,0).flag('title').setText("Preview"),
				_1('div',$,2,0).flag('sizing').setContent([
					_1('span',$,3,2).flag('size').setContent([
						_1('span',$,4,3).flag('w'),
						_1('span',$,5,3).flag('x').setText('Ã—'),
						_1('span',$,6,3).flag('h')
					],2),
					_1('span',$,7,2).flag('zoom')
				],2)
			],2),
			_1('div',$,8,this).flag('lft')
		],2).synced((
			$[4].setContent(this.data().width(false),3),
			$[6].setContent(this.data().height(false),3),
			$[7].setText(" (" + ((this.zoom() || 1) * 100).toFixed(0) + "%)")
		,true));
	};
});

var SimulatorView = Imba.defineTag('SimulatorView', function(tag){
	
	tag.prototype.title = function(v){ return this._title; }
	tag.prototype.setTitle = function(v){ this._title = v; return this; };
	tag.prototype.__playback = {'default': true,name: 'playback'};
	tag.prototype.playback = function(v){ return this._playback; }
	tag.prototype.setPlayback = function(v){ this._playback = v; return this; }
	tag.prototype._playback = true; // should really move to SimulatorWidget
	tag.prototype.__show = {watch: 'showDidSet',name: 'show'};
	tag.prototype.show = function(v){ return this._show; }
	tag.prototype.setShow = function(v){
		var a = this.show();
		if(v != a) { this._show = v; }
		if(v != a) { this.showDidSet && this.showDidSet(v,a,this.__show) }
		return this;
	};
	tag.prototype.zoom = function(v){ return this._zoom; }
	tag.prototype.setZoom = function(v){ this._zoom = v; return this; };
	tag.prototype.__autoPos = {'default': true,name: 'autoPos'};
	tag.prototype.autoPos = function(v){ return this._autoPos; }
	tag.prototype.setAutoPos = function(v){ this._autoPos = v; return this; }
	tag.prototype._autoPos = true;
	tag.prototype.__autoSize = {'default': true,name: 'autoSize'};
	tag.prototype.autoSize = function(v){ return this._autoSize; }
	tag.prototype.setAutoSize = function(v){ this._autoSize = v; return this; }
	tag.prototype._autoSize = true;
	
	tag.prototype.setup = function (){
		this._zoom = 1;
		this.body();
		return this;
	};
	
	tag.prototype.mount = function (){
		var self = this;
		self.data().space().on('reflow',function() {
			return self.reflow(true);
		});
		
		self.data().space().on('resize',function() {
			var vp = self.data().space().view().box();
			return self.log('viewport resized',vp);
		});
		
		self._mounted = true;
		self.reflow(true);
		return self;
	};
	
	tag.prototype.body = function (){
		let $ = this.$$ || (this.$$ = {});
		return (this._body = this._body||_1('div',this).flag('body'));
	};
	
	tag.prototype.onresizeupdate = function (g){
		// autoSize should be toggled back on when we resume playback?
		var v_;
		this.setAutoSize(false);
		
		let l = g.layout();
		let o = {
			width: l.width() + g.dx() * g.ax(),
			height: l.height() + g.dy() * g.ay(),
			left: l.left(),
			top: l.top()
		};
		
		if (g.ax() < 0) {
			o.left += (o.width - l.width()) * g.ax();
		};
		
		if (g.ay() < 0) {
			o.top += (o.height - l.height()) * g.ay();
		};
		
		this.redraw(this._layout.set(o));
		return (this.data().setLayout(v_ = this._layout.clone()),v_);
	};
	
	tag.prototype.onmoveupdate = function (g){
		this.setAutoPos(false);
		var x = Math.round(g.layout().left() + g.dx());
		var y = Math.round(Math.max(g.layout().top() + g.dy(),40));
		this._layout.set({left: x,top: y});
		// if data.space.isEditing
		this.data().setLayout(this._layout.clone());
		return this.redraw();
	};
	
	tag.prototype.ondblclick = function (){
		this.setAutoPos(true);
		this.setAutoSize(true);
		return this.reflow(true);
	};
	
	tag.prototype.relayout = function (){
		// console.log 'relayout'
		return this;
	};
	
	tag.prototype.redraw = function (layout){
		if(layout === undefined) layout = this._layout;
		let zoom = 100;
		let left = ("calc((100% - " + (layout.width()) + "px) * " + (layout.anchorX()) + ")");
		let top = ("calc((100% - " + (layout.height()) + "px) * " + (layout.anchorY()) + ")");
		
		this._body.css(
			{width: (10000 / zoom) + "%",
			height: (10000 / zoom) + "%",
			transform: ("scale(" + (100 / zoom) + ")")}
		);
		
		this.css({width: layout.width(),height: layout.height(),left: left,top: top});
		return this.flag('narrow',layout.width() < 150);
	};
	
	
	tag.prototype.reflow = function (force){
		if(force === undefined) force = false;
		var remote = this.data().agentLayout();
		var v = remote._v; // version
		
		if (v == this._v && !force) { return };
		
		if (!remote._data) { return };
		// console.log 'reflow',force,@v
		
		var vp = this.data().space().view().box();
		var vw = vp.width;
		var vh = vp.height;
		
		var layout = this._layout || (this._layout = remote.clone());
		
		if (v != this._v) {
			// console.log 'streamLayout has changed!'
			if (this.autoPos() && this.autoSize()) {
				layout.set(remote.toObject()).resizeParent(vw,vh);
			} else if (this.autoSize()) {
				layout.resizeParent(vw,vh).resize(remote.width(),remote.height());
				// should autosize no matter what?
			} else if (this.autoPos()) {
				this;
			};
		} else {
			layout.resizeParent(vw,vh);
		};
		
		this._v = v;
		layout.round();
		this.redraw(this._layout = layout);
		return;
	};
	
	tag.prototype.isMovable = function (){
		return !this.api().isMobile();
	};
	
	tag.prototype.ontouchstart = function (t){
		if (this.isMovable()) {
			return LayoutGesture.wrap(t,{layout: this._layout});
		};
	};
	
	tag.prototype.discardLocalSize = function (){
		this.setAutoSize(true);
		return this.reflow();
	};
	
	tag.prototype.dirty = function (){
		return this._dirty = true;
	};
	
	tag.prototype.showDidSet = function (bool,prev){
		return this.flag('show',!!bool);
	};
	
	tag.prototype.shouldFocus = function (){
		return this.data().isFocused();
	};
	
	tag.prototype.focus_ = function (){
		return this.data().focus_();
	};
	
	tag.prototype.ontap = function (){
		// console.log 'tapped simulator!'
		if (!(this._resizedAt && (Date.now() - this._resizedAt) < 200)) {
			if (this.data().space().branch().canPush()) {
				return this.data().focus_();
			};
		};
	};
	
	tag.prototype.interact = function (){
		return this.data().space().actions().exec('run');
	};
	
	tag.prototype.onwheel = function (e){
		e.silence();
		return this;
	};
	
	tag.prototype.clientLayout = function (){
		return this._layout;
	};
	
	tag.prototype.dispose = function (){
		this._player && this._player.dispose  &&  this._player.dispose();
		return this;
	};
	
	tag.prototype.player = function (){
		let $ = this.$$ || (this.$$ = {});
		return this._player || (this._player = this._player||_1(Player,this).flag('player').setSandbox("allow-same-origin")).bindData(this,'data',[]).end();
	};
	
	tag.prototype.render = function (){
		var $ = this.$, t0;
		if (!this.data().visible() && this._rendered) {
			this.setShow(false);
			return this;
		};
		
		if (this._mounted) {
			this.reflow();
		};
		
		this._rendered = true;
		return this.$open(0).flag('reflow').dataset('gesture','move').flagIf('focus',(this.shouldFocus())).flagIf('running',(this.data().running())).setShow((this.data().visible())).setChildren($.$ = $.$ || [
			t0 = this._chrome = this._chrome||(t0=_1('div',this)).flag('chrome').setContent([
				this._header = this._header||_1(SimulatorHeader,t0).flag('header').flag('handle'),
				_1(Resizer,$,0,t0).flag('left').dataset('gesture','resize,l'),
				_1(Resizer,$,1,t0).flag('right').dataset('gesture','resize,r'),
				_1(Resizer,$,2,t0).flag('bottom').dataset('gesture','resize,b'),
				_1(Resizer,$,3,t0).flag('br').dataset('gesture','resize,b,r'),
				_1(Resizer,$,4,t0).flag('bl').dataset('gesture','resize,b,l')
			],2),
			this._pointerframe = this._pointerframe||_1('div',this).flag('pointerframe'),
			this._body = this._body||_1('div',this).flag('body')
		],2).synced((
			this._header.bindData(this,'data',[]).setZoom(this._zoom).end(),
			$[0].end(),
			$[1].end(),
			$[2].end(),
			$[3].end(),
			$[4].end(),
			this._body.setContent(
				this.player().end()
			,3)
		,true));
	};
})
exports.SimulatorView = SimulatorView;
