function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var self = {};

var colorConvert = require('color-convert');

exports.generate = self.generate = function (topics){
	
	var css = "";
	var vars = {};
	
	for (let i = 0, items = iter$(topics), len = items.length, topic, m, m2, m3; i < len; i++) {
		topic = items[i];
		if (!topic.style) { continue; };
		let ref = topic.id.slice(1);
		let sel = (".topic-" + ref) + '{\n';
		let vars = Object.assign({},topic.style);
		let logo = topic.logo || '';
		let params = [];
		let colors = [];
		
		if (vars.color) {
			let hsl = colorConvert.hex.hsl(vars.color.replace('#',''));
			vars.hue = hsl[0];
		};
		
		if (logo) {
			if (m = logo.match(/viewBox=[\"\']0 0 (\d+) (\d+)/)) {
				vars.logoWidth = parseInt(m[1]);
				vars.logoHeight = parseInt(m[2]);
			} else if (m2 = logo.match(/svg\" height=\"(\d+)\" width=\"(\d+)\"/)) {
				vars.logoWidth = parseInt(m2[2]);
				vars.logoHeight = parseInt(m2[1]);
			} else if (m3 = logo.match(/svg\" width=\"(\d+)\" height=\"(\d+)\"/)) {
				vars.logoWidth = parseInt(m3[1]);
				vars.logoHeight = parseInt(m3[2]);
			};
			
			logo.replace(/\#([a-fA-F0-9]{3,6})/g,function(_0,_1) {
				let hsl = colorConvert.hex.hsl(_1);
				return colors.push(hsl);
			});
			
			// sort colors by lightness - nearest to 50% lightness
			colors.sort(function(a,b) { return Math.abs(a[2] - 50) - Math.abs(b[2] - 50); });
			
			for (let i = 0, len = colors.length, color; i < len; i++) {
				color = colors[i];
				vars[("color" + (i || ''))] = ("hsl(" + (color[0]) + "," + (color[1]) + "%," + (color[2]) + "%)");
			};
			
			vars.logo = ("url('data:image/svg+xml;utf8," + logo + "')");
		};
		
		for (let val, j = 0, keys = Object.keys(vars), l = keys.length, name; j < l; j++){
			name = keys[j];val = vars[name];sel += ("--topic-" + name + ": " + val + ";\n");
		};
		
		sel += '}\n';
		css += sel;
	};
	return css;
};
