function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _2 = Imba.createTagList, _1 = Imba.createElement;

var Page = require('./Page').Page;
var Carousel = require('../components/Carousel').Carousel;
var CastTile = require('../components/CastTile').CastTile;

var PlaylistPage = Imba.defineTag('PlaylistPage', Page, function(tag){
	tag.prototype.pid = function(v){ return this._pid; }
	tag.prototype.setPid = function(v){ this._pid = v; return this; };
	
	tag.prototype.title = function (){
		return ("Scrimba - Playlist " + (this.data().title));
	};
	
	tag.prototype.load = async function (){
		var v_;
		return (this.setData(v_ = await this.api().prefetch(['playlist',this.pid()])),v_);
	};
	
	tag.prototype.reload = function (){
		return this.fetch();
	};
	
	tag.prototype.path = function (){
		return [this.data()];
	};
	
	tag.prototype.isMine = function (){
		return false ? true : false;
	};
	
	tag.prototype.render = function (){
		var $ = this.$, self = this;
		var opts = self.isMine() ? {playlist: self.data(),list: self.data().items()} : {};
		
		return self.$open(0).setChildren([
			$[0] || _1('header',$,0,self).setContent(
				$[1] || _1('div',$,1,0).flag('wide').setContent([
					_1('h1',$,2,1),
					_1('div',$,3,1)
				],2)
			,2),
			
			$[4] || _1('article',$,4,self).flag('wide').setContent(
				$[5] || _1('section',$,5,4).flag('full').flag('playlists').setContent(
					$[6] || _1('div',$,6,5).flag('playlist-grid').flag('sm')
				,2)
			,2),
			
			self.footer()
		],1).synced((
			$[2].setContent(self.data().title,3),
			$[3].setNestedAttr('uxa','md',self.data().description).end(),
			$[6].setContent(
				(function tagLoop($0) {
					for (let i = 0, items = iter$(self.data().items()), len = $0.taglen = items.length; i < len; i++) {
						($0[i] || _1(CastTile,$0,i)).setData(items[i]).setContext(self.data()).end();
					};return $0;
				})($[7] || _2($,7,$[6]))
			,4)
		,true));
	};
})
exports.PlaylistPage = PlaylistPage;


