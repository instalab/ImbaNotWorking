var Imba = require('imba');
var env = require('../env');
var util = require('../util');
var ExpressSession = require('express-session');
var TTL = 30 * 24 * 3600 * 1000;

var db = require('./db').db;


function SessionStore(options){
	this._client = options.client;
};

Imba.subclass(SessionStore,ExpressSession.Store);
SessionStore.prototype.tbl = function (){
	return this._client.table('sessionstore');
};

SessionStore.prototype.currentTimestamp = function (){
	return Math.ceil(Date.now() / 1000);
};

SessionStore.prototype.getExpireTime = function (maxAge){
	return new Date();
	let ttl = this._ttl;
	ttl = ttl || ((typeof maxAge === 'number') ? maxAge : TTL);
	ttl = Math.ceil(ttl + Date.now());
	return ttl;
};

SessionStore.prototype.getUid = function (sess){
	var user;
	if (user = (sess.passport && sess.passport.user)) {
		return user.id || user;
	};
	return null;
};

SessionStore.prototype.get = async function (sid,cb){
	// console.log 'SessionStore.get',sid
	let sess = await this.tbl().where({id: sid}).first();
	if (!sess) { return cb() };
	
	return cb(null,sess.sess);
};

SessionStore.prototype.set = async function (sid,sess,cb){
	
	let expireTime = this.getExpireTime(sess.cookie.maxAge);
	let curr = await this.tbl().where({id: sid}).first();
	let data = {
		id: sid,
		expire: expireTime,
		sess: sess,
		uid: this.getUid(sess) || null
	};
	
	// console.log 'SessionStore.set',sid,data:uid
	
	if (curr) {
		await this.tbl().update(data).where({id: sid});
	} else {
		await this.tbl().insert(data);
	};
	return cb();
};

SessionStore.prototype.touch = function (sid,sess,cb){
	// console.log "Sesssion.expire",sid,sess:cookie:expires
	// let expireTime = getExpireTime(sess:cookie:maxAge)
	// await tbl.update(expire: expireTime).where(id: sid)
	return cb && cb(null);
};

SessionStore.prototype.destroy = async function (sid,fn){
	console.log('SessionStore.destroy',sid);
	await this.tbl().where({id: sid}).del();
	return fn();
};

var SessionParser = exports.SessionParser = ExpressSession(
	{genid: function(req) { return 'S' + util.rndstr(16); },
	store: new SessionStore({client: db,ttl: TTL}),
	secret: env.get('JWT_SECRET'),
	resave: false,
	cookie: {maxAge: TTL},
	saveUninitialized: true}
);
