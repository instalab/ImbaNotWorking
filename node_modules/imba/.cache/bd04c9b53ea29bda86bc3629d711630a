function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _2 = Imba.createTagList, _1 = Imba.createElement;
var InterfaceView = require('./InterfaceView').InterfaceView;
var EditorMenu = require('./EditorMenu').EditorMenu;

var FilePath = Imba.defineTag('FilePath', function(tag){
	tag.prototype.__data = {watch: 'dataDidSet',name: 'data'};
	tag.prototype.data = function(v){ return this._data; }
	tag.prototype.setData = function(v){
		var a = this.data();
		if(v != a) { this._data = v; }
		if(v != a) { this.dataDidSet && this.dataDidSet(v,a,this.__data) }
		return this;
	};
	tag.prototype.path = function(v){ return this._path; }
	tag.prototype.setPath = function(v){ this._path = v; return this; };
	
	tag.prototype.dataDidSet = function (data){
		var v_;
		return (this.setPath(v_ = data ? data.path().split("/") : []),v_);
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		var path = this.path();
		return this.$open(0).flag('path').setChildren(
			// <.dir> "app"
			// <.file> "index.html"
			(function tagLoop($0) {
				for (let i = 0, items = iter$(path), len = $0.taglen = items.length; i < len; i++) {
					($0[i] || _1('div',$0,i).flag('part')).setContent(items[i],3);
				};return $0;
			})($[0] || _2($,0))
		,4).synced();
	};
});


var TitlebarView = Imba.defineTag('TitlebarView', InterfaceView, function(tag){
	
	tag.prototype.file = function (){
		return this.space().primaryEditor().currentFile();
	};
	
	tag.prototype.showMenu = function (e){
		return e.uxa().open((_1(EditorMenu)).bindData(this.space(),'primaryEditor',[]).end());
	};
	
	tag.prototype.showBrowser = function (){
		return (this.space().browser().setVisible(true),true);
	};
	
	tag.prototype.toggleDrawer = function (){
		return this.space().view().drawer().toggle();
	};
	
	tag.prototype.reload = function (){
		return this.space().browser().refresh();
	};
	
	tag.prototype.openInBrowser = function (){
		let url = this.file().path().replace(/^\//,'');
		return this.space().browser().node().go(url);
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		let file = this.file();
		let ext = file && file.ext();
		
		return this.$open(0).setChildren($.$ = $.$ || [
			_1(FilePath,$,0,this),
			// <.path>
			// 	<.dir> "app"
			// 	<.file> "index.html"
			_1('div',$,1,this).flag('tools')
		],2).synced((
			$[0].setData(file).end(),
			$[1].setContent([
				(ext == 'html') ? (
					($[2] || _1('div',$,2,1).flag('button').flag('run').on$(0,['tap','openInBrowser'],this).setText('open in browser'))
				) : ((ext == 'css') ? (
					($[3] || _1('div',$,3,1).flag('button').flag('css').flag('live').setText('updated live'))
				) : (ext ? (
					// should only show if file has changes
					($[4] || _1('div',$,4,1).flag('button').flag('run').on$(0,['tap','reload'],this).setText('reload browser'))
				) : void(0))),
				
				(!this.space().browser().visible()) ? (
					($[5] || _1('div',$,5,1).flag('button').flag('blue').on$(0,['tap','showBrowser'],this).setText('show browser'))
				) : void(0),
				
				this.api().isEmbed() ? (
					($[6] || _1('a',$,6,1).flag('button').flag('blue').setTarget("_blank").setText('open on scrimba.com')).setHref(this.space().model().url()).end()
				) : void(0),
				// <.button.run.live> 'updated live'
				// <.tool.frame.sidebar :tap.exec(:toggleBrowser)> <i.l>
				// <.tool.frame.console :tap.exec(:toggleConsole)> <i.b>
				// <.tool.console :tap.exec(:toggleConsole) data-icon='runtool'>
				// <.tool.browser :tap.exec(:toggleBrowser) data-icon='cloudtool'>
				($[7] || _1('div',$,7,1).flag('tool').flag('more').dataset('icon','morevert').on$(0,['tap','showMenu'],this)).end(),
				($[8] || _1('div',$,8,1).flag('tool').flag('drawer').dataset('icon','mleft').on$(0,['tap','toggleDrawer'],this)).end()
			// <.tool.vert data-icon='morevert'>
			],1)
		,true));
	};
})
exports.TitlebarView = TitlebarView;
