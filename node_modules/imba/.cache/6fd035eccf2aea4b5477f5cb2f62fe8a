var Imba = require('imba'), _1 = Imba.createElement;
var TimelineView = require('./TimelineView').TimelineView;
var Peers = require('./Peers').Peers;
var Agents = require('./Agents').Agents;



var Tab = Imba.defineTag('Tab', 'a', function(tag){
	tag.prototype.name = function(v){ return this._name; }
	tag.prototype.setName = function(v){ this._name = v; return this; };
	
	tag.prototype.render = function (){
		// flag('active',name == data.tab)
		this.flag('secondary',!this.data().enabled() || this.name() != this.data().tab());
		return this;
	};
	
	tag.prototype.ontap = function (e){
		if (!(this.name())) { return };
		this.log('Tab.ontap',this.name(),this.data().tab());
		if (this.data().tab() == this.name() && this.data().enabled()) {
			this.log("close drawer");
			return this.data().trigger('close');
		} else {
			this.data().setTab(this.name());
			return this.data().trigger('open');
		};
		// possibly enable?!
	};
});


var SpaceHeader = Imba.defineTag('SpaceHeader', function(tag){
	
	tag.prototype.space = function (){
		return this.data().space();
	};
	
	tag.prototype.view = function (){
		return this.data();
	};
	
	tag.prototype.togglePlayback = function (tl){
		if (tl.isPlaying()) {
			tl.pause();
			this.trigger('spacepaused');
		} else if (tl.isPaused()) {
			tl.play();
			this.trigger('spaceplay');
		};
		return this;
	};
	
	tag.prototype.goBack = function (){
		this.view().setMode('pip');
		return this.router().go('/');
	};
	
	tag.prototype.gotoTrunk = function (){
		if (this.space().branch() != this.space().trunk()) {
			return this.space().trunk().timeline().enter();
		};
	};
	
	tag.prototype.toggleRecording = function (){
		if (this.space().isRecording()) {
			this.trigger('recstop',this.space().branch());
		} else {
			this.trigger('recstart',this.space().branch());
		};
		return this;
	};
	
	tag.prototype.recoverConnection = function (){
		return this.space().branch().syncer().recover();
	};
	
	tag.prototype.render = function (){
		// var tab = view.drawer.tab
		var $ = this.$;
		var branch = this.space().branch();
		var trunk = this.space().trunk();
		var target = branch.isLocal() ? ((branch.parent() || branch)) : branch;
		
		return this.$open(0).setChildren([
			this.space().isRecording() ? (
				($[0] || _1('div',$,0,this).flag('tool').flag('primary').flag('rec').flag('unless-pip').dataset('icon','mic').on$(0,['tap','stop','toggleRecording'],this)).end() // <i.rec>
			) : void(0),
			(target.hasDuration() && !this.space().isRecording() && !branch.isLive()) ? (
				($[1] || _1('div',$,1,this).flag('tool').flag('primary').flag('playpause').dataset('icon','play')).on$(0,['tap','stop',['togglePlayback',target.timeline()]],this).end()
			) : void(0),
			($[2] || _1('div',$,2,this).flag('breadcrumb').flag('unless-pip')).setContent([
				($[3] || _1('div',$,3,2).flag('Link').flag('unless-pip').flag('go-home').on$(0,['tap','goBack'],this).setContent($[4] || _1('span',$,4,3).setText("Scrimba"),2)),
				($[5] || _1('div',$,5,2).flag('Link').flag('active').on$(0,['tap','gotoTrunk'],this).setContent([
					_1('span',$,6,5),
					_1('span',$,7,5).flag('status').setText("")
				// <span.status.mode> target.mode
				// also show saving / saved status
				],2)).flagIf('draft',(target.model().isDraft())).setFlag(0,target.mode()).end((
					$[6].setContent(this.space().model().title() || 'Trunk',3)
				,true)),
				(branch != trunk) ? (
					($[8] || _1('div',$,8,2).flag('Link').setContent(
						$[9] || _1('span',$,9,8).setText("Local edits")
					,2))
				) : void(0)
			],1),
			($[10] || _1('div',$,10,this).flag('flexer')),
			// <Agents[space]>
			// <Peers[space]>
			(!target.isLive()) ? (
				(this._timeline = this._timeline||_1(TimelineView,this).flag('timeline')).bindData(target,'timeline',[]).end()
			) : void(0)
		
		// <@tabs.unless-pip>
		// 	if target.syncer.isRecovering or target.syncer.hasConflict
		// 		<Tab[view.drawer].tab :tap.recoverConnection> <span> "Conflict!"
		// 	# <Tab[view.drawer].tab name='about'> <span> "About"
		// 	# <Tab[view.drawer].tab name='discuss'> <span> "Discuss"
		// 	# <Tab[view.drawer].tab name='notes'> <span> "Forks"
		// 	# <Tab[view.drawer].tab name='playlist'> <span> "Playlist"
		],1).synced();
	};
})
exports.SpaceHeader = SpaceHeader;
