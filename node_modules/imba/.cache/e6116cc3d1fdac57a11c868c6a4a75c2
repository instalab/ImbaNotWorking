var Imba = require('imba'), _1 = Imba.createElement;
var uxa$ = require('uxa'), Dialog = uxa$.Dialog, TextArea = uxa$.TextArea, TextField = uxa$.TextField, Button = uxa$.Button;
var LongPromise = require('../../util/LongPromise').LongPromise;

var AuthenticationDialog = Imba.defineTag('AuthenticationDialog', Dialog, function(tag){
	tag.prototype.promise = function(v){ return this._promise; }
	tag.prototype.setPromise = function(v){ this._promise = v; return this; };
	
	tag.prototype.openGithubSeamless = function (){
		// Hm. How to keep it open?
		var url = "/login?from=/auth/github/seamless";
		
		if ((/11\.\d Safari/).test(window.navigator.userAgent)) {
			// bug in Safari Technology Preview with popup windows
			window.open(url,"_blank");
			return;
		};
		
		var ox = Math.round(window.screenLeft + window.outerWidth * 0.5);
		var oy = Math.round(window.screenTop + window.outerHeight * 0.5);
		var settings = ("left=" + (ox - 300) + ",width=600,top=" + (oy - 300) + ",height=600");
		
		return window.open(url,"ghlogin",settings);
	};
	
	tag.prototype.github = function (){
		var self = this;
		self.openGithubSeamless();
		
		return self.uxa().queue().add(10000,async function() {
			await self.api().githubLoginPromise();
			return self.hide();
		});
	};
	
	tag.prototype.signup = function (){
		App.uxa().open((_1(SignupDialog)).setPromise(this._promise).end());
		this._promise = null;
		return this.hide();
	};
	
	tag.prototype.forgot = function (){
		App.uxa().open((_1(ForgotDialog)).setPromise(this._promise).end());
		this._promise = null;
		return this.hide();
	};
	
	tag.prototype.setup = function (){
		this._promise || (this._promise = new LongPromise());
		this.setSubmitLabel("Log in");
		return tag.prototype.__super__.setup.apply(this,arguments);
	};
	
	tag.prototype.onuxahide = function (){
		if (this._promise) { return this._promise.resolve(true) };
	};
	
	tag.prototype.body = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		return (t0 = this._body = this._body||(t0=_1('div',this)).flag('body').setContent([
			_1('a',t0.$,'A',t0).flag('githubButton').flag('lg-mb').on$(0,['tap','prevent','github'],this).setContent([
				t0.$.B || _1('i',t0.$,'B','A').dataset('icon','github'),
				"Log in with GitHub"
			],2),
			
			_1('h2',t0.$,'C',t0).setText("â€¦ or log in with email and password"),
			
			_1(TextField,t0.$,'D',t0).setType('text').setName('email').setLabel('Email'),
			_1(TextField,t0.$,'E',t0).setType('password').setName('password').setLabel('Password'),
			
			_1('div',t0.$,'F',t0).flag('extra').setContent([
				_1('p',t0.$,'G','F').setContent([
					"Don't have an account yet? ",
					t0.$.H || _1('a',t0.$,'H','G').on$(0,['tap','prevent','signup'],this).setText('Sign up')
				],2),
				_1('p',t0.$,'I','F').setContent([
					"Forgot your password? ",
					t0.$.J || _1('a',t0.$,'J','I').on$(0,['tap','prevent','forgot'],this).setText('Reset password')
				],2)
			],2)
		],2)).end((
			t0.$.B.end(),
			t0.$.D.end(),
			t0.$.E.end()
		,true));
	};
	
	tag.prototype.onuxasubmit = function (e,data){
		var self = this;
		e.halt();
		
		return self.uxa().queue().add(200,async function() {
			var user = await self.api().userAuthenticate(data.email,data.password,{models: true});
			if (!user) {
				throw new Error("Incorrect email/password");
			};
		});
	};
})
exports.AuthenticationDialog = AuthenticationDialog;

// TODO: move this away from here
Imba.extendTag('input', function(tag){
	tag.prototype.minlength = function(v){ return this.getAttribute('minlength'); }
	tag.prototype.setMinlength = function(v){ this.setAttribute('minlength',v); return this; };
	tag.prototype.maxlength = function(v){ return this.getAttribute('maxlength'); }
	tag.prototype.setMaxlength = function(v){ this.setAttribute('maxlength',v); return this; };
});

var SignupDialog = Imba.defineTag('SignupDialog', Dialog, function(tag){
	tag.prototype.promise = function(v){ return this._promise; }
	tag.prototype.setPromise = function(v){ this._promise = v; return this; };
	
	tag.prototype.onuxahide = function (){
		if (this._promise) { return this._promise.resolve(true) };
	};
	
	tag.prototype.body = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		return (t0 = this._body = this._body||(t0=_1('div',this)).flag('body').setContent([
			_1('h2',t0.$,'A',t0).setText("Sign up with email and password"),
			_1(TextField,t0.$,'B',t0).setType('email').setName('email').setLabel('Email').setRequired(true),
			_1(TextField,t0.$,'C',t0).setType('text').setName('name').setLabel('Name').setRequired(true),
			_1(TextField,t0.$,'D',t0).setType('password').setName('password').setLabel('Password').setRequired(true).setMinlength(5)
		],2)).end((
			t0.$.B.end(),
			t0.$.C.end(),
			t0.$.D.end()
		,true));
	};
	
	tag.prototype.onuxasubmit = function (e,data){
		var self = this;
		return self.uxa().queue().add(200,async function() {
			var user = await self.api().userCreate(data);
			if (!user) {
				throw new Error("User with email already exists");
			};
		});
	};
});


var ForgotDialog = Imba.defineTag('ForgotDialog', Dialog, function(tag){
	tag.prototype.promise = function(v){ return this._promise; }
	tag.prototype.setPromise = function(v){ this._promise = v; return this; };
	
	tag.prototype.onuxahide = function (){
		if (this._promise) { return this._promise.resolve(true) };
	};
	
	tag.prototype.body = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		return (t0 = this._body = this._body||(t0=_1('div',this)).flag('body').setContent([
			_1('h2',t0.$,'A',t0).setText("Reset password"),
			_1(TextField,t0.$,'B',t0).setType('email').setName('email').setLabel('Email')
		],2)).end((
			t0.$.B.end()
		,true));
	};
	
	tag.prototype.onuxasubmit = function (e,data){
		var self = this;
		return self.uxa().queue().add(200,async function() {
			var user = await self.api().rpc('userForgotPassword',[data.email]);
			if (user) {
				return self.uxa().flash(("Instructions for resetting your password been sent to " + (data.email)));
			} else {
				throw new Error("There is no user with the given email address");
			};
		});
	};
});

var ResetPasswordDialog = Imba.defineTag('ResetPasswordDialog', Dialog, function(tag){
	tag.prototype.token = function(v){ return this._token; }
	tag.prototype.setToken = function(v){ this._token = v; return this; };
	tag.prototype.aid = function(v){ return this._aid; }
	tag.prototype.setAid = function(v){ this._aid = v; return this; };
	
	tag.prototype.setup = function (){
		var self = this;
		self._status = "loading";
		self.setSubmitLabel("Reset");
		
		return self.uxa().queue().add(async function() {
			return self._status = await self.api().rpc('userResetPassword',[self.aid(),self.token()]);
		});
	};
	
	tag.prototype.body = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		return (t0 = this._body = this._body||(t0=_1('div',this)).flag('body')).setContent([
			(t0.$.A || _1('h2',t0.$,'A',t0).setText("Reset password")),
			(this._status == "loading") ? (
				(t0.$.B || _1('p',t0.$,'B',t0).setText("Loading..."))
			) : ((this._status == "invalid") ? (
				(t0.$.C || _1('p',t0.$,'C',t0).setText("Invalid reset link. Please try again."))
			) : ((this._status == "valid") ? (
				(t0.$.D || _1(TextField,t0.$,'D',t0).setType('password').setName('password').setLabel('New password').setRequired(true).setMinlength(5)).end()
			) : void(0)))
		],1);
	};
	
	tag.prototype.onuxasubmit = function (e,data){
		var self = this;
		return self.uxa().queue().add(200,async function() {
			var v_;
			var status = await self.api().rpc('userResetPassword',[self.aid(),self.token(),data.password]);
			if (status == "updated") {
				self.uxa().flash("Your password has been updated");
				return (App.router().url().setHash(v_ = ""),v_);
			} else {
				throw new Error("Something went wrong");
			};
		});
	};
})
exports.ResetPasswordDialog = ResetPasswordDialog;
