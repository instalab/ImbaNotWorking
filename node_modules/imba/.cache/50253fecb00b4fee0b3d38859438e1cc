function len$(a){
	return a && (a.len instanceof Function ? a.len() : a.length) || 0;
};
function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _2 = Imba.createTagList, _3 = Imba.createTagMap, _1 = Imba.createElement;
var Page = require('./Page').Page;
var UserAvatar = require('../components/UserAvatar').UserAvatar;
var Carousel = require('../components/Carousel').Carousel;
var CastTile = require('../components/CastTile').CastTile;
var PlaylistSection = require('../components/PlaylistSection').PlaylistSection;
var CollectionSection = require('../components/CollectionSection').CollectionSection;
var UserLinks = require('../components/UserLinks').UserLinks;
var GroupTile = require('../components/GroupTile').GroupTile;

var Format = require('../components/Formatters').Format;

var uxa$ = require('uxa'), Menu = uxa$.Menu, MenuItem = uxa$.MenuItem, IconButton = uxa$.IconButton;

var Tab = Imba.defineTag('Tab', function(tag){
	tag.prototype.name = function(v){ return this._name; }
	tag.prototype.setName = function(v){ this._name = v; return this; };
	tag.prototype.href = function(v){ return this._href; }
	tag.prototype.setHref = function(v){ this._href = v; return this; };
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).setChildren(
			$[0] || _1('a',$,0,this)
		,2).synced((
			$[0].setHref(this.href()).setContent(this.name(),3).end()
		,true));
	};
});

var Casts = Imba.defineTag('Casts', CollectionSection, function(tag){
	
	tag.prototype.groups = function(v){ return this._groups; }
	tag.prototype.setGroups = function(v){ this._groups = v; return this; };
	tag.prototype.__items = {watch: 'itemsDidSet',name: 'items'};
	tag.prototype.items = function(v){ return this._items; }
	tag.prototype.setItems = function(v){
		var a = this.items();
		if(v != a) { this._items = v; }
		if(v != a) { this.itemsDidSet && this.itemsDidSet(v,a,this.__items) }
		return this;
	};
	tag.prototype.__view = {watch: 'viewDidSet',name: 'view'};
	tag.prototype.view = function(v){ return this._view; }
	tag.prototype.setView = function(v){
		var a = this.view();
		if(v != a) { this._view = v; }
		if(v != a) { this.viewDidSet && this.viewDidSet(v,a,this.__view) }
		return this;
	};
	
	tag.prototype.filterGroup = function (item){
		// console.log "filterGroup!",item
		return (this.setView(item),item);
	};
	
	tag.prototype.itemsDidSet = function (items){
		var v_;
		return (this.setView(v_ = this.groups() && this.groups()[0] || null),v_);
	};
	
	tag.prototype.viewDidSet = function (view,prev){
		if (prev) {
			for (let o = prev[1], v, i = 0, keys = Object.keys(o), l = keys.length, k; i < l; i++){
				k = keys[i];v = o[k];if (!(view && view[k])) {
					this.items().filters().del(k);
				};
			};
		};
		
		if (view) {
			for (let o = view[1], v, i = 0, keys = Object.keys(o), l = keys.length, k; i < l; i++){
				k = keys[i];v = o[k];this.items().filters().set(k,v);
			};
		};
		this.render();
		return this;
	};
	
	
	tag.prototype.header = function (){
		var $ = this.$$ || (this.$$ = {}), t0, self = this;
		return (t0 = self._header = self._header||(t0=_1('header',self)).flag('header').flag('flat').setContent([
			_1('div',t0.$,'A',t0).flag('actions').setContent(t0.$.B || _1(IconButton,t0.$,'B','A').setAction('showoptions').setIcon('.'),2),
			_1('div',t0.$,'C',t0).flag('heading').flag('tabs')
		// <.count> items.len
		// <span.heading uxa:md=title>
		],2)).end((
			t0.$.B.end(),
			t0.$.C.setContent(
				(function tagLoop($0) {
					for (let i = 0, items = iter$(self.groups()), len = $0.taglen = items.length, item; i < len; i++) {
						item = items[i];
						($0[i] || _1('div',$0,i).flag('tab')).flagIf('selected',(item == self.view())).on$(0,['tap',['filterGroup',item]],self).setContent(item[0],3);
					};return $0;
				})(t0.$['D'] || _2(t0.$,'D',t0.$.C))
			,4)
		,true));
	};
});


var UserPage = Imba.defineTag('UserPage', Page, function(tag){
	
	tag.prototype.tabs = function(v){ return this._tabs; }
	tag.prototype.setTabs = function(v){ this._tabs = v; return this; };
	tag.prototype.__data = {watch: 'dataDidSet',name: 'data'};
	tag.prototype.data = function(v){ return this._data; }
	tag.prototype.setData = function(v){
		var a = this.data();
		if(v != a) { this._data = v; }
		if(v != a) { this.dataDidSet && this.dataDidSet(v,a,this.__data) }
		return this;
	};
	tag.prototype.__status = {'default': 404,name: 'status'};
	tag.prototype.status = function(v){ return this._status; }
	tag.prototype.setStatus = function(v){ this._status = v; return this; }
	tag.prototype._status = 404;
	tag.prototype.username = function(v){ return this._username; }
	tag.prototype.setUsername = function(v){ this._username = v; return this; };
	tag.prototype.groups = function(v){ return this._groups; }
	tag.prototype.setGroups = function(v){ this._groups = v; return this; };
	tag.prototype.uid = function(v){ return this._uid; }
	tag.prototype.setUid = function(v){ this._uid = v; return this; };
	
	var filters = [
		['All',{}],
		['Forks',{type: 'fork'}],
		['Playgrounds',{type: 'lab'}],
		['Tutorials',{type: 'tutorial'}],
		['Templates',{type: 'template'}]
	];
	
	tag.prototype.user = function (){
		return this.data();
	};
	
	tag.prototype.path = function (){
		return [this.data()];
	};
	
	tag.prototype.dataDidSet = function (data){
		var v_;
		if (!data) { return (this.setStatus(v_ = 404),v_) };
		
		this.setStatus(200);
		
		var me = data.id == this.api().uid();
		
		this.setTabs({
			casts: data.casts().sel({sort: '-edited_at'},function(_0) {
				return me || ((_0.type != 'tutorial' || _0.published_at) && _0.privacy == 'public');
			}),
			// playgrounds: data.casts.sel(sort: '-created_at') do $1:type == 'lab' and ($1:privacy == 'public' or me)
			// templates: data.casts.sel(sort: '-created_at') do $1:type == 'template' and ($1:privacy == 'public' or me)
			playlists: data.playlists().sel({sort: '-created_at'},function(_0) { return _0.privacy == 'public' || me; })
		});
		
		this.setGroups(this.api().db().groups().sel({sort: '-created_at'},function(_0) { return _0.creator_id == data.id; }));
		
		
		this._filters = [
			['Lessons',{type: 'tutorial'}],
			['Labs',{type: 'lab'}],
			['Templates',{type: 'template'}],
			['Forks',{type: 'fork'}]
		];
		
		if (me) {
			this._filters.push(['Drafts',{isDraft: true}]);
		};
		
		return;
	};
	
	tag.prototype.load = async function (queue){
		var v_;
		if (this.uid()) {
			return (this.setData(v_ = await this.api().prefetch(['user',this.uid()])),v_);
		} else {
			return (this.setData(v_ = await this.api().prefetch(['user',("@" + this.username())])),v_);
		};
	};
	
	tag.prototype.title = function (){
		if (this.data()) {
			if (this.data().username) {
				return ("" + (this.data().username) + " (" + (this.data().name) + ")");
			} else {
				return this.data().name || this.data().id;
			};
		} else {
			return "Not found";
		};
	};
	
	tag.prototype.tab = function (){
		return this.params().tab || 'casts';
	};
	
	tag.prototype.mount = function (){
		tag.prototype.__super__.mount.apply(this,arguments);
		this.schedule({events: true});
		return this.render();
	};
	
	tag.prototype.render = function (){
		var $ = this.$, self = this;
		return self.$open(0).setChildren($.$ = $.$ || [
			_1('header',$,0,self).setContent(
				$[1] || _1('section',$,1,0).setContent([
					_1(UserAvatar,$,2,1).setS(240),
					_1('h1',$,3,1).flag('name'),
					_1(UserLinks,$,4,1).flag('muted').flag('bullets'),
					_1('div',$,5,1).flag('clear')
				],2)
			,2),
			
			_1('article',$,6,self).flag('hsplit').setContent(
				$[7] || _1('section',$,7,6).flag('main').flag('livesize')
			,2)
		],2).synced((
			$[2].bindData(self,'data',[]).end(),
			$[3].setContent(self.data().name,3),
			$[4].bindData(self,'data',[]).end(),
			$[7].setContent([
				(self.groups() && len$(self.groups())) ? (
					($[8] || _1('div',$,8,7).flag('section').flag('Section').setContent([
						_1('header',$,9,8).flag('header').setContent($[10] || _1('h2',$,10,9).flag('title').setText("Courses"),2),
						_1(Carousel,$,11,8).flag('lg').setLimit(24)
					],2)).end((
						$[11].bindData(self,'groups',[]).setRenderer(GroupTile.Renderer).end()
					,true))
				) : void(0),
				
				($[12] || _1(Casts,$,12,7).flag('section').setTitle("## Casts").setSize('md')).setGroups(self._filters).setItems(self.tabs().casts).end(),
				(function tagLoop($0) {
					var $$ = $0.$iter();
					for (let i = 0, items = iter$(self.tabs().playlists), len = items.length, item; i < len; i++) {
						item = items[i];
						if (len$(item.item_ids)) {
							$$.push(($0[i] || _1(PlaylistSection,$0,i).flag('section')).setData(item).end());
						};
					};return $$;
				})($[13] || _3($,13,$[7]))
			],1)
		,true));
	};
})
exports.UserPage = UserPage;
