var self = {}, Imba = require('imba');
var hterm_dom$ = require("./hterm_dom"), hterm = hterm_dom$.hterm, lib = hterm_dom$.lib;

var buffer$ = require("./buffer"), TextStyling = buffer$.TextStyling, getWhitespace = buffer$.getWhitespace;

var colors = lib.colors.stockColorPalette;
var sheet = null;
var root = self;

self.colorToCss = function (color){
	if (typeof color == 'number') {
		return colors[color];
	} else {
		return ("rgb(" + (color[0]) + ", " + (color[1]) + ", " + (color[2]) + ")");
	};
};


exports.stylingToCss = self.stylingToCss = function (fields){
	var props = {};
	
	if (!fields) {
		return props;
	};
	
	var fg = fields[0];
	var bg = fields[1];
	var bitfield = fields[2];
	
	var isBold = bitfield & (1 << 0);
	var isInverse = bitfield & (1 << 6);
	
	if (isBold && typeof fg == 'number' && fg < 8) {
		fg += 8;
	};
	
	if (isInverse) {
		if (bg) {
			props.color = self.colorToCss(bg);
		} else {
			props.color = 'inverse';
		};
	} else if (fg) {
		props.color = self.colorToCss(fg);
	};
	
	if (isInverse) {
		if (fg) {
			props.backgroundColor = self.colorToCss(fg);
		} else {
			props.backgroundColor = 'inverse';
		};
	} else if (bg) {
		props.backgroundColor = self.colorToCss(bg);
	};
	
	if (isBold) {
		props.fontWeight = "bold";
	};
	
	return props;
};

exports.stylingToClassName = self.stylingToClassName = function (styling){
	sheet || (sheet = new TerminalStyleSheet());
	return sheet.classNameFor(styling);
};

function TerminalStyleSheet(){
	this._dom = Imba.document().createElement('style');
	this._css = "";
	this._classNames = {};
	Imba.document().head.appendChild(this._dom);
};

exports.TerminalStyleSheet = TerminalStyleSheet; // export class 
var ID = 0;
TerminalStyleSheet.prototype.css = function(v){ return this._css; }
TerminalStyleSheet.prototype.setCss = function(v){ this._css = v; return this; };

TerminalStyleSheet.prototype.classNameFor = function (styling){
	return this._classNames[styling] || (this._classNames[styling] = this.generate(styling));
};

TerminalStyleSheet.prototype.generate = function (styling){
	var dict;
	var className = ("therminal" + (ID++));
	// console.log(className, styling, root.stylingToCss(styling))
	this._css += ("." + className + " \{");
	
	for (let key in dict = root.stylingToCss(styling)){
		let value;
		value = dict[key];if (value == 'inverse') {
			if (key == 'color') {
				value = 'black';
			} else if (key == 'backgroundColor') {
				value = 'white';
			};
		};
		var cssKey = key.replace(/[A-Z]/g,'-$&');
		this._css += ("" + cssKey + ": " + value + " !important;\n");
	};
	
	this._css += "}\n";
	this._dom.textContent = this._css;
	return className;
};

// var $CSS = TerminalStyleSheet.new
// var style = <style>
// $CSS.connect(style.dom)
// document:head.appendChild(style.dom)