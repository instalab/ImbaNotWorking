var Imba = require('imba');
var Resource$ = require('../store/Resource'), Resource = Resource$.Resource, MASK = Resource$.MASK, ACCESS = Resource$.ACCESS;

// moving over to this type of resource
function Model(data,store){
	this._cache = {};
	this._data = {};
	this._store = store;
	this.patch(data);
	this;
};

Imba.subclass(Model,Resource);
exports.Model = Model; // export class 
Model.prototype.getAttribute = function (key){
	return this._data[key];
};

Model.prototype.setAttribute = function (key,value){
	console.log("Entity.setAttribute",key,value);
	return this;
};

Model.prototype.inspect = function (){
	return this._data;
};

Model.prototype.patch = function (data){
	if (this.v == data.v) {
		return this;
	};
	
	let diff;
	for (let v, i = 0, keys = Object.keys(data), l = keys.length, k; i < l; i++){
		k = keys[i];v = data[k];let prev = this._data[k];
		this._data[k] = v;
		if (v != prev && k != 'v') {
			diff || (diff = {});
			diff[k] = [prev,v];
		};
	};
	this._cache = {};
	this.v = data.v;
	
	// if path was changed we need to decache some stuff
	if (data.id) {
		this.id = data.id;
		this._store._map[data.id] = this;
	};
	
	if (diff) {
		this.patched(diff,data);
	};
	return this;
};

Model.prototype.patched = function (){
	return this;
};

Model.prototype.rpc = function (name){
	var $0 = arguments, i = $0.length;
	var params = new Array(i>1 ? i-1 : 0);
	while(i>1) params[--i - 1] = $0[i];
	return App.api().rpc(name,[this.id].concat(params));
};

Model.prototype.allowed = function (action,actor){
	return true;
};

Model.prototype.serialize = function (scop){
	var s = this.constructor._serializer;
	var uid;
	
	// somewhere else?
	if (true) {
		scop || (scop = this._db.scope());
		if (!this.allowed('read',scop)) { return null };
	};
	
	if (false) {};
	
	var obj = {};
	var raw = this._data;
	var id = this._data.id;
	for (let v, i = 0, keys = Object.keys(raw), l = keys.length, k; i < l; i++){
		k = keys[i];v = raw[k];if (s && s[k] !== undefined) {
			if (v === undefined) {
				v = null;
			};
			if (s[k] == MASK.NEVER) {
				continue;
			};
		} else if (k[0] == '_' || v == undefined) {
			continue;
		};
		obj[k] = v;
	};
	return obj;
};
