function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _2 = Imba.createTagList, _1 = Imba.createElement;

var Field = Imba.defineTag('Field', function(tag){
	tag.prototype.label = function(v){ return this._label; }
	tag.prototype.setLabel = function(v){ this._label = v; return this; };
	tag.prototype.desc = function(v){ return this._desc; }
	tag.prototype.setDesc = function(v){ this._desc = v; return this; };
	tag.prototype.multiline = function(v){ return this._multiline; }
	tag.prototype.setMultiline = function(v){ this._multiline = v; return this; };
	
	['disabled','placeholder','type','name','value','required','pattern','minlength','maxlength','autocomplete','formatter','autofocus'].map(function(key) {
		var setter = Imba.toCamelCase(("set-" + key));
		tag.prototype[key] = function(val) { return this.input()[key](); };
		return tag.prototype[setter] = function(val) {
			if (key == 'type') {
				this.setFlag('type',val);
			};
			this.input()[setter](val);
			return this;
		};
	});
	
	tag.prototype.bindData = function (target,path,args){
		this.input().bindData(target,path,args);
		return this;
	};
	
	tag.prototype.input = function (){
		let $ = this.$$ || (this.$$ = {});
		return (this._input = this._input||_1('input',this).flag('input').setPlaceholder(" ").setType('text')).end();
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).flag('field').flagIf('has-label',(!(!(this.label())))).setChildren([
			this.input(),
			this.label() ? (
				($[0] || _1('label',$,0,this)).setContent(this.label(),3)
			) : void(0),
			($[1] || _1('hr',$,1,this)),
			($[2] || _1('div',$,2,this).flag('help').flag('desc')).setContent(this.desc(),3)
		],1).synced();
	};
})
exports.Field = Field;

var TagInput = require('./TagInput').TagInput;

var TextField = Imba.defineTag('TextField', Field)
exports.TextField = TextField;

var TagField = Imba.defineTag('TagField', Field, function(tag){
	
	tag.prototype.input = function (){
		let $ = this.$$ || (this.$$ = {});
		return (this._in = this._in||_1(TagInput,this).flag('in')).end();
	};
})
exports.TagField = TagField;


var TextAreaProxy = Imba.defineTag('TextAreaProxy', 'textarea', function(tag){
	tag.prototype.owner = function(v){ return this._owner; }
	tag.prototype.setOwner = function(v){ this._owner = v; return this; };
	
	tag.prototype.onfocus = function (e){
		return this.owner().dom().focus();
	};
});

var Editable = Imba.defineTag('Editable', function(tag){
	tag.prototype.placeholder = function(v){ return this.getAttribute('placeholder'); }
	tag.prototype.setPlaceholder = function(v){ this.setAttribute('placeholder',v); return this; };
	tag.prototype.minlength = function(v){ return this.getAttribute('minlength'); }
	tag.prototype.setMinlength = function(v){ this.setAttribute('minlength',v); return this; };
	tag.prototype.maxlength = function(v){ return this.getAttribute('maxlength'); }
	tag.prototype.setMaxlength = function(v){ this.setAttribute('maxlength',v); return this; };
	tag.prototype.required = function(v){ return this.getAttribute('required'); }
	tag.prototype.setRequired = function(v){ this.setAttribute('required',v); return this; };
	tag.prototype.name = function(v){ return this.getAttribute('name'); }
	tag.prototype.setName = function(v){ this.setAttribute('name',v); return this; };
	tag.prototype.autofocus = function(v){ return this.getAttribute('autofocus'); }
	tag.prototype.setAutofocus = function(v){ this.setAttribute('autofocus',v); return this; };
	
	tag.prototype.build = function (){
		var self = this;
		self.setTabindex(0);
		try {
			self.dom().contentEditable = "plaintext-only";
		} catch (e) {
			self.dom().contentEditable = true;
		};
		
		self._raw = (_1(TextAreaProxy).flag('input').setTabindex("-1")).setOwner(self).end();
		self._raw.setValue = function(value) { return self.setValue(value); };
		return self;
	};
	
	tag.prototype.raw = function (){
		return this._raw;
	};
	
	tag.prototype.setAttribute = function (key,value){
		// console.log "Editable.setAttribute",key,value
		if (this._raw) { this.raw().setAttribute(key,value) };
		tag.prototype.__super__.setAttribute.apply(this,arguments);
		return this;
	};
	
	tag.prototype.setValue = function (value){
		if (!this._syncing && this.dom().innerText != value) {
			this.dom().innerText = value;
		};
		this.raw().dom().value = value;
		return this;
	};
	
	tag.prototype.value = function (){
		return this.dom().innerText;
	};
	
	tag.prototype.oninput = function (e){
		e.stop();
		this.raw().dom().value = this.value();
		this._syncing = true;
		this.raw().oninput(e);
		this._syncing = false;
		return this;
	};
	
	tag.prototype.commit = function (){
		if (this._raw._data) {
			let val = this._raw._data.getFormValue(this._raw);
			if (val != this._proxyVal) {
				this.setValue(this._proxyVal = val);
			};
		};
		return this;
	};
});

var TextArea = Imba.defineTag('TextArea', Field, function(tag){
	
	tag.prototype.input = function (){
		let $ = this.$$ || (this.$$ = {});
		return (this._input = this._input||_1(Editable,this).flag('input')).end();
	};
	
	tag.prototype.bindData = function (target,path,args){
		this.input().raw().bindData(target,path,args);
		return this;
	};
	
	tag.prototype.oninput = function (e){
		this.input().setValue(this.input().raw().value());
		return e.stop();
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).flag('field').flagIf('has-label',(!(!(this.label())))).setChildren([
			this.input().raw(),
			this._input,
			this.label() ? (
				($[0] || _1('label',$,0,this)).setContent(this.label(),3)
			) : void(0),
			($[1] || _1('hr',$,1,this)),
			($[2] || _1('div',$,2,this).flag('help').flag('desc')).setContent(this.desc(),3)
		],1).synced();
	};
})
exports.TextArea = TextArea;

var CheckBox = Imba.defineTag('CheckBox', Field, function(tag){
	
	tag.prototype.content = function(v){ return this._content; }
	tag.prototype.setContent = function(v){ this._content = v; return this; };
	
	tag.prototype.input = function (){
		let $ = this.$$ || (this.$$ = {});
		return (this._input = this._input||_1('input',this).flag('input').setType('checkbox')).end();
	};
	
	tag.prototype.bindData = function (target,path,args){
		(this._input || this.input()).bindData(target,path,args);
		return this;
	};
	
	tag.prototype.render = function (){
		return this.$open(0).flag('field').setChildren([
			this.input(),
			this._content
		],1).synced();
	};
})
exports.CheckBox = CheckBox;


var SelectField = Imba.defineTag('SelectField', Field, function(tag){
	
	tag.prototype.setOptions = function (val){
		let $ = this.$$ || (this.$$ = {}), t0;
		var input = this.input();
		(t0 = this._input = this._input||(t0=_1('select',this)).flag('input')).setContent(
			(function tagLoop($0) {
				for (let i = 0, items = iter$(val), len = $0.taglen = items.length, item; i < len; i++) {
					item = items[i];
					($0[i] || _1('option',$0,i)).setValue(item[0],1).setContent(item[1] || item[0],3).end();
				};return $0;
			})(t0.$['A'] || _2(t0.$,'A',this._input))
		,4).end();
		this;
		return this;
	};
	
	tag.prototype.input = function (){
		let $ = this.$$ || (this.$$ = {});
		return (this._input = this._input||_1('select',this).flag('input')).end();
	};
})
exports.SelectField = SelectField;
