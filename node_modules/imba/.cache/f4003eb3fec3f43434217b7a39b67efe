function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba');
function ScrimbaGesture(touch,options){
	var self = this;
	ScrimbaGesture.Active.push(self);
	self._catcher = function(e) {
		e.preventDefault();
		return e.stopPropagation();
	};
	
	self._options = options;
	self._touch = touch;
	self._type = options.type || 'gesture';
	self._handler = options.handler || touch.target();
	document.addEventListener('selectstart',self._catcher,true);
	
	self._checkForMultitouch = setTimeout(function() {
		if (Imba.Touch.count() > 1 && !touch._cancelled) {
			touch._active = false;
			return self.ontouchcancel(touch);
		};
	},300);
	
	self.delegate(("on" + (self._type) + "init"));
	self;
};

Imba.subclass(ScrimbaGesture,Imba.TouchGesture);
exports.ScrimbaGesture = ScrimbaGesture; // export class 
ScrimbaGesture.prototype.prevCursor = function(v){ return this._prevCursor; }
ScrimbaGesture.prototype.setPrevCursor = function(v){ this._prevCursor = v; return this; };
ScrimbaGesture.prototype.cursor = function(v){ return this._cursor; }
ScrimbaGesture.prototype.setCursor = function(v){ this._cursor = v; return this; };
ScrimbaGesture.prototype.type = function(v){ return this._type; }
ScrimbaGesture.prototype.setType = function(v){ this._type = v; return this; };
ScrimbaGesture.prototype.box = function(v){ return this._box; }
ScrimbaGesture.prototype.setBox = function(v){ this._box = v; return this; };
ScrimbaGesture.prototype.options = function(v){ return this._options; }
ScrimbaGesture.prototype.setOptions = function(v){ this._options = v; return this; };
ScrimbaGesture.prototype.touch = function(v){ return this._touch; }
ScrimbaGesture.prototype.setTouch = function(v){ this._touch = v; return this; };
ScrimbaGesture.prototype.handler = function(v){ return this._handler; }
ScrimbaGesture.prototype.setHandler = function(v){ this._handler = v; return this; };

ScrimbaGesture.Active = [];

ScrimbaGesture.options = function (touch,o){
	if(o === undefined) o = {};
	var handler = touch.sourceTarget().closest('[data-gesture]');
	// var type = handler and handler.dataset('gesture') or 'gesture'
	o.type || (o.type = handler && handler.dataset('gesture'));
	o.handler || (o.handler = handler);
	o.cursor || (o.cursor = window.getComputedStyle(touch.sourceTarget().dom()).cursor);
	
	if (o.type) {
		let parts = o.type.split(",");
		o.type = parts[0];
		
		for (let i = 0, items = iter$(parts), len = items.length; i < len; i++) {
			o[items[i]] || (o[items[i]] = true);
		};
	};
	return o;
};

ScrimbaGesture.wrap = function (touch,o){
	if(o === undefined) o = {};
	var handler = touch.sourceTarget().closest('[data-gesture]');
	// var type = handler and handler.dataset('gesture') or 'gesture'
	o.type || (o.type = handler && handler.dataset('gesture'));
	o.handler || (o.handler = handler);
	o.cursor || (o.cursor = window.getComputedStyle(touch.sourceTarget().dom()).cursor);
	
	// dont do for multitouch
	if (Imba.Touch.count() > 1) {
		return;
	};
	
	if (o.type) {
		let parts = o.type.split(",");
		o.type = parts[0];
		
		for (let i = 0, items = iter$(parts), len = items.length; i < len; i++) {
			o[items[i]] || (o[items[i]] = true);
		};
		return touch.extend(new this(touch,o));
	};
};

ScrimbaGesture.prototype.dx = function (){
	return this._touch.dx();
};
ScrimbaGesture.prototype.dy = function (){
	return this._touch.dy();
};
ScrimbaGesture.prototype.x = function (){
	return this._touch.x();
};
ScrimbaGesture.prototype.y = function (){
	return this._touch.y();
};

ScrimbaGesture.prototype.clamp = function (min,val,max,round){
	if(round === undefined) round = 1;
	return Math.min(Math.max(Math.round(val / round) * round,min),max);
};

ScrimbaGesture.prototype.target = function (){
	return this._touch.target();
};

ScrimbaGesture.prototype.onstart = function (t){
	var target_, v_;
	this._started = true;
	document.body.classList.add('touching');
	(target_ = this.target()) && target_.flag  &&  target_.flag('gesturing');
	if ((this.setCursor(v_ = this._options.cursor),v_)) {
		this.setPrevCursor(document.body.style.cursor);
		document.body.style.cursor = this.cursor();
	};
	return this.delegate(("on" + (this._type) + "start"));
};

ScrimbaGesture.prototype.onupdate = function (t){
	return this.delegate(("on" + (this._type) + "update"));
};

ScrimbaGesture.prototype.ontouchupdate = function (t){
	if (!this._started) {
		this.onstart(t);
		this._started = true;
	};
	if (this._started) { this.onupdate(t) };
	return this;
};

ScrimbaGesture.prototype.ontouchend = function (t){
	var target_;
	if (this._started) {
		(target_ = this.target()) && target_.unflag  &&  target_.unflag('gesturing');
		this.delegate(("on" + (this._type) + "end"));
	};
	this.teardown(t);
	return this;
};

ScrimbaGesture.prototype.ontouchcancel = function (t){
	var target_;
	if (this._started) {
		(target_ = this.target()) && target_.unflag  &&  target_.unflag('gesturing');
		this.delegate(("on" + (this._type) + "cancel"));
	};
	this.teardown(t);
	return this;
};

ScrimbaGesture.prototype.delegate = function (name){
	if (this[name]) {
		return this[name](this);
	} else if (this._handler && this._handler[name]) {
		return this._handler[name](this);
	} else if (this.target()[name]) {
		return this.target()[name](this);
	};
};

ScrimbaGesture.prototype.teardown = function (){
	let idx = ScrimbaGesture.Active.indexOf(this);
	if (idx >= 0) { ScrimbaGesture.Active.splice(idx,1) };
	clearTimeout(this._checkForMultitouch);
	document.body.style.cursor = this.prevCursor() || '';
	document.body.classList.remove('touching'); // what if there are other gestures?
	return document.removeEventListener('selectstart',this._catcher,true);
};

