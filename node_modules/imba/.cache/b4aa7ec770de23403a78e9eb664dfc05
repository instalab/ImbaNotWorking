var Imba = require('imba'), _1 = Imba.createElement;
var uxa$ = require('uxa'), Dialog = uxa$.Dialog, TextField = uxa$.TextField, TextArea = uxa$.TextArea;

// externs;

var PublishDialog = Imba.defineTag('PublishDialog', Dialog, function(tag){
	
	tag.prototype.model = function (){
		return this.data().model();
	};
	
	tag.prototype.toggleBusy = function (){
		return this.toggleFlag('busy');
	};
	
	tag.prototype.submitLabel = function (){
		return this.model().isPublished() ? "publish again" : "publish";
	};
	
	tag.prototype.body = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		return (t0 = this._body = this._body||(t0=_1('div',this)).flag('body').setContent(
			t0.$.A || _1('h1',t0.$,'A',t0).setText("Publish screencast")
		// <TextField type='text' name='title' label='Title' required=yes placeholder='Untitled cast' autocomplete="off">
		// <TextArea.mb-md name='description' label='Description' desc='Short description (markdown supported)'>
		// <input type="hidden" name='privacy' value='public'>
		,2));
	};
	
	tag.prototype.onuxashow = function (e){
		var v_;
		console.log('onuxashow',e);
		return (this.setFormData(v_ = this.data().model()),v_);
	};
	
	tag.prototype.onuxasubmit = function (e){
		// first validate forms no?
		var self = this;
		return self.uxa().queue().add(10000,async function() {
			// var values = formData
			// await model.update(
			// 	title: values:title
			// 	description: values:description
			// )
			var resp = await self.data().publish(self.values());
			self.log("response from await",resp);
			return self.api().analytics().cast(self.model().id,'Published');
		});
	};
})
exports.PublishDialog = PublishDialog;
