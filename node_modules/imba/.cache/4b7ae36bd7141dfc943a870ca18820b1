var Imba = require('imba'), _1 = Imba.createElement;
var LAYOUTMASK = require('../protocol').LAYOUTMASK;

var InterfaceView = require('./InterfaceView').InterfaceView;
var SlideAnimator = require('../util/SlideAnimator').SlideAnimator;

var SlideView = Imba.defineTag('SlideView', function(tag){
	
	tag.prototype.__svg = {watch: 'svgDidSet',name: 'svg'};
	tag.prototype.svg = function(v){ return this._svg; }
	tag.prototype.setSvg = function(v){
		var a = this.svg();
		if(v != a) { this._svg = v; }
		if(v != a) { this.svgDidSet && this.svgDidSet(v,a,this.__svg) }
		return this;
	};
	tag.prototype.__fetcher = {watch: 'fetcherDidSet',name: 'fetcher'};
	tag.prototype.fetcher = function(v){ return this._fetcher; }
	tag.prototype.setFetcher = function(v){
		var a = this.fetcher();
		if(v != a) { this._fetcher = v; }
		if(v != a) { this.fetcherDidSet && this.fetcherDidSet(v,a,this.__fetcher) }
		return this;
	};
	
	tag.prototype.setup = function (){
		// sref = data.id
		return this;
	};
	
	tag.prototype.fetcherDidSet = function (fn){
		var self = this;
		if (fn && fn.then) {
			fn.then(function(res) { return (self.setSvg(res),res); });
		};
		return;
	};
	
	tag.prototype.svgDidSet = function (data){
		this.body().dom().innerHTML = data;
		this.initAnimations();
		return this;
	};
	
	tag.prototype.body = function (){
		let $ = this.$$ || (this.$$ = {});
		return (this._body = this._body||_1('div',this).flag('body'));
	};
	
	tag.prototype.isWiderThanViewport = function (){
		let ratio = this.data().width() / this.data().height();
		return ratio > (this.data().space().vw() / (this.data().space().vh() - 30));
	};
	
	tag.prototype.initAnimations = function (){
		let svg = this._body.dom().firstElementChild;
		this._animator = new SlideAnimator(this.data(),svg,this.data().steps());
		this._animator.reset();
		return this;
	};
	
	tag.prototype.render = function (){
		this.$open(0).setFetcher((this.data().fetchBody())).setChildren(
			this.body()
		,3).synced();
		
		if (this._animator) {
			this._animator.setCurrentStep(this.data().currentStep());
		};
		
		return this;
	};
	
	tag.prototype.ontap = function (e){
		var link;
		try {
			if (link = e.native().target.closest('a')) {
				let target = link.getAttribute('target');
				e.stop();
				if (target) {
					e._responder = null;
				} else {
					e.prevent();
					window.open(link.getAttribute('href'),'_blank');
				};
			};
		} catch (e) { };
		return this;
	};
});

var SlidesBody = Imba.defineTag('SlidesBody', function(tag){
	
	tag.prototype.layoutMask = function (){
		return LAYOUTMASK.SCALED | LAYOUTMASK.BOUNDLESS;
	};
});

var SlidesView = Imba.defineTag('SlidesView', InterfaceView, function(tag){
	
	tag.prototype.data = function(v){ return this._data; }
	tag.prototype.setData = function(v){ this._data = v; return this; };
	
	tag.prototype.space = function (){
		return this.data().space();
	};
	
	tag.prototype.commit = function (){
		this.setEnabled(true); // data.visible
		tag.prototype.__super__.commit.apply(this,arguments);
		return this.flag('pip',!this.data().visible());
	};
	
	tag.prototype.tapBody = function (e){
		e.stop().prevent();
		// if data.visible
		//	data.visible = false
		if (!this.data().visible() && this.data().currentSlide()) {
			return (this.data().setVisible(true),true);
		};
	};
	
	tag.prototype.hide = function (){
		this.data().setVisible(false);
		return this;
	};
	
	tag.prototype.slideForId = function (id){
		let id_, $ = this.$$ || (this.$$ = {}), $1;
		return id && ($[($1 = 'id$' + id)] || _1(SlideView,$,$1,this)).setData(this.data().space().widgets().get(id)).end();
	};
	
	
	tag.prototype.targetForPointer = function (orig){
		return this._body;
	};
	
	tag.prototype.reflow = function (){
		let vw = this.space().vw();
		let vh = this.space().vh();
		
		let w = this.data().width();
		let h = this.data().height();
		
		let ratio = (this.data().width() || 16) / (this.data().height() || 9);
		let wide = ratio > (vw / vh);
		
		// early return if nothing has changed
		if (!this.invalidated(vw,vh,w,h)) { return this._sizing };
		
		let max = {};
		let pip = {left: 0,bottom: 0,width: 200};
		
		if (wide) {
			max.width = Math.ceil(vw * 0.9);
			max.height = Math.round(max.width / ratio);
		} else {
			max.height = Math.round((vh - 30) * 0.9);
			max.width = Math.ceil(max.height * ratio);
		};
		
		var vpad = (vh - max.height) * 0.5;
		var hpad = (vw - max.width) * 0.5;
		
		// max:left = '50%'
		// max:bottom = '50%'
		// max:marginBottom = '30px'
		// max:transform = "translate(-50%,50%)"
		// pip:transform = "scale({180 / max:width})"
		
		var yOffset = (vpad < 64) ? ((64 - vpad)) : 0;
		
		this._body.css(max);
		this.dom().style.setProperty('--pip-transform',("scale(" + (pip.width / max.width) + ")"));
		this.dom().style.setProperty('--max-transform',("translate(-50%,50%) translateY(-" + yOffset + "px)"));
		return this._sizing = {max: max,pip: pip};
	};
	
	tag.prototype.render = function (){
		// preload surrounding slides
		var $ = this.$, nextSlide_, prevSlide_, t0;
		(nextSlide_ = this.data().nextSlide()) && nextSlide_.fetchBody  &&  nextSlide_.fetchBody();
		(prevSlide_ = this.data().prevSlide()) && prevSlide_.fetchBody  &&  prevSlide_.fetchBody();
		
		this.$open(0).flagIf('empty',(!this.data().currentSlideId())).setChildren($.$ = $.$ || [
			this._cover = this._cover||_1('div',this).flag('cover').on$(0,['tap','hide'],this),
			t0 = this._body = this._body||(t0=_1(SlidesBody,this)).flag('body').on$(0,['tap','tapBody'],this)
		],2).synced((
			this._body.setSref(this.data().id()).setContent([
				(this._shadow = this._shadow||_1('div',t0).flag('shadow')),
				this.data().currentSlideId() ? (
					this._slideView = this.slideForId(this.data().currentSlideId())
				) : void(0)
			],1).end()
		,true));
		this.reflow();
		
		return this;
	};
})
exports.SlidesView = SlidesView;
