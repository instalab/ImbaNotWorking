var Imba = require('imba'), _1 = Imba.createElement;
var uxa$ = require('uxa'), Dialog = uxa$.Dialog, SelectField = uxa$.SelectField, Button = uxa$.Button, TextField = uxa$.TextField;
// import EntityAccess,RightsField from '../../site/components/Entities'
var MediaRecording = require('../util/MediaRecording').MediaRecording;
var MediaRecordingStats = require('./MediaRecordingStats').MediaRecordingStats;
var MicrophonePicker = require('./MicrophonePicker').MicrophonePicker;

var protocol$ = require('../protocol'), ROLES = protocol$.ROLES, MSG = protocol$.MSG;
var util = require('../util');

var CONSTRAINTS = [
	['noiseSuppression','Noise Suppression'],
	['echoCancellation','Echo Cancellation'],
	['autoGainControl','Auto-Gain'],
	['typingNoiseDetection','Typing Noise Detection']
];

var lastSelectedDevice = null;

Imba.extendTag('input', function(tag){
	tag.prototype.readonly = function(v){ return this.getAttribute('readonly'); }
	tag.prototype.setReadonly = function(v){ this.setAttribute('readonly',v); return this; };
});

var StreamDialog = Imba.defineTag('StreamDialog', Dialog, function(tag){
	
	tag.prototype.sample = function(v){ return this._sample; }
	tag.prototype.setSample = function(v){ this._sample = v; return this; };
	tag.prototype.options = function(v){ return this._options; }
	tag.prototype.setOptions = function(v){ this._options = v; return this; };
	
	tag.prototype.cancelLabel = function (){
		return "Cancel";
	};
	
	tag.prototype.submitLabel = function (){
		return "Start Broadcasting";
	};
	
	tag.prototype.branch = function (){
		return this.data();
	};
	
	tag.prototype.space = function (){
		return this.branch().space();
	};
	
	tag.prototype.model = function (){
		return this.data().model();
	};
	
	tag.prototype.body = function (){
		let $ = this.$$ || (this.$$ = {}), t0, t1;
		return (t0 = this._body = this._body||(t0=_1('div',this)).flag('body').setContent([
			_1('h1',t0.$,'A',t0).setText('Start broadcast'),
			_1(TextField,t0.$,'B',t0).setLabel("Title").setName('title').setAutocomplete("off").setPlaceholder('Title of stream...').setDesc("Title can be changed before publishing"),
			
			_1(MicrophonePicker,t0.$,'C',t0).flag('mb-md'),
			
			_1('div',t0.$,'D',t0).flag('field').setContent([
				_1('label',t0.$,'E','D').setText("Options"),
				_1('div',t0.$,'F','D').flag('field').flag('checkbox').setContent([
					_1('input',t0.$,'G','F').setType('checkbox'),
					_1('label',t0.$,'H','F').setText("Broadcast audio to viewers")
				],2),
				_1('div',t0.$,'I','D').flag('field').flag('checkbox').setContent([
					_1('input',t0.$,'J','I').setType('checkbox'),
					_1('label',t0.$,'K','I').setText("Include pointer")
				],2),
				_1('div',t0.$,'L','D').flag('field').flag('checkbox').setContent([
					_1('input',t0.$,'M','L').setType('checkbox'),
					_1('label',t0.$,'N','L').setText("Record session to server")
				],2)
			],2),
			
			t1 = (t1=_1('div',t0.$,'O',t0)).flag('field').setContent([
				this._link = this._link||_1('input',t1).flag('link').setType('text').setReadonly('readonly'),
				_1('label',t0.$,'P',t1).setText("Shareable link"),
				_1('div',t0.$,'Q',t1).flag('help').setText("Will be copied to clipboard when broadcast is started")
			],2),
			// <RightsField[options] key='visibility' label="Visibility">
			_1('p',t0.$,'R',t0).flag('muted').flag('sm').setText("This is an early test of Scrimba Live. You must be signed in at scrimba.com *before* starting to stream.")
		],2)).end((
			t0.$.B.bindData(this.options(),'title').end(),
			t0.$.C.bindData(this.options().setup,'mic').end(),
			t0.$.G.bindData(this.options().setup,'broadcastAudio').end(),
			t0.$.J.bindData(this.options().setup,'pointer').end(),
			t0.$.M.bindData(this.options().setup,'persist').end(),
			this._link.bindData(this.options(),'link').end()
		,true));
	};
	
	tag.prototype.footer = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		return (t0 = this._footer = this._footer||(t0=_1('footer',this)).flag('footer').setContent(t0.$.A || _1('div',t0.$,'A',t0).flag('spaced').flag('bar').flag('justify-end').setContent([
			_1(Button,t0.$,'B','A').flag('link').setType('button').setLabel("Cancel").on$(0,['tap','tapDismiss'],this),
			_1(Button,t0.$,'C','A').flag('primary').setType('submit').setLabel("Start Broadcasting").on$(0,['tap','copyLink'],this)
		],2),2)).end((
			t0.$.B.end(),
			t0.$.C.end()
		,true));
	};
	
	tag.prototype.copyLink = function (e){
		this._link.dom().select();
		document.execCommand("copy");
		// remove selection
		e.target().focus();
		this.uxa().flash("Link copied to clipboard");
		return this;
	};
	
	tag.prototype.setup = function (){
		let defaults = {
			mic: {
				deviceId: 'default',
				autoGainControl: true
			},
			pointer: true,
			live: true,
			persist: false,
			broadcastAudio: true
		};
		this._options = {
			setup: defaults,
			title: this.space().model().title(),
			visibility: this.space().model().visibility() || ROLES.MEMBER
		};
		
		this._options.setup = this.api().localStore().getobj('stream:defaults',defaults);
		return tag.prototype.__super__.setup.apply(this,arguments);
	};
	
	tag.prototype.mount = function (){
		this._options.link = ("" + (document.location.href)); // /{api.pid}
		this.schedule({events: true,interval: 1000});
		return this;
	};
	
	tag.prototype.unmount = function (){
		return this.unschedule();
	};
	
	tag.prototype.onuxasubmit = function (e){
		var self = this;
		self.log('onsubmit',self.options());
		var options = self.options();
		self.api().localStore().setobj('stream:defaults',options.setup);
		
		return self.uxa().queue().add(300,async function() {
			var id;
			var user = await self.api().tryLogin();
			console.log("returned from api tryLogin",user);
			self.space().trunk().startRecording(options.setup);
			return self;
			
			// socket might disconnect now?
			let o = {
				visibility: options.visibility,
				title: options.title
			};
			// what if it is not saved?
			let rest = await self.api().request([MSG.SCRIMSTART,self.model().id,o]);
			console.log("returned from api.request",rest);
			// let res = await model.save(
			// 	uid: api.uid
			// 	pid: api.pid
			// 	visibility: options:visibility
			// 	title: options:title
			// )
			await self.branch().record(options.setup);
			return id = self.branch().id();
		});
	};
})
exports.StreamDialog = StreamDialog;
