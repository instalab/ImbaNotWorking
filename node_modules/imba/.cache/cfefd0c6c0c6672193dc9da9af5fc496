var self = {};
var protocol$ = require('../../protocol'), SCON = protocol$.SCON, KEYS = protocol$.KEYS, ACTION = protocol$.ACTION;

exports.serializeReferences = self.serializeReferences = function (text){
	var specialRe = /\/\*§SR§(\w+)§START\*\/([^]*?)\/\*§SR§END\*\//gm;
	return text.replace(specialRe,function(m,name,content) {
		return ("/*§SR§" + name + "§*/");
	});
};

exports.deserializeReferences = self.deserializeReferences = function (text,map){
	var specialRe = /\/\*§SR§(\w+)§\*\//gm;
	return text.replace(specialRe,function(match,ref) {
		var val = (map instanceof Function) ? map(text,ref) : map[ref];
		return ("/*§SR§" + ref + "§START*/") + val + "/*§SR§END*/";
	});
};


exports.wrapReferencedValue = self.wrapReferencedValue = function (ref,value,type){
	if(type === undefined) type = 'html';
	if (type == 'css') {
		return ("/*§SR§" + ref + "§START*/" + value + "/*§SR§END*/");
	} else if (type == 'html') {
		return ("<!--§SR§" + ref + "§START-->" + value + "<!--§SR§END-->");
	} else {
		return '';
	};
};

exports.serializeAttributes = self.serializeAttributes = function (node){
	var attrs = [];
	
	Array.from(node.attributes).forEach(function(attr) {
		let key = SCON.keyToRef(attr.name);
		attrs.push(key);
		return attrs.push(attr.value || null);
	});
	
	attrs.RAW = true;
	return attrs;
};


exports.serializeNode = self.serializeNode = function (doc,node,force,excludeSelf){
	var item;
	var prev;
	
	var walker = doc.createNodeIterator(node,NodeFilter.SHOW_TEXT,null);
	while (item = walker.nextNode()){
		var adjacent = prev && item.previousSibling == prev;
		var empty = item.textContent == "";
		
		if (adjacent || empty) {
			if (!force) { return self.serializeNode(doc,node.cloneNode(true),true,excludeSelf) };
			
			if (empty) {
				// rather replace - no?
				item.parentNode.insertBefore(doc.createComment('§S§B'),item);
			} else if (adjacent) {
				item.parentNode.insertBefore(doc.createComment('§S§'),item);
			};
		};
		
		prev = item;
	};
	
	var text = excludeSelf ? node.innerHTML : node.outerHTML;
	var ignoreRe = /\/\*SCRIMBA:IGNORE:START\*\/([^]*?)\/\*SCRIMBA:IGNORE:END\*\//gm;
	text = text.replace(ignoreRe," ");
	text = self.serializeReferences(text);
	return text;
};
