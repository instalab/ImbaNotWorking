function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _1 = Imba.createElement;

var NotFoundPage = require('./pages/NotFoundPage').NotFoundPage;
var ErrorPage = require('./pages/ErrorPage').ErrorPage;

var HomePage = require('./pages/HomePage').HomePage;
var UserPage = require('./pages/UserPage').UserPage;
var SpacePage = require('./pages/SpacePage').SpacePage;
var LoginPage = require('./pages/LoginPage').LoginPage;
var AboutPage = require('./pages/AboutPage').AboutPage;
var PlaylistPage = require('./pages/PlaylistPage').PlaylistPage;
var GroupPage = require('./pages/GroupPage').GroupPage;
var SearchPage = require('./pages/SearchPage').SearchPage;
var TrackingPage = require('./pages/TrackingPage').TrackingPage;
var TopicPage = require('./pages/TopicPage').TopicPage;

var Url = require('./utils/url').Url;
var Router = require('./utils/router').Router;
var UserAvatar = require('./components/UserAvatar').UserAvatar;

var CastTile$ = require('./components/CastTile'), CastTile = CastTile$.CastTile, CastListItem = CastTile$.CastListItem;
var PlaylistTile = require('./components/PlaylistTile').PlaylistTile;

// Dialogs
var CastCreateDialog = require('./components/CastCreateDialog').CastCreateDialog;
var CastDialog = require('./components/CastDialog').CastDialog;
var AddToPlaylistDialog = require('./components/AddToPlaylistDialog').AddToPlaylistDialog;
var PlaylistCreateDialog = require('./components/PlaylistCreateDialog').PlaylistCreateDialog;
var PlaylistDialog = require('./components/PlaylistDialog').PlaylistDialog;
var ResetPasswordDialog = require('./components/AuthenticationDialog').ResetPasswordDialog;
var CollectionDialog = require('./components/CollectionDialog').CollectionDialog;
var GroupJoinDialog = require('./components/GroupJoinDialog').GroupJoinDialog;

// Menus
var CastMenu = require('./components/CastMenu').CastMenu;
var UserMenu = require('./components/UserMenu').UserMenu;
var PlaylistMenu = require('./components/PlaylistMenu').PlaylistMenu;

var SiteHeader = require('./Header').SiteHeader;

var tracking = require('../scrimba/tracking');

var uxa$ = require('uxa'), Button = uxa$.Button, IconButton = uxa$.IconButton, Actionable = uxa$.Actionable, Indicator = uxa$.Indicator;

var Scrimba = Imba.defineTag('Scrimba', 'div', function(tag){
	
	tag.prototype.api = function(v){ return this._api; }
	tag.prototype.setApi = function(v){ this._api = v; return this; };
	tag.prototype.__url = {watch: 'urlDidSet',name: 'url'};
	tag.prototype.url = function(v){ return this._url; }
	tag.prototype.setUrl = function(v){
		var a = this.url();
		if(v != a) { this._url = v; }
		if(v != a) { this.urlDidSet && this.urlDidSet(v,a,this.__url) }
		return this;
	};
	tag.prototype.__page = {watch: 'pageDidSet',name: 'page'};
	tag.prototype.page = function(v){ return this._page; }
	tag.prototype.setPage = function(v){
		var a = this.page();
		if(v != a) { this._page = v; }
		if(v != a) { this.pageDidSet && this.pageDidSet(v,a,this.__page) }
		return this;
	};
	tag.prototype.requestedPage = function(v){ return this._requestedPage; }
	tag.prototype.setRequestedPage = function(v){ this._requestedPage = v; return this; };
	
	tag.prototype.req = function(v){ return this._req; }
	tag.prototype.setReq = function(v){ this._req = v; return this; };
	tag.prototype.router = function(v){ return this._router; }
	tag.prototype.setRouter = function(v){ this._router = v; return this; };
	
	tag.prototype.user = function (){
		return this.api().user();
	};
	tag.prototype.uid = function (){
		return this.api().uid();
	};
	tag.prototype.sid = function (){
		return this.api().sid();
	};
	
	tag.prototype.build = function (){
		if (false) {};
		this.onwinresize = this.onwinresize.bind(this);
		return this;
	};
	
	tag.prototype.scrollElement = function (){
		return document.scrollingElement || document.body;
	};
	
	tag.prototype.scrollTop = function (){
		return this.scrollElement().scrollTop;
	};
	
	tag.prototype.setScrollTop = function (val){
		this.scrollElement().scrollTop = val;
		this;
		return this;
	};
	
	tag.prototype.root = function (){
		return this;
	};
	
	tag.prototype.doc = function (){
		return Imba.getTagForDom(document.documentElement);
	};
	
	tag.prototype.onwinresize = function (e){
		// log 'winresize',e
		// return
		
		var vw = window.innerWidth;
		var vh = window.innerHeight;
		var dw = this._viewport.width - vw;
		var dh = this._viewport.height - vh;
		
		this._viewport.width = vw;
		this._viewport.height = vh;
		
		// should be possible to override navbar-persist here?
		// var drawerMode = vw > 1200 ? "pin" : "float"
		// doc.setFlag('drawerMode',"drawer-{drawerMode}")
		this.doc().setFlag('drawerMode',"drawer-float");
		// should happen inside space?
		this.doc().setFlag('sidebarMode',("sidebar-" + ((vw > 800) ? 'pin' : 'float')));
		
		this.doc().flagIf('odd-width',vw % 2 != 0);
		this.doc().flagIf('odd-height',vh % 2 != 0);
		return this;
	};
	
	tag.prototype.livesize = function (){
		if (!false) { return };
		
		for (let i = 0, items = iter$(document.querySelectorAll('.livesize')), len = items.length, el; i < len; i++) {
			el = items[i];
			var w = el.offsetWidth;
			if (el._tag) {
				let flag = Math.min(Math.round(w / 100),14);
				el._tag.setFlag('livesize',("w" + flag));
			};
		};
		return;
	};
	
	tag.prototype.setup = function (){
		var self = this, m;
		self._pages = {};
		self._history = [];
		self._viewport = {width: 0,height: 0};
		
		self.flag('desktop',!self.api().ua().isMobile());
		self.flag('mobile',self.api().ua().isMobile());
		self.flag('phone',self.api().ua().isPhone());
		self.flag('tablet',self.api().ua().isTablet());
		
		self.flag('safari',self.api().ua().isSafari());
		self.flag('ios',self.api().ua().isIOS());
		
		if (false) {};
		
		self._router = new Router(self,new Url(true && self.req()));
		
		if (m = self._router.hash().match(/reset:([^:]+):([^:]+)/)) {
			setTimeout(function() {
				return self.uxa().open((_1(ResetPasswordDialog)).setAid(m[1]).setToken(m[2]).end());
			});
		};
		
		self.api().uid() && self.uxa().queue().add(500,function() {
			return self.api().prefetch('viewings');
		});
		
		self.uxa().queue().on('idle',function() {
			let $ = this.$$ || (this.$$ = {}), $1 = this.$$ || (this.$$ = {});
			if (self.uxa().queue().failed()) {
				for (let i = 0, items = iter$(self.uxa().queue().errors()), len = items.length; i < len; i++) {
					self.reportError(items[i]._uxa.error);
				};
				self.uxa().queue().reset();
				self.setRequestedPage((self._errorPage = self._errorPage||_1(ErrorPage,self).flag('errorPage')).end());
			};
			
			// do we know if this is the page that is loaded?
			// console.log "requestedPage",requestedPage.name,uxa.queue.error
			self.requestedPage().setIsLoaded(true);
			var status = self.requestedPage().status();
			
			if (status != 200) {
				console.log("status?",status);
				self.setRequestedPage((self._notFoundPage = self._notFoundPage||_1(NotFoundPage,self).flag('notFoundPage')).end());
			};
			
			if (self.requestedPage() != self.page()) {
				self.setPage(self.requestedPage());
			};
			
			self.refreshTitle();
			self.header().setPage(self.page());
			self.render();
			self.header().refresh();
			
			// mount after the first load
			if (false && !self.dom().offsetParent) {
				document.body.innerHTML = '';
				Imba.mount(self);
				Imba.commit();
			} else {
				Imba.commit();
			};
			
			if (self.page()._timeMark) {
				self.page()._timeMark.end();
				return self.page()._timeMark = null;
			};
		});
		
		self.router().on('change',function(path,options) {
			return (self.setUrl(path),path);
		});
		return self;
	};
	
	tag.prototype.pageDidSet = function (page){
		if (page) {
			return this.setFlag('page','page-' + page.name());
		};
	};
	
	tag.prototype.matchUrl = function (url){
		var m;
		var names = {
			id: '[\\w-]+',
			pid: 'p[\\w-]+',
			cid: 'c[\\w-]+',
			uid: 'u[\\w-]+',
			gid: 'g[\\w-]+'
		};
		
		var match = function(url,pattern) {
			if ((typeof pattern=='string'||pattern instanceof String)) {
				pattern = pattern.replace(/\:(\w+)/g,function(m,name) {
					return names[name] || m;
				});
				
				// pattern = pattern.replace(':id', '[\\w-]+')
				pattern = new RegExp(("^" + pattern));
			};
			return url.match(pattern);
		};
		
		if (m = match(url,'/$')) {
			return {target: '$home'};
		} else if (m = match(url,'/about$')) {
			return {target: '$about'};
		} else if (m = match(url,'/(:uid)')) {
			return {target: m[1]};
		} else if (m = match(url,'/(@|u/)(:id)')) {
			return {target: '$user',username: m[2]};
		} else if (m = match(url,'/c(asts?)?/(:id)')) {
			return {target: m[2]};
		} else if (m = match(url,'/t/(:id)')) {
			return {target: '#' + m[1]};
		} else if (m = match(url,'/g/(:gid)')) {
			return {target: m[1]};
		} else if (m = match(url,'/p/(:pid)/(:cid)')) {
			return {target: m[2],pid: m[1]};
		} else if (m = match(url,'/p(laylist)?/(:id)')) {
			return {target: m[2]};
		} else if (m = match(url,'/search')) {
			var q = this.router().url().queryParams().q;
			return {target: '$search',query: q};
		} else if (m = match(url,'/debug/tracking/(:id)')) {
			return {target: '$tracking',sid: m[1]};
		} else {
			return {target: '$404'};
		};
	};
	
	tag.prototype.urlDidSet = function (url,prev){
		var $ = this.$$ || (this.$$ = {}), $1 = this.$$ || (this.$$ = {}), $2 = this.$$ || (this.$$ = {}), $3 = this.$$ || (this.$$ = {}), $4 = this.$$ || (this.$$ = {}), $5 = this.$$ || (this.$$ = {}), $6 = this.$$ || (this.$$ = {}), $7 = this.$$ || (this.$$ = {}), $8 = this.$$ || (this.$$ = {}), $9 = this.$$ || (this.$$ = {}), $10 = this.$$ || (this.$$ = {}), self = this;
		var prevIdx = self._history.indexOf(prev);
		var currIdx = self._history.indexOf(url);
		var m;
		var req;
		
		var pageRoute = self.matchUrl(url);
		self.api().sendTracking(tracking.TYPES.ENTER,[pageRoute]);
		
		var target = pageRoute.target;
		
		if (target == '$home') {
			req = (self._homePage = self._homePage||_1(HomePage,self).flag('homePage')).end();
		} else if (target == '$about') {
			req = (self._aboutPage = self._aboutPage||_1(AboutPage,self).flag('aboutPage')).end();
		} else if (target == '$user') {
			req = (self._usernamePage = self._usernamePage||_1(UserPage,self).flag('usernamePage')).setUsername(pageRoute.username).end();
		} else if (target[0] == 'u') {
			req = (self._userPage = self._userPage||_1(UserPage,self).flag('userPage')).setUid(target).end();
		} else if (target[0] == 'c') {
			req = (self._spacePage = self._spacePage||_1(SpacePage,self).flag('spacePage')).setCid(target).setPid(pageRoute.pid).end();
		} else if (target[0] == 'g') {
			req = (self._groupPage = self._groupPage||_1(GroupPage,self).flag('groupPage')).setGid(target).end();
		} else if (target[0] == 'p') {
			req = (self._plPage = self._plPage||_1(PlaylistPage,self).flag('plPage')).setPid(target).end();
		} else if (target[0] == '#') {
			req = (self._topicPage = self._topicPage||_1(TopicPage,self).flag('topicPage')).setTid(target).end();
		} else if (target == '$search') {
			req = (self._searchPage = self._searchPage||_1(SearchPage,self).flag('searchPage')).setQuery(pageRoute.query).end();
		} else if (target == '$tracking') {
			req = (self._trackingPage = self._trackingPage||_1(TrackingPage,self).flag('trackingPage')).setSid(pageRoute.sid).end();
		} else if (target == '$404') {
			req = (self._notFoundPage = self._notFoundPage||_1(NotFoundPage,self).flag('notFoundPage')).end();
		};
		
		req.setIsLoaded(false);
		self.setRequestedPage(req);
		
		// is it correct to try to reload no matter what? Even if the url only changes slightly?
		if (false) {};
		
		self.uxa().queue().add(2000,function() {
			return self.requestedPage().load();
		});
		
		if (currIdx >= 0) {
			self.log("navigate",url,currIdx,prevIdx);
			self.setPage(self.requestedPage());
			self.setScrollTop(0);
			self.render();
		} else {
			self._history.push(url);
		};
		
		return self;
	};
	
	tag.prototype.reportError = function (err){
		console.error(err);
		if (window._opbeat) {
			return window._opbeat('captureException',err);
		};
	};
	
	tag.prototype.load = function (){
		if (this.uxa().queue().state() == 'idle') {
			return Promise.resolve(this);
		} else {
			return this.uxa().queue();
		};
	};
	
	tag.prototype.mount = function (){
		this.log("Scrimba#mount",document.visibilityState);
		this.api().socket();
		return this.livesize();
	};
	
	tag.prototype.router = function (){
		return this._router;
	};
	
	tag.prototype.tapLogin = async function (){
		return await this.api().tryLogin();
	};
	
	tag.prototype.refreshTitle = function (){
		if (false) {};
	};
	
	tag.prototype.onuxaaction = function (e,data){
		// log "uxaaction",data
		var self = this;
		var params = null;
		var action = (data instanceof Array) ? data[0] : data;
		
		if (data instanceof Array) {
			params = data.map(function(item) {
				if (typeof item == 'object') {
					if (item.id) {
						return (item.id instanceof Function) ? item.id() : item.id;
					} else {
						return 'object';
					};
				} else {
					return item;
				};
			});
		};
		
		return setTimeout(function() { return self.api().analytics().sendEvent('uxa',action,JSON.stringify(params)); },0);
	};
	
	tag.prototype.onsignout = function (e,data){
		return this.api().tryLogout();
	};
	
	tag.prototype.onsignin = function (e){
		return this.api().tryLogin();
	};
	
	tag.prototype.onaddplaylist = function (e,data){
		return this.uxa().open((_1(PlaylistCreateDialog)).setData(data).end());
	};
	
	tag.prototype.onaddcast = async function (e,params){
		await this.api().tryLogin();
		var pars = {type: params[0],uid: this.api().uid()};
		return this.uxa().open((_1(CastCreateDialog)).setData(pars).end());
	};
	
	tag.prototype.oncastopen = function (e,params){
		e.halt();
		let cast = params[0];
		let playlist = params[1];
		let url = cast.url(playlist);
		
		this.log('oncastopen',cast,url);
		
		if (this.router().path() != url) {
			return this.router().go(url);
		};
	};
	
	tag.prototype.oncastedit = function (e,cast){
		this.log('onspaceedit',e);
		return this.uxa().open((_1(CastDialog).flag('modal')).setData(cast).setFormData(cast).end());
	};
	
	tag.prototype.oncastjoinplaylist = function (e,cast){
		return this.uxa().open((_1(AddToPlaylistDialog)).setData(cast).end());
	};
	
	tag.prototype.oncastfeature = function (e,cast){
		// TODO uxa.confirm
		return cast.feature();
	};
	
	tag.prototype.oncastunfeature = function (e,cast){
		// TODO uxa.confirm
		return cast.unfeature();
	};
	
	tag.prototype.oncastdel = async function (e,model){
		var txt = ("## Are you sure you want to delete " + (model.title) + "?\nThis action is not revertable.");
		var res = await e.uxa().confirm(txt);
		console.log("result from castdel",res);
		if (res) {
			return this.api().rpc('castDel',[model.id]);
		};
	};
	
	tag.prototype.oncastmenu = function (e,data){
		e.halt();
		if (data instanceof Array) {
			return e.uxa().open((_1(CastMenu)).bindData(data,0).setContext(data[1]).end());
		} else {
			return e.uxa().open((_1(CastMenu)).setData(data).end());
		};
	};
	
	tag.prototype.ongroupjoin = async function (e,group){
		e.halt();
		await this.api().tryLogin();
		if (this.api().user()) {
			return this.uxa().open((_1(GroupJoinDialog)).setData(group).end());
		};
	};
	
	tag.prototype.onplaylistmenu = function (e,model){
		e.halt();
		return e.uxa().open((_1(PlaylistMenu)).setData(model).end());
	};
	
	tag.prototype.onplaylistedit = function (e,model){
		return this.uxa().open((_1(PlaylistDialog)).setData(model).end());
	};
	
	tag.prototype.onplaylistdel = async function (e,model){
		var txt = ("## Are you sure you want to delete " + (model.title) + "?\nThis action is not revertable.");
		var res = await e.uxa().confirm(txt);
		console.log("result from castdel",res);
		if (res) {
			return this.api().rpc('playlistDel',[model.id]);
		};
	};
	
	tag.prototype.oncollectionlist = function (e,list){
		return this.uxa().open((_1(CollectionDialog).flag('vpanel')).setData(list).setRenderer(CastListItem.Renderer).end());
	};
	
	tag.prototype.ontoggledrawer = function (){
		return this.toggleFlag('show-drawer');
	};
	
	tag.prototype.onusermenu = function (e,user){
		return e.uxa().open((_1(UserMenu)).setData(user).end());
	};
	
	tag.prototype.onbeforenavigate = function (e){
		var page_;
		this.log('onbeforenavigate',e,e.data());
		(page_ = this.page()) && page_.onbeforenavigate  &&  page_.onbeforenavigate(e);
		return this;
	};
	
	tag.prototype.header = function (){
		let $ = this.$$ || (this.$$ = {});
		return (this._header = this._header||_1(SiteHeader,this).flag('header').flag('masthead').flag('bar').flag('flat')).setData(this).end();
	};
	
	tag.prototype.render = function (){
		return this.$open(0).setChildren([
			false ? true : void(0),
			this.page().end(),
			this.header()
		],1).synced();
	};
	
	
	tag.prototype.touch = function (){
		if (this._page) {
			Imba.ticker().add(this);
			return Imba.Scheduler.event({type: 'dirty'});
		};
	};
	
	tag.prototype.tick = function (){
		return this.render();
	};
	
	tag.prototype.commit = function (){
		return this;
	};
})
exports.Scrimba = Scrimba;
