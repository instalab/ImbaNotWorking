function len$(a){
	return a && (a.len instanceof Function ? a.len() : a.length) || 0;
};
function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _2 = Imba.createTagList, _3 = Imba.createTagMap, _1 = Imba.createElement;
// externs;
if (false) {};

var SCON = require('../protocol').SCON;

var InterfaceView = require('./InterfaceView').InterfaceView;

var UserAvatar = require('../../site/components/UserAvatar').UserAvatar;
var Format = require('../../site/components/Formatters').Format;
var CastPreview = require('../../site/components/CastPreview').CastPreview;

var uxa$ = require('uxa'), Button = uxa$.Button, TextArea = uxa$.TextArea, Form = uxa$.Form, Dialog = uxa$.Dialog, MenuItem = uxa$.MenuItem, IconButton = uxa$.IconButton;

var SpaceDrawerHeader = Imba.defineTag('SpaceDrawerHeader', function(tag){
	
	tag.prototype.render = function (){
		return this.$open(0).flag('NavBar').setText("Meta").synced();
	};
})
exports.SpaceDrawerHeader = SpaceDrawerHeader;

var CodeReference = Imba.defineTag('CodeReference', 'span', function(tag){
	
	tag.prototype.render = function (){
		var $ = this.$;
		let ref = SCON.decodeURI(this.data().uri || this.data()) || {};
		let sel = ref.selection;
		
		return this.$open(0).setChildren([
			ref.path ? (
				($[0] || _1('span',$,0,this).flag('path')).setContent(ref.path.substr(1),3)
			) : void(0),
			sel ? (
				($[1] || _1('span',$,1,this).flag('loc')).flagIf('whole',(sel[4])).flagIf('oneline',(sel[0] == sel[2])).setContent([
					($[2] || _1('span',$,2,1).flag('a').setContent([
						"#L",
						_1('span',$,3,2).flag('line'),
						_1('span',$,4,2).flag('col')
					],2)).end((
						$[3].setContent(sel[0],3),
						$[4].setText(":" + sel[1])
					,true)),
					(sel[0] != sel[2] || sel[1] != sel[3]) ? (
						($[5] || _1('span',$,5,1).flag('b').setContent([
							"-",
							_1('span',$,6,5).flag('line'),
							_1('span',$,7,5).flag('col')
						],2)).end((
							$[6].setContent(sel[2],3),
							$[7].setText(":" + sel[3])
						,true))
					) : void(0)
				],1)
			) : void(0)
		],1).synced();
	};
});

var CodeSnippet = Imba.defineTag('CodeSnippet', function(tag){
	tag.prototype.uri = function(v){ return this._uri; }
	tag.prototype.setUri = function(v){ this._uri = v; return this; };
	tag.prototype.__code = {watch: 'codeDidSet',name: 'code'};
	tag.prototype.code = function(v){ return this._code; }
	tag.prototype.setCode = function(v){
		var a = this.code();
		if(v != a) { this._code = v; }
		if(v != a) { this.codeDidSet && this.codeDidSet(v,a,this.__code) }
		return this;
	};
	tag.prototype.__data = {watch: 'dataDidSet',name: 'data'};
	tag.prototype.data = function(v){ return this._data; }
	tag.prototype.setData = function(v){
		var a = this.data();
		if(v != a) { this._data = v; }
		if(v != a) { this.dataDidSet && this.dataDidSet(v,a,this.__data) }
		return this;
	};
	
	tag.prototype.dataDidSet = function (data){
		var v_;
		if (data) {
			this.setUri(data.uri);
			return (this.setCode(v_ = data.text),v_);
			// render
			// let ref = SCON.decodeURI(uri)
			// dataset(:file,ref:path) if ref
		};
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).setChildren($.$ = $.$ || [
			_1(CodeReference,$,0,this).flag('pill'),
			this._body = this._body||_1('div',this).flag('body')
		],2).synced((
			$[0].bindData(this,'data',[]).end()
		,true));
	};
	
	
	tag.prototype.codeDidSet = function (code){
		// log "codeDidSet",code
		if (false) {};
	};
});


var MessageView = Imba.defineTag('MessageView', function(tag){
	
	tag.prototype.__level = {'default': 0,name: 'level'};
	tag.prototype.level = function(v){ return this._level; }
	tag.prototype.setLevel = function(v){ this._level = v; return this; }
	tag.prototype._level = 0;
	
	tag.prototype.user = function (){
		return this.data().user();
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).setFlag(-1,("l" + this.level())).setChildren([
			($[0] || _1('div',$,0,this).flag('chip').setContent([
				_1(UserAvatar,$,1,0).flag('avatar').flag('gutter'),
				// <.body>
				_1('div',$,2,0).flag('main').setContent([
					_1('div',$,3,2).flag('h1').setContent($[4] || _1('a',$,4,3).flag('username'),2),
					_1('ul',$,5,2).flag('h3').flag('details').flag('muted')
				],2)
			],2)).end((
				$[1].bindData(this,'user',[]).end(),
				$[4].setHref(this.user().url()).setContent(this.user().name || this.user().username,3).end(),
				$[5].setContent([
					($[6] || _1('li',$,6,5).flag('age')).setContent(Format.timeAgo(this.data().ts),3),
					(this.level() == 0) ? (
						($[7] || _1('li',$,7,5).setContent($[8] || _1('a',$,8,7).flag('action').setNestedAttr('uxa','action','reply').setText("reply"),2)).end((
							$[8].end()
						,true))
					) : void(0)
				],1)
			,true)),
			
			this.data().anchor ? (
				($[9] || _1(CodeSnippet,$,9,this)).bindData(this.data(),'anchor').end()
			) : void(0),
			($[10] || _1('div',$,10,this).flag('content').flag('p').flag('sm')).setNestedAttr('uxa','md',this.data().body).end()
		],1).synced();
	};
});

var ThreadView = Imba.defineTag('ThreadView', function(tag){
	
	tag.prototype.build = function (){
		var v_;
		return (this.setTabindex(v_ = -1),v_);
	};
	
	tag.prototype.select = function (){
		return this.trigger('showannotation',this.data());
	};
	
	tag.prototype.onreply = async function (e){
		e.halt();
		await this.api().tryLogin();
		if (this.api().user()) {
			return Imba.mount((_1(ReplyForm)).bindData(this,'data',[]).setThread(this.data()).end(),this._foot.dom());
		};
	};
	
	tag.prototype.onfocus = function (){
		return this.select();
	};
	
	tag.prototype.render = function (){
		var $ = this.$, self = this;
		return self.$open(0).setChildren([
			$[0] || _1('div',$,0,self).flag('gutter-line'),
			$[1] || _1(MessageView,$,1,self).setLevel(0),
			(function tagLoop($0) {
				for (let i = 0, items = iter$(self.data().replies()), len = $0.taglen = items.length; i < len; i++) {
					($0[i] || _1(MessageView,$0,i).setLevel(1)).setData(items[i]).end();
				};return $0;
			})($[2] || _2($,2)),
			
			// <div.buttons.flat.sm>
			self._foot = self._foot||_1('div',self).flag('foot'),
			// <Button.inline.primary action='reply' label="Reply">
			$[3] || _1('div',$,3,self).flag('hr')
		],1).synced((
			$[1].bindData(self,'data',[]).end()
		,true));
	};
});

var ReplyForm = Imba.defineTag('ReplyForm', Form, function(tag){
	tag.prototype.thread = function(v){ return this._thread; }
	tag.prototype.setThread = function(v){ this._thread = v; return this; };
	
	tag.prototype.onuxasubmit = async function (e){
		var params = this.formData();
		this.log("uxasubmit",params);
		
		await this.api().tryLogin();
		if (!(e.data().body && this.api().user())) { return };
		
		params.uid = this.api().uid();
		await this.api().rpc('castCommentReply',[this.data().id,params]);
		return this.orphanize();
	};
	
	tag.prototype.oncancel = function (e){
		e.halt();
		return this.orphanize();
	};
	
	tag.prototype.mount = function (){
		return this._field.input().focus();
	};
	
	tag.prototype.user = function (){
		return this.api().user();
	};
	
	tag.prototype.render = function (){
		var $ = this.$, t0;
		return this.$open(0).flag('MessageView').flag('l1').setChildren($.$ = $.$ || [
			_1('div',$,0,this).flag('chip').setContent([
				_1(UserAvatar,$,1,0).flag('avatar').flag('gutter'),
				_1('div',$,2,0).flag('main').setContent([
					_1('div',$,3,2).flag('h1'),
					_1('div',$,4,2).flag('h3').flag('muted').setText("reply to question")
				],2)
			],2),
			
			t0 = (t0=_1('div',$,5,this)).flag('content').setContent(
				this._field = this._field||_1(TextArea,t0).flag('field').setName('body').setPlaceholder("Add a public comment")
			,2),
			
			_1('div',$,6,this).flag('flat').flag('buttons').setContent([
				_1(Button,$,7,6).flag('inline').flag('cancel').flag('muted').setAction('cancel').setType('button').setLabel("Cancel"),
				_1(Button,$,8,6).flag('inline').flag('submit').flag('primary').setType('submit').setLabel("Submit")
			// <button.submit.primary type='submit'> "Submit"
			],2)
		],2).synced((
			$[1].bindData(this,'user',[]).end(),
			$[3].setContent(this.user().name || this.user().username,3),
			this._field.end(),
			$[7].end(),
			$[8].end()
		,true));
	};
});

var DrawerDialog = Imba.defineTag('DrawerDialog', Dialog, function(tag){
	
	tag.prototype.hide = function (){
		return this.orphanize();
	};
});


var CommentDialog = Imba.defineTag('CommentDialog', DrawerDialog, function(tag){
	
	tag.prototype.build = function (){
		this.setSubmitLabel("Submit question");
		return this;
	};
	
	tag.prototype.space = function (){
		return this.data();
	};
	
	tag.prototype.currentCodeAnchor = function (){
		return this.space().view().editor().currentCodeAnchor();
	};
	
	tag.prototype.onuxasubmit = function (e){
		var self = this;
		var params = self.formData();
		var anchor = self.currentCodeAnchor();
		// await api.tryLogin
		params.uid = self.api().uid();
		params.offset = self.space().timeline().currentOffset();
		if (anchor && anchor.text != null) { params.anchor = anchor };
		console.log("submit!!",params);
		
		return self.uxa().queue().add(200,async function() {
			return await self.api().rpc('castComment',[self.space().id(),params]);
		});
	};
	
	tag.prototype.body = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		var anchor = this.currentCodeAnchor();
		
		return (t0 = this._body = this._body||(t0=_1('section',this)).flag('body')).setContent([
			(t0.$.A || _1('h2',t0.$,'A',t0).setText("Ask question")),
			(t0.$.B || _1('p',t0.$,'B',t0).setText("If your question is related to a specific piece of code, you can highlight this code in the editor. The question will then be linked directly to that snippet.")),
			(anchor && anchor.text) ? Imba.static([
				(t0.$.C || _1(CodeReference,t0.$,'C',t0).flag('pill')).setData(anchor).end(),
				(t0.$.D || _1(CodeSnippet,t0.$,'D',t0)).setData(anchor).end()
			],2,1) : void(0),
			
			(t0.$.E || _1('input',t0.$,'E',t0).setName('cid').setType('hidden')).setValue(this.space().branch().id(),1).end(),
			(t0.$.F || _1('input',t0.$,'F',t0).setName('anchor').setType('hidden')).setValue(anchor,1).end(),
			(this._field = this._field||_1(TextArea,t0).flag('field').setName('body').setPlaceholder("Write your question here ...")).end()
		// <.flat.buttons>
		// 	<Button.cancel.muted action='cancel' type='button' label="Cancel">
		// 	<Button.submit.primary type='submit' label="Submit">
		// <button.submit.primary type='submit'> "Submit"
		],1);
	};
});

var DrawerSection = Imba.defineTag('DrawerSection', function(tag){
	tag.prototype.space = function(v){ return this._space; }
	tag.prototype.setSpace = function(v){ this._space = v; return this; };
});

var DiscussionSection = Imba.defineTag('DiscussionSection', DrawerSection, function(tag){
	
	let desc = "Questions & answers related to this Scrimba. [Ask a question](#ask).";
	
	tag.prototype.ontaplink = function (e){
		if (e.data().href == '#ask') {
			e.prevent().halt();
			return this.trigger('ask');
		};
	};
	
	tag.prototype.render = function (){
		var $ = this.$, self = this;
		return self.$open(0).flag('section').setChildren([
			$[0] || _1('header',$,0,self).flag('header').setText("Discussion"),
			$[1] || _1('div',$,1,self).flag('body').flag('markdown').flag('sm'),
			// <nav.actions>
			// 	<Button.primary label='ask question' uxa:action='ask'>
			(function tagLoop($0) {
				for (let i = 0, items = iter$(self.data().questions()), len = $0.taglen = items.length, message; i < len; i++) {
					message = items[i];
					($0[i] || _1(ThreadView,$0,i)).setData(message).flagIf('selected',(self.space().annotation() == message)).end();
				};return $0;
			})($[2] || _2($,2))
		],1).synced((
			$[1].setNestedAttr('uxa','md',desc).end()
		,true));
	};
});

var AuthorSection = Imba.defineTag('AuthorSection', DrawerSection, function(tag){
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).setChildren($.$ = $.$ || [
			_1(UserAvatar,$,0,this).flag('avatar'),
			_1('div',$,1,this).flag('h3').flag('name').setContent($[2] || _1('a',$,2,1),2),
			_1('div',$,3,this).flag('social').setContent([
				_1('a',$,4,3).dataset('icon','twitter').setTarget('blank').setText("twitter"),
				_1('span',$,5,3).flag('vr'),
				_1('a',$,6,3).dataset('icon','github').setTarget('blank').setText("github")
			],2)
		],2).synced((
			$[0].bindData(this,'data',[]).end(),
			$[2].setHref(this.data().url()).setContent(this.data().name || this.data().username,3).end(),
			$[4].end(),
			$[6].end()
		,true));
	};
});

var AboutSection = Imba.defineTag('AboutSection', DrawerSection, function(tag){
	
	tag.prototype.render = function (){
		var $ = this.$;
		var owner = this.data().owner();
		
		return this.$open(0).setChildren(
			// about the cast
			$[0] || _1('div',$,0,this).flag('body').setContent([
				_1(UserAvatar,$,1,0).flag('avatar'),
				_1('div',$,2,0).flag('h2').flag('title'),
				_1('div',$,3,0).flag('h3').flag('sm').flag('name').setContent($[4] || _1('a',$,4,3),2),
				_1('ul',$,5,0).flag('bullets').flag('social').flag('details').flag('muted')
			],2)
		,2).synced((
			$[1].setData(owner).end(),
			$[2].setContent(this.data().title,3),
			$[4].setHref(owner.url()).setContent(owner.name || owner.username,3).end(),
			$[5].setContent([
				(owner.github_handle || owner.username) ? (
					($[6] || _1('li',$,6,5).setContent($[7] || _1('a',$,7,6).dataset('icon','github').setTarget('blank').setText("github"),2)).end((
						$[7].setHref(("https://github.com/" + (owner.github_handle || owner.username))).end()
					,true))
				) : void(0),
				owner.twitter_handle ? (
					($[8] || _1('li',$,8,5).setContent($[9] || _1('a',$,9,8).dataset('icon','twitter').setTarget('blank').setText("twitter"),2)).end((
						$[9].setHref(("https://twitter.com/" + (owner.twitter_handle))).end()
					,true))
				) : void(0),
				owner.medium_handle ? (
					($[10] || _1('li',$,10,5).setContent($[11] || _1('a',$,11,10).dataset('icon','medium').setTarget('blank').setText("medium"),2)).end((
						$[11].setHref(("https://medium.com/@" + (owner.medium_handle))).end()
					,true))
				) : void(0)
			
			// <span.vr>
			// <a data-icon='github' target='blank'> "github"
			],1)
		,true));
	};
});

var AskSection = Imba.defineTag('AskSection', DrawerSection, function(tag){
	
	tag.prototype.currentCodeAnchor = function (){
		return this.space().view().editor().currentCodeAnchor();
	};
	
	tag.prototype.onuxasubmit = function (e){
		var self = this;
		var params = self._form.formData();
		var anchor = self.currentCodeAnchor();
		// await api.tryLogin
		params.uid = self.api().uid();
		params.offset = self.space().timeline().currentOffset();
		if (anchor && anchor.text != null) { params.anchor = anchor };
		console.log("submit!!",params);
		
		return self._form.uxa().queue().add(200,async function() {
			await self.api().rpc('castComment',[self.space().id(),params]);
			self._form.dom().reset();
			self.trigger('gototab','discussion');
			return self.log("returned!!");
		});
	};
	
	
	tag.prototype.oncancel = function (e){
		e.halt();
		this._form.dom().reset();
		return this.trigger('gototab','discussion');
	};
	
	tag.prototype.render = function (){
		var $ = this.$, t0;
		var anchor = this.currentCodeAnchor();
		
		return this.$open(0).flag('section').setChildren(
			t0 = this._form = this._form||(t0=_1(Form,this)).flag('form').flag('body')
		,2).synced((
			this._form.setContent([
				($[0] || _1('p',$,0,this._form).flag('sm').setText("If your question is related to a specific piece of code, you can highlight this code in the editor. The question will then be linked directly to that snippet.")),
				(anchor && anchor.text) ? (
					($[1] || _1(CodeSnippet,$,1,this._form)).setData(anchor).end()
				) : void(0),
				($[2] || _1('input',$,2,this._form).setName('cid').setType('hidden')).setValue(this.space().branch().id(),1).end(),
				($[3] || _1('input',$,3,this._form).setName('anchor').setType('hidden')).setValue(anchor,1).end(),
				(this._field = this._field||_1(TextArea,t0).flag('field').flag('mb-md').setName('body').setPlaceholder("Write your question here ...")).end(),
				($[4] || _1(Button,$,4,t0).setAction('cancel').setLabel('cancel')).end(),
				($[5] || _1(Button,$,5,t0).flag('primary').setType('submit').setLabel('submit')).end()
			],1).end()
		,true));
	};
});


var InfoSection = Imba.defineTag('InfoSection', DrawerSection, function(tag){
	
	var fallback = "This Scrimba has no description.";
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).flag('section').setChildren($.$ = $.$ || [
			_1(AboutSection,$,0,this),
			this._body = this._body||_1('div',this).flag('body').flag('sm').flag('markdown')
		],2).synced((
			$[0].bindData(this,'data',[]).setSpace(this.space()).end(),
			this._body.setNestedAttr('uxa','md',(this.data().description || fallback)).end()
		,true));
	};
});

var NoteItem = Imba.defineTag('NoteItem', function(tag){
	
	tag.prototype.ontap = function (e){
		e.halt();
		return this.trigger('goto',this.data());
	};
	
	tag.prototype.onclose = function (e){
		e.halt();
		return this.log('onclose',e);
	};
	
	tag.prototype.ondel = function (e){
		e.halt();
		return this.log('ondel',e);
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		var owner = this.data().owner();
		return this.$open(0).flag('list-item').setChildren(
			$[0] || _1('div',$,0,this).flag('chip')
		,2).synced((
			$[0].setContent([
				owner ? (
					($[1] || _1(UserAvatar,$,1,0).flag('avatar').flag('gutter')).bindData(this.data(),'owner',[]).end()
				) : void(0),
				($[2] || _1('div',$,2,0).flag('main').setContent([
					_1('div',$,3,2).flag('h1'),
					_1('div',$,4,2).flag('h3').flag('details').flag('muted')
				],2)).end((
					$[3].setContent(this.data().title,3),
					$[4].setContent([
						($[5] || _1('span',$,5,4).flag('age')).setContent(Format.timeAgo(this.data().edited_at),3),
						this.data().isLocal() ? Imba.static([
							($[6] || _1('span',$,6,4).flag('vr')),
							($[7] || _1('span',$,7,4).flag('warn').setText("unsaved"))
						],2,1) : void(0)
					],1)
				,true)),
				// <.tools>
				// data-icon='cog' 
				this.data().isLocal() ? Imba.static([
					($[8] || _1('div',$,8,0).flag('tool').flag('neg').setNestedAttr('uxa','action','notediscard').setContent($[9] || _1('i',$,9,8).flag('sicon').dataset('name','circlecross'),2)).bindData(this,'data',[]).end((
						$[9].end()
					,true)),
					($[10] || _1('div',$,10,0).flag('tool').flag('pos').setNestedAttr('uxa','action','notesave').setContent($[11] || _1('i',$,11,10).flag('sicon').dataset('name','circlecheck'),2)).bindData(this,'data',[]).end((
						$[11].end()
					,true))
				],2,2) : (
					// <.tool uxa:action='close'> <i.sicon data-name='cog'>
					($[12] || _1('div',$,12,0).flag('tool').setNestedAttr('uxa','action','notedel').setContent($[13] || _1('i',$,13,12).flag('sicon').dataset('name','trash2'),2)).bindData(this,'data',[]).end((
						$[13].end()
					,true))
				)
			],1)
		,true));
	};
});


let aboutNotes = "Whenever you start playing around with the code, a note will be created. All your notes are listed below.";

var NotesSection = Imba.defineTag('NotesSection', DrawerSection, function(tag){
	
	tag.prototype.render = function (){
		var $ = this.$, self = this;
		var model = self.space().branch().model();
		var count = len$(self.data().notes());
		return self.$open(0).flag('section').setChildren([
			($[0] || _1('header',$,0,self).flag('header').setText("Notes")),
			($[1] || _1('div',$,1,self).flag('body').flag('sm')).setNestedAttr('uxa','md',aboutNotes).end(),
			(count == 0) ? (
				($[2] || _1('div',$,2,self).flag('body').flag('tip').flag('p').flag('sm').setText("You don't have any notes in this Scrimba. You can pause and edit the cast at any time to create a note."))
			) : (
				($[3] || _1('div',$,3,self).flag('body').flag('items')).setContent((function tagLoop($0) {
					for (let i = 0, items = iter$(self.data().notes()), len = $0.taglen = items.length, item; i < len; i++) {
						item = items[i];
						($0[i] || _1(NoteItem,$0,i)).setData(item).flagIf('selected',(item == model)).end();
					};return $0;
				})($[4] || _2($,4,$[3])),4)
			)
		// if model.isNote
		// 	<nav.actions>
		// 		<Button.primary[space.trunk] label='resume watching' uxa:action='goto'>
		],1).synced();
	};
});

var PlaylistItem = Imba.defineTag('PlaylistItem', function(tag){
	tag.prototype.playlist = function(v){ return this._playlist; }
	tag.prototype.setPlaylist = function(v){ this._playlist = v; return this; };
	tag.prototype.space = function(v){ return this._space; }
	tag.prototype.setSpace = function(v){ this._space = v; return this; };
	
	
	tag.prototype.onplay = function (e){
		e.halt();
		return this.router().go(this.data().url(this.playlist()));
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).flag('list-item').flagIf('selected',(this.space().model() == this.data())).setChildren(
			$[0] || _1('div',$,0,this).flag('chip').setNestedAttr('uxa','action','play').setContent([
				// <CastPreview[data].sm.figure.gutter type=data:type maxlines=6>
				_1('div',$,1,0).flag('main').setContent([
					_1('div',$,2,1).flag('h2').flag('ellipsis'),
					_1('ul',$,3,1).flag('h3').flag('muted').flag('bullets')
				],2),
				_1('div',$,6,0).flag('tool').flag('play').setNestedAttr('uxa','action','play').setContent($[7] || _1('i',$,7,6).flag('sicon').dataset('name','circleplay'),2)
			],2)
		,2).synced((
			$[0].end((
				$[2].setContent(this.data().title,3),
				$[3].setContent([
					($[4] || _1('li',$,4,3)).setContent(this.data().owner().name,3),
					this.data().duration ? (
						($[5] || _1('li',$,5,3).flag('duration')).setContent(Format.duration(this.data().duration),3)
					) : void(0)
				],1),
				$[6].bindData(this,'data',[]).end((
					$[7].end()
				,true))
			,true))
		,true));
	};
});

var PlaylistSection = Imba.defineTag('PlaylistSection', DrawerSection, function(tag){
	tag.prototype.render = function (){
		var $ = this.$, self = this;
		return self.$open(0).flag('section').setChildren($.$ = $.$ || [
			_1('header',$,0,self).flag('header').setText("Playlist"),
			_1('div',$,1,self).flag('body').flag('items')
		],2).synced((
			$[1].setContent((function tagLoop($0) {
				for (let i = 0, items = iter$(self.data().items()), len = $0.taglen = items.length; i < len; i++) {
					($0[i] || _1(PlaylistItem,$0,i)).setData(items[i]).setSpace(self.space()).setPlaylist(self.data()).end();
				};return $0;
			})($[2] || _2($,2,$[1])),4)
		,true));
	};
});

var SpaceDrawer = Imba.defineTag('SpaceDrawer', InterfaceView, function(tag){
	
	tag.prototype.space = function(v){ return this._space; }
	tag.prototype.setSpace = function(v){ this._space = v; return this; };
	tag.prototype.__mode = {watch: 'modeDidSet',name: 'mode'};
	tag.prototype.mode = function(v){ return this._mode; }
	tag.prototype.setMode = function(v){
		var a = this.mode();
		if(v != a) { this._mode = v; }
		if(v != a) { this.modeDidSet && this.modeDidSet(v,a,this.__mode) }
		return this;
	};
	tag.prototype.__tab = {'default': 'about',watch: 'tabDidSet',name: 'tab'};
	tag.prototype.tab = function(v){ return this._tab; }
	tag.prototype.setTab = function(v){
		var a = this.tab();
		if(v != a) { this._tab = v; }
		if(v != a) { this.tabDidSet && this.tabDidSet(v,a,this.__tab) }
		return this;
	}
	tag.prototype._tab = 'about';
	
	// Permanent
	// persistent
	// temporary
	// Mini variant
	// Temporary
	
	var tabs = ['about','notes','discussion','playlist','ask'];
	var titles = {discussion: 'q&a'};
	
	tag.prototype.onask = async function (e){
		e.halt();
		await this.api().tryLogin();
		if (this.api().user()) {
			this.setEnabled(true);
			this.setTab('ask');
			return this.render();
		};
	};
	
	tag.prototype.build = function (){
		if (false) {};
		return this;
	};
	
	tag.prototype.oncontextmenu = function (e){
		return e.stop();
	};
	
	tag.prototype.canViewTab = function (name){
		if (name == 'playlist') {
			return !(!this.space().playlist());
		} else {
			return true;
		};
	};
	
	tag.prototype.tabDidSet = function (tab,prev){
		return this.api().sessionStore().set('space-drawer-tab',tab);
	};
	
	tag.prototype.modeDidSet = function (mode){
		return this.setFlag('mode',mode);
	};
	
	tag.prototype.setup = function (){
		var self = this;
		tag.prototype.__super__.setup.apply(self,arguments);
		
		if (!self.canViewTab(self._tab)) {
			self._tab = 'about';
		};
		
		self.space().on('branch:enter',function(branch) {
			// log "SpaceDrawer branch:enter!",branch
			var v_;
			if (branch.isNote()) {
				return (self.setTab(v_ = 'notes'),v_);
			};
		});
		
		return self.space().on('playing',function(tl,fromState,offset,time) {
			// log "space is now playing!",fromState,offset,time
			// autohide drawer when we start playing on low-res screens
			if (time == 0 && self.api().vw() < 1800) {
				return (self.setEnabled(false),false);
			};
		});
	};
	
	tag.prototype.mount = function (){
		return this.schedule({events: true});
	};
	
	tag.prototype.toggle = function (){
		this.setEnabled(!(this.enabled()));
		return this.api().sessionStore().setobj('space-drawer-enabled',this.enabled());
	};
	
	tag.prototype.onclose = function (e){
		e.stop();
		return this.toggle();
	};
	
	tag.prototype.ongototab = function (e,tab){
		e.stop();
		return (this.setTab(tab),tab);
	};
	
	tag.prototype.closeDrawer = function (){
		return this.toggle();
	};
	
	tag.prototype.tick = function (){
		if (this.enabled()) {
			this.render();
		};
		return this;
	};
	
	tag.prototype.render = function (){
		var $ = this.$, self = this;
		return self.$open(0).flag('dark').setChildren($.$ = $.$ || [
			_1('div',$,0,self).flag('shade').setNestedAttr('uxa','action','close'),
			_1('div',$,1,self).flag('body'),
			self._dialogs = self._dialogs||_1('div',self).flag('dialogs'),
			// <.action.close uxa:action='close'> <i.sicon data-name='cross'>
			_1('div',$,10,self).flag('tool').flag('close').dataset('icon','mright').on$(0,['tap','closeDrawer'],self)
		],2).synced((
			$[0].end(),
			$[1].setContent(
				self.data() ? Imba.static([
					// <header> "About"
					// <AboutSection[data] space=space>
					
					($[2] || _1('div',$,2,1).flag('tabs')).setContent(
						
						(function tagLoop($0) {
							var $$ = $0.$iter();
							for (let i = 0, len = tabs.length, tab; i < len; i++) {
								tab = tabs[i];
								if (!self.canViewTab(tab)) { continue; };
								$$.push(($0[i] || _1('div',$0,i).flag('tab')).setFlag(0,tab).flagIf('selected',(tab == self.tab())).on$(0,['tap',['setTab',tab]],self).setContent(titles[tab] || tab,3));
							};return $$;
						})($[3] || _3($,3,$[2]))
					,5),
					($[4] || _1('div',$,4,1).flag('tabpane')).setContent(
						(self.tab() == 'about') ? (
							($[5] || _1(InfoSection,$,5,4)).bindData(self,'data',[]).setSpace(self.space()).end()
						) : ((self.tab() == 'notes') ? (
							($[6] || _1(NotesSection,$,6,4)).bindData(self,'data',[]).setSpace(self.space()).end()
						) : ((self.tab() == 'discussion') ? (
							($[7] || _1(DiscussionSection,$,7,4)).bindData(self,'data',[]).setSpace(self.space()).end()
						) : ((self.tab() == 'ask') ? (
							($[8] || _1(AskSection,$,8,4)).bindData(self,'space',[]).setSpace(self.space()).end()
						) : ((self.tab() == 'playlist') ? (
							($[9] || _1(PlaylistSection,$,9,4)).bindData(self.space(),'playlist',[]).setSpace(self.space()).end()
						) : void(0)))))
					,3)
				],2,1) : void(0)
			,3),
			$[10].end()
		,true));
	};
})
exports.SpaceDrawer = SpaceDrawer;
