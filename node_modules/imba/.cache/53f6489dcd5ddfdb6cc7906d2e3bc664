var Imba = require('imba'), _1 = Imba.createElement;
var uxa$ = require('uxa'), Dialog = uxa$.Dialog, SelectField = uxa$.SelectField, Button = uxa$.Button, TextField = uxa$.TextField;

var CommitDialog = Imba.defineTag('CommitDialog', Dialog, function(tag){
	
	tag.prototype.commitToGit = function(v){ return this._commitToGit; }
	tag.prototype.setCommitToGit = function(v){ this._commitToGit = v; return this; };
	tag.prototype.pushToGit = function(v){ return this._pushToGit; }
	tag.prototype.setPushToGit = function(v){ this._pushToGit = v; return this; };
	tag.prototype.scrimTitle = function(v){ return this._scrimTitle; }
	tag.prototype.setScrimTitle = function(v){ this._scrimTitle = v; return this; };
	tag.prototype.git = function(v){ return this._git; }
	tag.prototype.setGit = function(v){ this._git = v; return this; };
	
	tag.prototype.cancelLabel = function (){
		return "Cancel";
	};
	
	tag.prototype.submitLabel = function (){
		if (this.pushToGit() && this.commitToGit()) {
			return "Push + Commit";
		} else if (this.commitToGit()) {
			return "Commit";
		} else {
			return "Finish";
		};
	};
	
	tag.prototype.commitMessage = function (){
		return ("" + this.scrimTitle() + " (https://scrimba.com" + (this.model().url()) + ")");
	};
	
	tag.prototype.branch = function (){
		return this.data();
	};
	
	tag.prototype.space = function (){
		return this.branch().space();
	};
	
	tag.prototype.model = function (){
		return this.data().model();
	};
	
	tag.prototype.setup = function (){
		this.setScrimTitle(this.model().title());
		this.setGit(this.model().git());
		return tag.prototype.__super__.setup.apply(this,arguments);
	};
	
	tag.prototype.body = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		return (t0 = this._body = this._body||(t0=_1('div',this)).flag('body')).setContent([
			// <h1> 'End Scrim'
			(t0.$.A || _1('h4',t0.$,'A',t0).setText("Title")),
			(t0.$.B || _1('div',t0.$,'B',t0).flag('field').flag('text').flag('lg')).setContent([
				(t0.$.C || _1('input',t0.$,'C','B').setType('text')).bindData(this,'scrimTitle',[]).end(),
				(t0.$.D || _1('hr',t0.$,'D','B')),
				this.git() ? (
					(t0.$.E || _1('div',t0.$,'E','B').flag('help').flag('desc').setText("*A link to scrim will be appended to the final commit message"))
				) : void(0)
			],1),
			this.git() ? (
				(t0.$.F || _1('div',t0.$,'F',t0).flag('field').flag('sm').setContent([
					_1('div',t0.$,'G','F').flag('field').flag('checkbox').setContent([
						_1('input',t0.$,'H','G').setType('checkbox'),
						_1('label',t0.$,'I','G')
					],2),
					_1('div',t0.$,'J','F').flag('field').flag('checkbox')
				],2)).end((
					t0.$.H.bindData(this,'commitToGit',[]).end(),
					t0.$.I.setNestedAttr('uxa','md',("Commit scrim to **" + (this.git().branch) + "**")).end(),
					t0.$.J.setContent([
						(t0.$.K || _1('input',t0.$,'K','J').setType('checkbox')).bindData(this,'pushToGit',[]).setDisabled(!(this.commitToGit())).end(),
						this.git().remote ? (
							(t0.$.L || _1('label',t0.$,'L','J')).setNestedAttr('uxa','md',("Push to **" + (this.git().remote) + "**")).end()
						) : (
							(t0.$.M || _1('label',t0.$,'M','J')).setNestedAttr('uxa','md',("Publish branch **" + (this.git().branch) + "**")).end()
						),(t0.$.N || _1('p',t0.$,'N','J').flag('muted').flag('sm')).setContent(this.commitMessage(),3)
					],1)
				,true))
			) : void(0)
		],1);
	};
	
	tag.prototype.footer = function (){
		let $ = this.$$ || (this.$$ = {}), t0;
		return (t0 = this._footer = this._footer||(t0=_1('footer',this)).flag('footer').setContent(t0.$.A || _1('div',t0.$,'A',t0).flag('spaced').flag('bar').flag('justify-end').setContent([
			_1(Button,t0.$,'B','A').flag('link').setType('button').setLabel("Cancel").on$(0,['tap','tapDismiss'],this),
			_1(Button,t0.$,'C','A').flag('primary').setType('submit')
		],2),2)).end((
			t0.$.B.end(),
			t0.$.C.setLabel(this.submitLabel()).end()
		,true));
	};
	
	tag.prototype.onuxasubmit = function (e){
		var self = this;
		self.log('onsubmit');
		
		return self.uxa().queue().add(300,async function() {
			var user = await self.api().tryLogin();
			console.log("returned from api tryLogin",user);
			if (self.commitToGit()) {
				self.branch().machine().gitCommit({message: self.commitMessage(),push: !(!(self.pushToGit()))});
			};
			await self.model().update({title: self.scrimTitle()});
			return self;
		});
	};
})
exports.CommitDialog = CommitDialog;
