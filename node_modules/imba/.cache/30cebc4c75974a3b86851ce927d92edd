function len$(a){
	return a && (a.len instanceof Function ? a.len() : a.length) || 0;
};
function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba');

function List(owner,array){
	this._owner = owner;
	this._array = [];
	this._im = {};
	for (let i = 0, items = iter$(array), len = items.length; i < len; i++) {
		this.add(items[i]);
	};
	this;
};

exports.List = List; // export class 
List.prototype.array = function(v){ return this._array; }
List.prototype.setArray = function(v){ this._array = v; return this; };

List.prototype.add = function (item,key){
	if (!this.has(item)) {
		this._array.push(item);
		this.register(item,key);
		this.emit('add',item);
	};
	return item;
};

List.prototype.update = function (items){
	var curr = this._array.slice();
	for (let i = 0, ary = iter$(curr), len = ary.length, item; i < len; i++) {
		item = ary[i];
		if (items.indexOf(item) < 0) {
			this.remove(item);
		};
	};
	
	for (let i = 0, ary = iter$(items), len = ary.length; i < len; i++) {
		this.add(ary[i]);
	};
	return this;
};

List.prototype.register = function (item,key){
	if (key != undefined) {
		this._im[key] = item;
	} else if (item.key instanceof Function) {
		if (null) {};
		this._im[key = item.key()] = item;
	};
	return key;
};

List.prototype.deregister = function (item){
	if (item && (item.key instanceof Function)) {
		this._im[item.key()] = null;
	};
	return this;
};


List.prototype.getNextId = function (){
	var i = this._nextId || (this._nextId = 0);
	while (++i < 10000){
		if (!this._im[i]) {
			return this._nextId = i;
		};
		i++;
	};
	
	return null;
};


List.prototype.at = function (index){
	return this._array[index];
};

List.prototype.first = function (){
	return this.at(0);
};

List.prototype.last = function (){
	return this.at(len$(this) - 1);
};

List.prototype.push = function (item){
	return this.add(item);
};

List.prototype.pop = function (){
	return this.remove(this.last());
	// @array.pop
};

List.prototype.shift = function (){
	return this.remove(this.first());
	// @array.shift
};

List.prototype.splice = function (idx,remcount){
	var $0 = arguments, i = $0.length;
	var insert = new Array(i>2 ? i-2 : 0);
	while(i>2) insert[--i - 2] = $0[i];
	for (let i = 0, items = iter$(insert), len = items.length; i < len; i++) {
		this.register(items[i]);
	};
	this._array.splice.apply(this._array,[].concat([idx,remcount], [].slice.call(insert)));
	return this;
};

List.prototype.remove = function (item){
	if (this._im[item]) {
		item = this._im[item];
	};
	
	var idx = this.indexOf(item);
	if (idx >= 0) {
		this._array.splice(idx,1);
		// remove from map
		this.deregister(item);
		this.emit('remove',item);
	};
	return this;
};

List.prototype.delete = function (item){
	return this.remove(item);
};

List.prototype.move = function (item,index){
	var prevIdx = this.indexOf(item);
	if (prevIdx >= 0) {
		this._array[prevIdx] = null;
		this._array.splice(index,0,item);
		this._array.splice(this._array.indexOf(null),1);
	} else {
		console.log("List.splice at",index,0,item);
		this._array.splice(index,0,item);
		this.register(item);
	};
	return this;
};

List.prototype.has = function (item){
	return this.indexOf(item) >= 0 || (typeof item != 'object' && this._im[item]);
};

List.prototype.get = function (item){
	if (this._im[item]) {
		return this._im[item];
	};
};

List.prototype.map = function (cb){
	return this.toArray().map(cb);
};

List.prototype.forEach = function (cb){
	return this.toArray().forEach(cb);
};

List.prototype.first = function (cb){
	if (cb) {
		return this.filter(cb)[0];
	} else {
		return this._array[0];
	};
};

List.prototype.find = function (cb){
	return this.toArray().find(cb);
};

List.prototype.filter = function (cb){
	return this.toArray().filter(cb);
};

List.prototype.any = function (cb){
	return this.filter(cb).length > 0;
};

List.prototype.indexOf = function (item){
	return this._array.indexOf(item);
};

List.prototype.load = function (items){
	this._array = (items instanceof Array) ? items : items.toArray();
	return this;
};

List.prototype.eachReversed = function (cb){
	var i = len$(this);
	while (i > 0){
		cb(this._array[--i],i);
	};
	return this;
};

List.prototype.toArray = function (){
	return this._array;
};

List.prototype.toClonedArray = function (){
	return this._array.slice(0);
};

List.prototype.len = function (){
	return this._array.length;
};

List.prototype.lookup = function (key,loader){
	return this;
};

List.prototype.emit = function (name){
	// console.log 'List emit',self,name,params
	var $0 = arguments, i = $0.length;
	var params = new Array(i>1 ? i-1 : 0);
	while(i>1) params[--i - 1] = $0[i];
	return Imba.emit(this,name,params);
};

List.prototype.on = function (name){
	var Imba_;
	var $0 = arguments, i = $0.length;
	var params = new Array(i>1 ? i-1 : 0);
	while(i>1) params[--i - 1] = $0[i];
	return Imba.listen.apply(Imba,[].concat([this,name], [].slice.call(params)));
};

List.prototype.un = function (name){
	var Imba_;
	var $0 = arguments, i = $0.length;
	var params = new Array(i>1 ? i-1 : 0);
	while(i>1) params[--i - 1] = $0[i];
	return Imba.unlisten.apply(Imba,[].concat([this,name], [].slice.call(params)));
};

List.prototype.toJSON = function (){
	return this._array;
};

function ModelList(){ return List.apply(this,arguments) };

Imba.subclass(ModelList,List);
exports.ModelList = ModelList; // export class 

