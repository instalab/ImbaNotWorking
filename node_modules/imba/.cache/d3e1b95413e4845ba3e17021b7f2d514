function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _1 = Imba.createElement;
var Widget = require('./widget').Widget;
var List = require('../util/List').List;
var InterfaceView = require('../views/InterfaceView').InterfaceView;

var InspectorView = Imba.defineTag('InspectorView', InterfaceView, function(tag){
	
	tag.prototype.enabled = function (){
		return true;
	};
	
	tag.prototype.space = function (){
		return this.data().space();
	};
	
	tag.prototype.flex = function (){
		return "0 0 " + Math.round(this.data().colspan() / 1.2).toFixed() + "%";
	};
	
	tag.prototype.createTerminalSession = function (){
		if (!this.space().me().isHost()) {
			return this.uxa().flash("Not allowed to create terminal session");
		};
		let session = this.space().terminal().createSession();
		session.open();
		return this;
	};
	
	tag.prototype.expand = function (){
		this.log('expand');
		this.data().setShowLineCount(30); // or less?
		return this;
	};
	
	tag.prototype.collapse = function (){
		this.data().setShowLineCount(10);
		return this;
	};
	
	tag.prototype.close = function (){
		this.log('close');
		this.data().close();
		// are we sure about this?
		return this.space().view().requestFocus(this.space().primaryEditor());
	};
	
	tag.prototype.focusWidgetForNode = function (){
		return this.data().currentPane() || this.data().space().console();
	};
	
	tag.prototype.render = function (){
		var $ = this.$, self = this;
		let curr = self.data().currentPane() || self.data().space().console();
		self.cssvars().set({showLineCount: self.data().showLineCount()});
		if (!self.data().shouldShow()) {
			self.unflag('show');
			return;
		};
		
		self.flag('show');
		return self.$open(0).flag('scroll').flag('enabled').setFlag(-1,self.data().dock()).setChildren($.$ = $.$ || [
			_1('header',$,0,self).setContent([
				_1('div',$,1,0).flag('tabs'),
				_1('div',$,2,0).flag('flexer'),
				_1('div',$,3,0).flag('tools')
			// <.tool :tap.createTerminalSession> 'T'
			],2),
			
			_1('section',$,8,self).flag('main')
		// data.space.console.node.end
		],2).synced((
			$[1].setContent(
				(function tagLoop($$) {
					for (let i = 0, items = iter$(self.data().panes()), len = items.length, item; i < len; i++) {
						item = items[i];
						$$.push(item.tab().flagIf('active',curr == item));
					};return $$;
				})([])
			,3),
			$[3].setContent([
				($[4] || _1('div',$,4,3).flag('tool').dataset('icon','add').on$(0,['tap','createTerminalSession'],self).setTip("New Terminal Session")).end(),
				(self.data().showLineCount() < 30) ? (
					($[5] || _1('div',$,5,3).flag('tool').dataset('icon','mup').on$(0,['tap','expand'],self)).end()
				) : (
					($[6] || _1('div',$,6,3).flag('tool').dataset('icon','mdown').on$(0,['tap','collapse'],self)).end()
				),
				($[7] || _1('div',$,7,3).flag('tool').dataset('icon','close').on$(0,['tap','close'],self).setTip("Close Inspector")).end()
			],1),
			$[8].setContent(
				curr ? (
					curr.node().setContext(curr).end()
				) : void(0)
			,3)
		,true));
	};
})
exports.InspectorView = InspectorView;

// could this be a tag directly
function InspectorWidget(){ return Widget.apply(this,arguments) };

Imba.subclass(InspectorWidget,Widget);
exports.InspectorWidget = InspectorWidget; // export class 
InspectorWidget.register('inspector');

InspectorWidget.option('visible');
InspectorWidget.option('dock',{options: ['right','bottom','detached'],'default': 'right'});
InspectorWidget.option('colspan',{'default': 40}); // just span instead?
InspectorWidget.option('collapsed',{'default': true});
InspectorWidget.option('currentPane',{type: 'widget'});
InspectorWidget.option('showLineCount',{'default': 10,mark: 'layout'});

InspectorWidget.prototype.__reveal = {'default': -1,chainable: true,watch: 'revealDidSet',name: 'reveal'};
InspectorWidget.prototype.reveal = function(v){ return v !== undefined ? (this.setReveal(v),this) : this._reveal; }
InspectorWidget.prototype.setReveal = function(v){
	var a = this.reveal();
	if(v != a) { this._reveal = v; }
	if(v != a) { this.revealDidSet && this.revealDidSet(v,a,this.__reveal) }
	return this;
}
InspectorWidget.prototype._reveal = -1;

InspectorWidget.prototype.panes = function (){
	return this._panes || (this._panes = new List(this,[]));
};

InspectorWidget.prototype.addPane = function (pane){
	this.panes().add(pane,pane.id());
	pane._container = this;
	return this;
};

InspectorWidget.prototype.removePane = function (pane){
	return this.panes().remove(pane,pane.id());
};

InspectorWidget.prototype.cssWidth = function (){
	return Math.round(this.colspan() / 1.2).toFixed() + '%';
};

InspectorWidget.prototype.shouldShow = function (){
	return (this.visible() != undefined) ? this.visible() : this.space().console().isEnabled();
};

InspectorWidget.prototype.node = function (){
	let $ = this.$$ || (this.$$ = {});
	return this._node || (this._node = this._node||_1(InspectorView,this).flag('node')).setData(this).end();
};

InspectorWidget.prototype.view = function (){
	return this.node();
};

InspectorWidget.prototype.revealDidSet = function (value){
	return this;
};

InspectorWidget.prototype.close = function (){
	this.setVisible(false);
	return this;
};

InspectorWidget.prototype.open = function (){
	this.setVisible(true);
	return this;
};
