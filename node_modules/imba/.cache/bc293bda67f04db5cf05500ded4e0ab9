function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _2 = Imba.createTagCache, _3 = Imba.createTagList, _1 = Imba.createElement;
var Avatar = require('../../client/Main').Avatar;
// import UserAvatar from '../../site/components/UserAvatar'

var offlineRtc = {
	audio: function(){
		return null;
	}
};

var Agent = Imba.defineTag('Agent', function(tag){
	
	tag.prototype.rtc = function (){
		return (this.space().isLive() && this.data().peer()) ? this.data().peer().rtc() : offlineRtc;
	};
	
	tag.prototype.space = function (){
		return this.data().space();
	};
	
	tag.prototype.ontap = function (e){
		var t0;
		let menu = (t0 = (t0=_1('div')).flag('menu').flag('inline').setContent([
			_1('div',t0.$,'A',t0).flag('item'),
			_1('div',t0.$,'B',t0).flag('item'),
			_1('div',t0.$,'C',t0).flag('item'),
			_1('div',t0.$,'D',t0).flag('item'),
			_1('div',t0.$,'E',t0).flag('item')
		],2)).end((
			t0.$.A.setText("" + (this.rtc().state())),
			t0.$.B.setText("" + (this.rtc().iceState())),
			t0.$.C.setText("" + (this.data().readyState())),
			t0.$.D.setText("" + (this.rtc()._connectionNumber)),
			t0.$.E.setText("" + (this.data().focus()))
		,true));
		return this.uxa().open(menu,{anchor: true});
	};
	
	tag.prototype.toggleMute = function (){
		if (this.rtc().audio()) {
			return this.rtc().audio().enabled = !this.rtc().audio().enabled;
		};
	};
	
	tag.prototype.state = function (){
		return this.space().isLive() ? ((this.rtc().iceState())) : this.data().readyState();
	};
	
	tag.prototype.renderDemo = function (){
		var $ = ($_ = this.$).$renderDemo$ || ($_.$renderDemo$ = _2(this));
		return this.$open('renderDemo0').flagIf('me',(this.data().isMe())).setFlag(-1,("agent-" + (this.data().color()))).setChildren($.$ = $.$ || [
			_1(Avatar,$,0,this).flag('avatar'),
			_1('div',$,1,this).flag('color')
		],2).synced((
			$[0].bindData(this,'data',[]).end()
		,true));
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		if (this.space().option('demo')) { return this.renderDemo() };
		
		this.flag('inactive',!this.data().isActive()); // .{rtc.iceState}
		return this.$open(0).setFlag(-1,this.state()).flagIf('me',(this.data().isMe())).setFlag(-2,("agent-" + (this.data().color()))).flagIf('muted',(this.rtc().audio() && !this.rtc().audio().enabled)).flagIf('has-mic',(this.rtc().audio())).setChildren([
			($[0] || _1(Avatar,$,0,this).flag('avatar')).bindData(this,'data',[]).end(),
			($[1] || _1('div',$,1,this).flag('color')),
			($[2] || _1('div',$,2,this).flag('controls')).setContent(
				this.space().isLive() ? (
					($[3] || _1('div',$,3,2).flag('mic').dataset('icon','mic').on$(0,['tap','stop','toggleMute'],this)).end()
				) : void(0)
			,3),
			this.space().isLive() ? (
				($[4] || _1('div',$,4,this).flag('ice').setContent($[5] || _1('span',$,5,4),2)).setFlag(0,this.rtc().iceState()).end((
					$[5].setContent(this.rtc().iceState(),3)
				,true))
			) : void(0)
		],1).synced();
	};
})
exports.Agent = Agent;

var Peer = Imba.defineTag('Peer', function(tag){
	tag.prototype.space = function(v){ return this._space; }
	tag.prototype.setSpace = function(v){ this._space = v; return this; };
	
	tag.prototype.rtc = function (){
		return this.data().rtc();
	};
	
	tag.prototype.agent = function (){
		return this.space().agentForPid(this.data().id);
	};
	
	tag.prototype.toggleMic = async function (){
		var v_;
		if (!this.data().isMe()) { return };
		
		if (!this.space().userMedia()) { // api.peer.media
			try {
				let stream = await this.api().media().getUserMedia();
				return (this.space().setUserMedia(stream),stream);
			} catch (e) {
				return true;
			};
		} else {
			return (this.space().setUserMedia(null),null);
		};
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).flagIf('anon',(!this.data().user())).setFlag(-1,("agent-" + (this.agent() && this.agent().color()))).flagIf('me',(this.data().isMe())).setFlag(-2,this.rtc().iceState()).flagIf('has-mic',(this.rtc().audio())).setChildren($.$ = $.$ || [
			_1(Avatar,$,0,this).flag('avatar'),
			_1('div',$,1,this).flag('color'),
			_1('div',$,2,this).flag('mic').on$(0,['tap','toggleMic'],this).setContent([
				_1('i',$,3,2).dataset('icon','mic'),
				_1('span',$,4,2).flag('state')
			],2)
		// if data.isMe
		// 	<.mic data-icon='mic'>
		// <span.id> rtc.remoteId
		// <span.state> rtc.iceState.slice(0,3)
		],2).synced((
			$[0].bindData(this.data(),'user',[]).end(),
			$[3].end()
		,true));
	};
})
exports.Peer = Peer;

var Agents = Imba.defineTag('Agents', function(tag){
	
	tag.prototype.space = function (){
		return this.data();
	};
	
	tag.prototype.render = function (){
		var self = this, $ = this.$;
		return self.$open(0).setChildren(
			(function tagLoop($0) {
				for (let i = 0, items = iter$(self.data().agents()), len = $0.taglen = items.length; i < len; i++) {
					($0[i] || _1(Agent,$0,i)).setData(items[i]).end();
				};return $0;
			})($[0] || _3($,0))
		,4).synced();
	};
})
exports.Agents = Agents;
