function len$(a){
	return a && (a.len instanceof Function ? a.len() : a.length) || 0;
};


/*
	
null: regular -- push to history at current index
0: replace current
-n: go n back
+n: go n forward

All PAGE_REQUEST items has [method,url,history]

*/


var ACTION = require('../../protocol').ACTION;

function History(browser){
	this._browser = browser;
	this._index = 0;
	this._stack = [];
	this;
};

exports.History = History; // export class 
History.prototype.index = function(v){ return this._index; }
History.prototype.setIndex = function(v){ this._index = v; return this; };

History.prototype.replace = function (item){
	this._stack[this._index] = item;
	return this;
};

History.prototype.push = function (item){
	this._stack = this._stack.slice(0,this._index + 1);
	this._index = (this._stack.push(item) - 1);
	return this;
};

History.prototype.go = function (n,force){
	if(force === undefined) force = false;
	var to = this._index + n;
	var item = this._stack[this._index = to];
	
	if (force && item) {
		this._browser.push_(ACTION.PAGE_REQUEST,['get',item,n]);
	};
	
	return item;
};

History.prototype.apply = function (url,typ){
	var state = [this._index,this._stack.slice()];
	if (typ == null) {
		this.push(url);
	} else if (typ == 0) {
		this.replace(url);
	} else {
		let rel = this.go(typ);
		this.replace(url);
	};
	
	return state;
};

History.prototype.reset = function (state){
	this._index = state[0];
	this._stack = state[1];
	return this;
};

History.prototype.current = function (){
	return this._stack[this._index];
};

History.prototype.relative = function (n){
	return this._stack[this._index + n];
};

History.prototype.len = function (){
	return this._stack.length;
};

History.prototype.inspect = function (){
	return this._browser.api().log('history',this._stack,this._index);
};

History.prototype.hasNext = function (){
	return len$(this) > this._index + 1;
};

History.prototype.hasPrev = function (){
	return this._index > 0;
};
