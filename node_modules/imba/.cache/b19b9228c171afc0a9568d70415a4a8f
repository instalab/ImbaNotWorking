var Imba = require('imba');
var Resource$ = require('../store/Resource'), Resource = Resource$.Resource, MASK = Resource$.MASK;

var crypto;
if (true) {
	crypto = require('crypto');
};

function User(){ return Resource.apply(this,arguments) };

Imba.subclass(User,Resource);
exports.User = User; // export class 
User._serializer = {
	github_profile: MASK.NEVER,
	github_user_id: MASK.NEVER,
	roles: MASK.OWN,
	email: MASK.NEVER,
	password_hash: MASK.NEVER
};

User.prototype.notifyChannels = function (){
	return this.id;
};

User.prototype.casts = function (){
	var self = this;
	return self._cache.casts || (self._cache.casts = self.db().casts().sel({sort: ['-published_at','-created_at']},function(_0) { return _0.uid == self.id && !_0.archived_at; }));
};

User.prototype.drafts = function (){
	return this._cache.drafts || (this._cache.drafts = this.casts().sel({sort: '-created_at'},function(_0) { return _0.type == 'tutorial' && !_0.pub; }));
};

User.prototype.forks = function (){
	return this._cache.forks || (this._cache.forks = this.casts().sel({sort: '-created_at'},function(_0) { return _0.type == 'fork'; }));
};

User.prototype.playlists = function (){
	var self = this;
	return self._cache.playlists || (self._cache.playlists = self.db().playlists().sel(function(_0) { return _0.uid == self.id && !_0.archived_at; }));
};

User.prototype.memberships = function (){
	var self = this;
	return self._cache.memberships || (self._cache.memberships = self.db().memberships().sel(function(_0) { return _0.uid == self.id; }));
};

User.prototype.isMod = function (){
	return this.roles && this.roles.indexOf('mod') >= 0;
};

User.prototype.hasRole = function (role){
	return this.roles && this.roles.indexOf(role) >= 0;
};

User.prototype.beforeSerialize = function (){
	return this.createGravatarHash();
};

User.prototype.gravatarHash = function (){
	this.createGravatarHash();
	return this.gravatar_hash;
};

User.prototype.createGravatarHash = function (){
	if (true) {
		if (this.email) {
			return this.gravatar_hash || (this.gravatar_hash = crypto.createHash('md5').update(this.email).digest('hex'));
		};
	};
};

User.prototype.url = function (){
	if (this.username) {
		return ("/@" + (this.username));
	} else {
		return ("/" + (this.id));
	};
};


User.prototype.avatarUrl = function (s){
	var gravatar;
	if(s === undefined) s = 64;
	if (!this.username && (gravatar = this.gravatarHash())) {
		return ("https://www.gravatar.com/avatar/" + gravatar + "?s=" + s);
	} else {
		return ("https://avatars.githubusercontent.com/" + (this.username) + "?s=" + s);
	};
};
