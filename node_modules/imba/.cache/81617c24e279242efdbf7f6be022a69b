var Imba = require('imba'), _1 = Imba.createElement;
var ACTION = require('../protocol').ACTION;
var PaneTab = require('../views/PaneTab').PaneTab;
var Widget = require('./widget').Widget;

var PaneView = require('./PaneView').PaneView;
var PaneTab = require('../views/PaneTab').PaneTab;

exports.PaneTab = PaneTab;
exports.PaneView = PaneView;

var Dimensions = require('../core/Dimensions').Dimensions;

function PaneWidget(){ return Widget.apply(this,arguments) };

Imba.subclass(PaneWidget,Widget);
exports.PaneWidget = PaneWidget; // export class 
PaneWidget.register('pane');

PaneWidget.option('layout',{overridable: true,type: Dimensions,action: ACTION.LAYOUT});

PaneWidget.prototype.tab = function (){
	let $ = this.$$ || (this.$$ = {});
	return (this._tab = this._tab||_1(PaneTab,this).flag('tab')).setData(this).end();
};

PaneWidget.prototype.clientLayout = function (){
	// (@clientLayout ||= Dimensions.build({})).wrap(options.locals:layout)
	return (this._clientLayout || (this._clientLayout = new Dimensions(null))).wrap(this.options().locals().layout);
};

PaneWidget.prototype.streamLayout = function (){
	return (this._streamLayout || (this._streamLayout = Dimensions.build({}))).wrap(this._data.layout);
};

PaneWidget.prototype.agentLayout = function (){
	return this.streamLayout();
};

PaneWidget.prototype.localLayout = function (){
	return this.clientLayout();
};

PaneWidget.prototype.setLayout = function (data){
	return this.options().set('layout',data);
};

PaneWidget.prototype.streamPosToClientPos = function (pos){
	return this;
};

PaneWidget.prototype.posToScreen = function (px,py,sl,cl){
	sl || (sl = this.agentLayout());
	cl || (cl = this.localLayout());
	
	if (!(sl && cl && sl._data && cl._data)) {
		return null;
	};
	
	var absx = px;
	var absy = py;
	
	var sx = (cl.scaleX() || 1) / (sl.scaleX() || 1);
	var sy = (cl.scaleY() || 1) / (sl.scaleY() || 1);
	
	let relx = (absx - sl.left() + (sl.scrollLeft() || 0)) * sx;
	let rely = (absy - sl.top() + (sl.scrollTop() || 0)) * sy;
	
	let x = relx + cl.left() - (cl.scrollLeft() || 0);
	let y = rely + cl.top() - (cl.scrollTop() || 0);
	
	return [x,y];
};
