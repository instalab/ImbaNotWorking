var Imba = require('imba');
var Widget = require('./widget').Widget;
var protocol$ = require('../protocol'), WIDGET = protocol$.WIDGET, SCON = protocol$.SCON, ACTION = protocol$.ACTION;
var List = require('../util/List').List;

function SlideSteps(){ };

SlideSteps.equals = function (old,new$){
	return old && new$ && JSON.stringify(old) == JSON.stringify(new$);
};

function SlideWidget(){ return Widget.apply(this,arguments) };

Imba.subclass(SlideWidget,Widget);
exports.SlideWidget = SlideWidget; // export class 
SlideWidget.register('slide');

SlideWidget.option('extid');
SlideWidget.option('name');
SlideWidget.option('title');
SlideWidget.option('blobId');
SlideWidget.option('body'); // svg content
SlideWidget.option('meta');
SlideWidget.option('width');
SlideWidget.option('height');
SlideWidget.option('steps',{type: SlideSteps});
SlideWidget.option('currentStep',{'default': -1});

SlideWidget.prototype.setup = function (){
	var self = this;
	self._bodies = {};
	self._fetches = {inline: {then: function(cb) { return cb(self.body()); }}};
	return self;
};

SlideWidget.prototype.posToScreen = function (agent,px,py,sl,cl){
	return this;
};

SlideWidget.prototype.upload = async function (){
	var v_;
	if (this.body()) {
		var res = await this.space().api().uploadBlob(this.body());
		this.setBlobId(res.id);
		return (this.setBody(null),null);
	};
};

SlideWidget.prototype.preload = async function (){
	var svg;
	var res = await this.space().api().fetchBlob(this.blobId());
	return svg = await res.text();
};

SlideWidget.prototype.fetchBody = function (){
	// unless self.blobId
	// 	return @syncFetcher ||= {then: (do |cb| cb(self.body) )}
	var self = this;
	let blobId = self.blobId() || 'inline';
	return self._fetches[blobId] || (self._fetches[blobId] = new Promise(async function(resolve,reject) {
		var res = await self.space().api().fetchBlob(blobId);
		var svg = await res.text();
		self._bodies[blobId] = svg;
		self._fetches[blobId] = {then: function(cb) { return cb(svg); }};
		return resolve(svg);
	}));
};

SlideWidget.prototype.ext = function (){
	return this.name().substr(this.name().lastIndexOf('.') + 1);
};

SlideWidget.prototype.commitAdd = function (){
	SlideWidget.prototype.__super__.commitAdd.apply(this,arguments);
	return this;
};

SlideWidget.prototype.buffer = function (){
	return this.data().buffer || this.data().body;
};

SlideWidget.prototype.toString = function (){
	return this.body();
};

SlideWidget.prototype.persist_ = function (){
	return this;
};

SlideWidget.prototype.node = function (){
	return this._editor;
};

SlideWidget.prototype.isBinary = function (){
	return !(!(this.blobId()));
};
