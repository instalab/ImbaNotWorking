var Imba = require('imba');
var Resource = require('../store/Resource').Resource;

function Playlist(){ return Resource.apply(this,arguments) };

Imba.subclass(Playlist,Resource);
exports.Playlist = Playlist; // export class 
Playlist.prototype.items = function (){
	var self = this;
	if (self.item_ids) {
		return self.item_ids.ITEMS = self.item_ids.map(function(id) { return self.db().get(id); });
	} else {
		return self._cache.items || (self._cache.items = []);
	};
};

Playlist.prototype.feature = function (){
	return this.update({featured_at: new Date()});
};

Playlist.prototype.unfeature = function (){
	return this.update({featured_at: null});
};

Playlist.prototype.itemIndex = function (item){
	let idx = this.item_ids.indexOf(item.id || item);
	return idx;
};

Playlist.prototype.itemAfter = function (item){
	let idx = this.itemIndex(item);
	return (idx >= 0) ? this.items()[idx + 1] : null;
};

Playlist.prototype.itemBefore = function (item){
	let idx = this.itemIndex(item);
	return (idx >= 1) ? this.items()[idx - 1] : null;
};

Playlist.prototype.group = function (){
	return this.gid ? this.db().get(this.gid) : null;
};

Playlist.prototype.dependsOn = function (){
	// could use raw ids?
	return [this.db().get(this.uid)].concat(this.items());
};

Playlist.prototype.url = function (){
	return ("/playlist/" + (this.id));
};
