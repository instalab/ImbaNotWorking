var Imba = require('imba');

var MSG = require('../scrimba/protocol').MSG;
// should reside somewhere else
var Resource$ = require('../store/Resource'), Resource = Resource$.Resource, MASK = Resource$.MASK;
var PeerSocket = require('./PeerSocket').PeerSocket;

function Peer(){ return Resource.apply(this,arguments) };

Imba.subclass(Peer,Resource);
exports.Peer = Peer; // export class 
Peer.prototype.__ws = {watch: 'wsDidSet',name: 'ws'};
Peer.prototype.ws = function(v){ return this._ws; }
Peer.prototype.setWs = function(v){
	var a = this.ws();
	if(v != a) { this._ws = v; }
	if(v != a) { this.wsDidSet && this.wsDidSet(v,a,this.__ws) }
	return this;
};
Peer.prototype.rtc = function(v){ return this._rtc; }
Peer.prototype.setRtc = function(v){ this._rtc = v; return this; };

Peer._serializer = {
	eid: MASK.NEVER,
	uid: MASK.ALWAYS,
	worker: MASK.ALWAYS,
	ip: MASK.NEVER,
	// ua: MASK.NEVER
	secret: MASK.NEVER,
	sid: MASK.NEVER
};

Peer.prototype.peer = function (){
	return this;
};

Peer.prototype.secrets = function (){
	return this._secrets || (this._secrets = {});
};

Peer.prototype.rooms = function (){
	return this._rooms || (this._rooms = new Set());
};

Peer.prototype.name = function (){
	return this.user() && this.user().username || 'guest';
};

Peer.prototype.isMachine = function (){
	return this._data.ua && this._data.ua.indexOf('Scrimba') == 0;
};

Peer.prototype.isOnline = function (){
	return this._data.worker;
};

Peer.prototype.isMe = function (){
	return false;
};

Peer.prototype.user = function (){
	return this.db().users().get(this.uid);
};

Peer.prototype.entity = function (){
	return this.db().entities().get(this.eid);
};

Peer.prototype.wsDidSet = function (ws,prev){
	return console.log(("Peer.wsDidSet(" + (this.id) + ")"));
};

Peer.prototype.send = function (msg,o){
	if (false) {};
	
	if (this._ws) {
		return this._ws.send(msg,o);
	} else {
		return console.log(("Trying to send message to Peer(" + (this.id) + ") -- cannot reach"));
	};
};

Peer.prototype.api = function (){
	return this._api;
};

Peer.prototype.request = function (){
	return console.log("Peer.request");
};

Peer.prototype.setMedia = function (value){
	this.rtc().setMedia(value);
	return this;
};

Peer.prototype.media = function (){
	return this.rtc().media();
};

Peer.prototype.audio = function (){
	return this.rtc().audio();
};

Peer.prototype.video = function (){
	return this.rtc().video();
};

if (false) {};

function LocalPeer(){ return Peer.apply(this,arguments) };

Imba.subclass(LocalPeer,Peer);
exports.LocalPeer = LocalPeer; // export class 

