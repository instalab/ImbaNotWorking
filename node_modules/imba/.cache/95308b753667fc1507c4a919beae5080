function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba');
var InterfaceView = Imba.defineTag('InterfaceView', function(tag){
	
	tag.prototype.__hovered = {watch: 'hoveredDidSet',name: 'hovered'};
	tag.prototype.hovered = function(v){ return this._hovered; }
	tag.prototype.setHovered = function(v){
		var a = this.hovered();
		if(v != a) { this._hovered = v; }
		if(v != a) { this.hoveredDidSet && this.hoveredDidSet(v,a,this.__hovered) }
		return this;
	};
	tag.prototype.__enabled = {watch: 'enabledDidSet',name: 'enabled'};
	tag.prototype.enabled = function(v){ return this._enabled; }
	tag.prototype.setEnabled = function(v){
		var a = this.enabled();
		if(v != a) { this._enabled = v; }
		if(v != a) { this.enabledDidSet && this.enabledDidSet(v,a,this.__enabled) }
		return this;
	};
	tag.prototype.__transitionTime = {'default': 250,name: 'transitionTime'};
	tag.prototype.transitionTime = function(v){ return this._transitionTime; }
	tag.prototype.setTransitionTime = function(v){ this._transitionTime = v; return this; }
	tag.prototype._transitionTime = 250;
	
	tag.prototype.space = function (){
		return this.data();
	};
	
	tag.prototype.branch = function (){
		return this.data().branch();
	};
	
	tag.prototype.timeline = function (){
		return this.data().timeline();
	};
	
	tag.prototype.enabledDidSet = function (bool){
		if (false) {};
		
		this.flag('enabled',bool);
		this.flag('disabled',!bool);
		
		// if bool
		//	unflag('')
		
		// if we are currently over element
		// wait with hiding until mouse is out
		return bool ? this.reveal() : this.conceal();
	};
	
	tag.prototype.invalidated = function (){
		var $0 = arguments, i = $0.length;
		var params = new Array(i>0 ? i : 0);
		while(i>0) params[i-1] = $0[--i];
		let prev = this._guard || [];
		this._guard = params;
		for (let i = 0, items = iter$(params), len = items.length; i < len; i++) {
			if (params[i] != prev[i]) {
				this._version = (this._version || 0) + 1;
				return true;
			};
		};
		return false;
	};
	
	tag.prototype.reveal = function (){
		return this;
	};
	
	tag.prototype.conceal = function (){
		return this;
	};
	
	tag.prototype.commit = function (){
		if (this.enabled()) this.render();
		return this;
	};
	
	tag.prototype.exec = function (name){
		return this.space().actions().exec(name);
	};
})
exports.InterfaceView = InterfaceView;
