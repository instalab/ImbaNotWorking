function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _2 = Imba.createTagList, _1 = Imba.createElement;

var Editable = Imba.defineTag('Editable', function(tag){
	tag.prototype.__placeholder = {'default': " ",name: 'placeholder'};
	tag.prototype.placeholder = function(v){ return this.getAttribute('placeholder'); }
	tag.prototype.setPlaceholder = function(v){ this.setAttribute('placeholder',v); return this; }
	tag.prototype._placeholder = " ";
	
	tag.prototype.atStartModifier = function (){
		var sel;
		if (sel = this.selection()) {
			if (sel.isCollapsed && sel.baseOffset == 0) {
				return true;
			};
		};
		return false;
	};
	
	tag.prototype.build = function (){
		this.setTabindex(0);
		this.dom().textContent = "";
		
		try {
			this.dom().contentEditable = "plaintext-only";
		} catch (e) {
			this.dom().contentEditable = true;
		};
		
		return this.$open('build0').on$(-1,['keydown','left','atStart','stop','focusPrev'],this).on$(-2,['keydown','del','atStart','stop','focusPrev'],this).on$(-3,['keydown','enter','stop','prevent','submit'],this).synced();
	};
	
	tag.prototype.focusPrev = function (){
		try {
			return this.dom().previousElementSibling.focus();
		} catch (e) { };
	};
	
	tag.prototype.value = function (){
		return this.dom().innerText || "";
	};
	
	tag.prototype.selection = function (){
		var sel = window.getSelection();
		if (!(sel && this.dom().contains(sel.anchorNode))) { return null };
		return sel;
	};
	
	tag.prototype.oninput = function (e){
		return this.log('input',e);
	};
	
	tag.prototype.onkeydown = function (e){
		return e.stop();
	};
	
	tag.prototype.clear = function (){
		this.dom().textContent = "";
		return this;
	};
	
	tag.prototype.submit = function (){
		let e = this.trigger('add',this.value());
		this.log('submitted',e);
		if (!e.isPrevented()) {
			return this.clear();
		};
	};
	
	tag.prototype.render = function (){
		return this.flagIf('empty',this.value().trim() == "");
	};
});

var Value = Imba.defineTag('Value', function(tag){
	tag.prototype.index = function(v){ return this._index; }
	tag.prototype.setIndex = function(v){ this._index = v; return this; };
	
	tag.prototype.build = function (){
		var v_;
		return (this.setTabindex(v_ = -1),v_);
	};
	
	tag.prototype.gotoNext = function (){
		try {
			this.dom().nextElementSibling.focus();
		} catch (e) { };
		return this;
	};
	
	tag.prototype.gotoPrev = function (){
		try {
			this.dom().previousElementSibling.focus();
		} catch (e) { };
		return this;
	};
	
	tag.prototype.removeItem = function (){
		let next = this.dom().nextElementSibling;
		// dom:previousElementSibling ? gotoPrev : gotoNext
		if (next && next.matches('.Editable')) this.gotoNext();
		return this.trigger('remove',{index: this.index()});
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).dataset('value',this.data()).on$(-1,['keydown','left','gotoPrev'],this).on$(-2,['keydown','right','prevent','gotoNext'],this).on$(-3,['keydown','del','prevent','removeItem'],this).setChildren(
			$[0] || _1('span',$,0,this).flag('value')
		,2).synced((
			$[0].setContent(this.data(),3)
		,true));
	};
});

var TagInput = Imba.defineTag('TagInput', function(tag){
	
	tag.prototype.pattern = function(v){ return this._pattern; }
	tag.prototype.setPattern = function(v){ this._pattern = v; return this; };
	tag.prototype.formatter = function(v){ return this._formatter; }
	tag.prototype.setFormatter = function(v){ this._formatter = v; return this; };
	tag.prototype.__placeholder = {'default': "Add...",name: 'placeholder'};
	tag.prototype.placeholder = function(v){ return this._placeholder; }
	tag.prototype.setPlaceholder = function(v){ this._placeholder = v; return this; }
	tag.prototype._placeholder = "Add...";
	tag.prototype.__minlength = {'default': 0,name: 'minlength'};
	tag.prototype.minlength = function(v){ return this._minlength; }
	tag.prototype.setMinlength = function(v){ this._minlength = v; return this; }
	tag.prototype._minlength = 0;
	tag.prototype.__maxlength = {'default': 0,name: 'maxlength'};
	tag.prototype.maxlength = function(v){ return this._maxlength; }
	tag.prototype.setMaxlength = function(v){ this._maxlength = v; return this; }
	tag.prototype._maxlength = 0;
	
	tag.prototype.build = function (){
		return this._values = ['one','two'];
	};
	
	tag.prototype.bindData = function (data,key,args){
		this._proxy = [data,key,args];
		return this;
	};
	
	tag.prototype.values = function (){
		if (this._proxy) {
			let val = this._proxy[0][this._proxy[1]] || (this._proxy[0][this._proxy[1]] = []);
			return this._proxy[2] ? val.apply(this._proxy[0],this._proxy[2]) : val;
		} else {
			return this._values;
		};
	};
	
	tag.prototype.onadd = function (e,value){
		var values = this.values();
		var val = this._formatter ? this._formatter(value || '',values) : value;
		
		if (this.maxlength() && values.length >= this.maxlength()) {
			return this;
		};
		
		if (values.indexOf(val) < 0) {
			values.push(val);
		};
		return e.stop();
	};
	
	tag.prototype.onremove = function (e,pars){
		if(!pars||pars.constructor !== Object) pars = {};
		var index = pars.index !== undefined ? pars.index : null;
		if (index != null) {
			this.values().splice(index,1);
		};
		return this;
	};
	
	tag.prototype.render = function (){
		var self = this, $ = this.$;
		return self.$open(0).setChildren([
			(function tagLoop($0) {
				for (let i = 0, items = iter$(self.values()), len = $0.taglen = items.length; i < len; i++) {
					($0[i] || _1(Value,$0,i)).setData(items[i]).setIndex(i).end();
				};return $0;
			})($[0] || _2($,0)),
			$[1] || _1(Editable,$,1,self)
		],1).synced((
			$[1].setPlaceholder(self.placeholder()).end()
		,true));
	};
})
exports.TagInput = TagInput;
