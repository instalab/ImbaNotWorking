function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _2 = Imba.createTagList, _1 = Imba.createElement;

var Page = require('./Page').Page;
var Decoder = require('../../scrimba/tracking').Decoder;

var TrackingPage = Imba.defineTag('TrackingPage', Page, function(tag){
	tag.prototype.sid = function(v){ return this._sid; }
	tag.prototype.setSid = function(v){ this._sid = v; return this; };
	
	tag.prototype.load = async function (){
		this._stream = await this.api().rpc('trackingstream',[this.sid()]);
		this._decoder = new Decoder(this._stream.data);
		this._events = this._decoder.fetchAll();
		return this;
	};
	
	tag.prototype.reload = function (){
		return this.fetch();
	};
	
	tag.prototype.render = function (){
		var $ = this.$, self = this;
		return self.$open(0).setChildren(
			$[0] || _1('table',$,0,self).setContent([
				_1('thead',$,1,0).setContent([
					_1('th',$,2,1).setText("Timestamp"),
					_1('th',$,3,1).setText("Name"),
					_1('th',$,4,1).setText("Params")
				],2),
				_1('tbody',$,5,0)
			],2)
		,2).synced((
			$[5].setContent(
				(function tagLoop($0) {
					var t0;
					for (let i = 0, items = iter$(self._events), len = $0.taglen = items.length, evt; i < len; i++) {
						evt = items[i];
						(t0 = $0[i] || (t0=_1('tr',$0,i)).setContent([
							_1('td',t0.$,'A',t0),
							_1('td',t0.$,'B',t0),
							_1('td',t0.$,'C',t0)
						],2)).end((
							t0.$.A.setContent(evt.date(),3),
							t0.$.B.setContent(evt.name(),3),
							t0.$.C.setContent(JSON.stringify(evt.params()),3)
						,true));
					};return $0;
				})($[6] || _2($,6,$[5]))
			,4)
		,true));
	};
})
exports.TrackingPage = TrackingPage;


