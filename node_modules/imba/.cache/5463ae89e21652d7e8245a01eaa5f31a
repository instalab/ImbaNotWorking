function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba'), _2 = Imba.createTagList, _1 = Imba.createElement;
var util = require('../util');

var Elapsed = Imba.defineTag('Elapsed', function(tag){
	tag.prototype.__value = {watch: 'valueDidSet',name: 'value'};
	tag.prototype.value = function(v){ return this._value; }
	tag.prototype.setValue = function(v){
		var a = this.value();
		if(v != a) { this._value = v; }
		if(v != a) { this.valueDidSet && this.valueDidSet(v,a,this.__value) }
		return this;
	};
	
	tag.prototype.valueDidSet = function (val){
		return this.dom().style.transform = ("scaleX(" + val + ")");
	};
})
exports.Elapsed = Elapsed;

var BufferedRanges = Imba.defineTag('BufferedRanges', 'canvas', function(tag){
	
	tag.prototype.setup = function (){
		this.css(
			{position: 'absolute',
			top: 0,
			left: 0,
			width: '100%',
			height: '100%'}
		);
		return this;
	};
	
	tag.prototype.render = function (){
		var ranges = this.data().buffered();
		
		if (ranges == this._ranges) {
			return this;
		};
		
		this._ranges = ranges;
		var w = this.dom().offsetWidth;
		var h = this.dom().offsetHeight;
		
		this.dom().width = w;
		this.dom().height = h;
		
		var ctx = this.dom().getContext('2d');
		ctx.fillStyle = '#3b4d5b';
		
		for (let i = 0, items = iter$(ranges), len = items.length, range; i < len; i++) {
			range = items[i];
			let x1 = range[0] * w;
			let x2 = range[1] * w;
			ctx.fillRect(x1,0,x2 - x1,h);
		};
		return this;
	};
})
exports.BufferedRanges = BufferedRanges;

var Annotation = Imba.defineTag('Annotation', function(tag){
	
	tag.prototype.ontap = function (){
		return this.trigger('showannotation',this.data());
	};
	
	// capture the touch so that we don't automatically seek to pos
	tag.prototype.ontouchstart = function (t){
		return this;
	};
	
	tag.prototype.render = function (){
		var $ = this.$;
		return this.$open(0).setChildren($[0] || _1('i',$,0,this).dataset('icon','chat5'),2).synced((
			$[0].end()
		,true));
	};
});

var Annotations = Imba.defineTag('Annotations', function(tag){
	
	tag.prototype.timeline = function (){
		return this.data();
	};
	
	tag.prototype.collection = function (){
		return this.data().branch().model().questions();
	};
	
	// TODO add to uxa?
	tag.prototype.invalidated = function (){
		var $0 = arguments, i = $0.length;
		var params = new Array(i>0 ? i : 0);
		while(i>0) params[i-1] = $0[--i];
		let prev = this._guard || [];
		this._guard = params;
		for (let i = 0, items = iter$(params), len = items.length; i < len; i++) {
			if (params[i] != prev[i]) {
				this._version++;
				return true;
			};
		};
		return false;
	};
	
	tag.prototype.commit = function (){
		if (this.invalidated(this.collection().version())) {
			this.render();
		};
		return this;
	};
	
	tag.prototype.render = function (){
		var self = this, $ = this.$;
		self.log("render");
		let dur = self.timeline().duration();
		let pct = function(v) { return (v * 100).toFixed(3) + '%'; };
		
		// group annotations that are close to each other?
		
		return self.$open(0).setChildren(
			(function tagLoop($0) {
				for (let i = 0, items = iter$(self.collection()), len = $0.taglen = items.length, item; i < len; i++) {
					item = items[i];
					($0[i] || _1(Annotation,$0,i)).setData(item).css('left',pct(self.timeline().offsetToTime(item.offset) / dur)).end();
				};return $0;
			})($[0] || _2($,0))
		,4).synced();
	};
});


var Timeline = Imba.defineTag('Timeline', function(tag){
	tag.prototype.space = function (){
		return this.data().space();
	};
	
	tag.prototype.timeline = function (){
		return this.data().timeline();
	};
})
exports.Timeline = Timeline;

var TimelineView = Imba.defineTag('TimelineView', Timeline, function(tag){
	
	tag.prototype.setup = function (){
		var self = this;
		return self.data().space().on('resize',function() {
			self._dirty = true;
			return self;
		});
	};
	
	tag.prototype.ontouchstart = function (t){
		// @inset = @start.dom:offsetWidth
		this._box = this._track.dom().getBoundingClientRect();
		this.flag('seeking');
		return t.capture();
	};
	
	tag.prototype.ontouchupdate = function (t){
		let progress = (t.x() - this._box.left) / this._box.width;
		// console.log "progress",progress
		let pct = Math.max(Math.min(progress,1),0);
		let time = pct * this.timeline().duration();
		this.data().setState('seeking');
		this.timeline().seek(this.timeline().timeToOffset(time));
		return this;
	};
	
	tag.prototype.ontouchend = function (){
		this.data().setState(this.data().playState());
		this.unflag('seeking');
		return this;
	};
	
	tag.prototype.render = function (){
		var $ = this.$, t0;
		var branch = this.data().branch();
		let dur = this.timeline().duration();
		let time = Math.min(dur,this.timeline().currentTime());
		
		return this.$open(0).setFlag(-1,branch.state()).setFlag(-2,"tl-" + this.data().state()).setChildren($.$ = $.$ || [
			this._hitbox = this._hitbox||_1('div',this).flag('hitbox'),
			// <@start>
			t0 = this._track = this._track||(t0=_1('div',this)).flag('track').setContent(
				this._elapsed = this._elapsed||_1(Elapsed,t0).flag('elapsed')
			// <Annotations@annotations[data]>
			,2),
			// <@end>
			_1('div',$,0,this).flag('time').flag('elapsed').flag('label'),
			_1('div',$,1,this).flag('time').flag('remaining').flag('label')
		],2).synced((
			this._elapsed.setValue(Math.min(time / dur,1),1).end(),
			$[0].setContent(util.msToStr(time),3),
			$[1].setText("-" + util.msToStr(Math.max(dur - time),0))
		,true));
	};
})
exports.TimelineView = TimelineView;
