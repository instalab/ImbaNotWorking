var self = {};
var env = require('../env');
var STRIPE_SECRET_KEY = env.get("STRIPE_SECRET_KEY");
var STRIPE_ENDPOINT_SECRET = env.get("STRIPE_ENDPOINT_SECRET");
var stripe = require("stripe")(STRIPE_SECRET_KEY);
var paymentHooks = ["customer.source.created","invoice.created","invoice.payment_succeeded","charge.succeeded","customer.subscription.created","customer.subscription.deleted","customer.subscription.updated"];
var customerHooks = ["customer.created","customer.updated"];
var db = require('../server/db').db;

self.getCustomer = async function (id){
	return await stripe.customers.retrieve(id);
};


self.getCustomerId = function (event){
	if (paymentHooks.includes(event.type)) {
		return event.data.object.customer;
	} else if (customerHooks.includes(event.type)) {
		return event.data.object.id;
	} else {
		return false;
	};
};

exports.handleWebhook = self.handleWebhook = async function (signature,body){
	let event = stripe.webhooks.constructEvent(body,signature,STRIPE_ENDPOINT_SECRET);
	var id = self.getCustomerId(event);
	if (id) {
		var customer = await self.getCustomer(id);
		return await db.table('entities').update({stripe: customer}).where({id: customer.metadata.id});
	};
};


exports.updateCard = self.updateCard = async function (id,token,eid){
	var customer = await stripe.customers.update(id,{source: token});
	await db.table('entities').update({stripe: customer}).where({id: eid});
	return customer;
};


exports.createCustomer = self.createCustomer = async function (token,eid,quantity,type,user){
	var customer = await stripe.customers.create(
		{source: token,
		email: user.email,
		metadata: {
			id: eid
		}}
	);
	return await self.createSubscription(customer.id,type,eid,quantity);
};


exports.createSubscription = self.createSubscription = async function (customerId,type,eid,quantity){
	var planId = (type === 'user') ? env.get("STRIPE_PRO_PLAN") : env.get("STRIPE_TEAM_PLAN");
	var subscription = await stripe.subscriptions.create(
		{customer: customerId,
		items: [
			{plan: planId,
			quantity: quantity}
		]}
	);
	var customer = await self.getCustomer(customerId);
	return await db.table('entities').update({stripe: customer}).where({id: eid});
};


exports.cancelSubscription = self.cancelSubscription = async function (subscriptionId,customerId,eid){
	await stripe.subscriptions.update(subscriptionId,{cancel_at_period_end: true});
	var customer = await self.getCustomer(customerId);
	return await db.table('entities').update({stripe: customer}).where({id: eid});
};


exports.reactivateSubscription = self.reactivateSubscription = async function (subscriptionId,customerId,eid){
	await stripe.subscriptions.update(subscriptionId,{cancel_at_period_end: false});
	var customer = await self.getCustomer(customerId);
	return await db.table('entities').update({stripe: customer}).where({id: eid});
};
