var Imba = require('imba');
var EditorView = require('./EditorView').EditorView;
var MonacoView = require('./MonacoView').MonacoView;

// externs;

var DiffEditorView = Imba.defineTag('DiffEditorView', MonacoView, function(tag){
	
	tag.prototype.modelDidSet = function (model,prev){
		return true;
	};
	
	tag.prototype.onDidChangeCursorSelection = function (e){
		return console.log("DidChangeCursorSelection",e);
		// if file and !space.isSyncing and !@syncing
		//	# console.log 'cursorChange',e
		//	file.model.onDidChangeCursorSelection(e)
		//	Imba.commit(e)
	};
	
	tag.prototype.loaded = function (){
		var self = this;
		let mod = self._editor.getModifiedEditor();
		self.disposables().push(mod.onDidLayoutChange(self.onDidLayoutChange.bind(self)));
		self.disposables().push(mod.onDidFocusEditor(self.onDidFocusEditor.bind(self)));
		self.disposables().push(mod.onDidBlurEditor(self.onDidBlurEditor.bind(self)));
		self.disposables().push(mod.onDidChangeCursorSelection(self.onDidChangeCursorSelection.bind(self)));
		self.disposables().push(mod.onDidScrollChange(self.onDidScrollChange.bind(self)));
		self.space().on('reflow',function(dirty) { return self.relayout(true); });
		self._layoutInfo = self._editor.getLayoutInfo();
		return self;
	};
	
	tag.prototype.createEditor = function (opts){
		opts.renderSideBySide = false;
		this._originalModel = monaco.editor.createModel("just some text\n\nHello World\n\nSome more text","text/plain");
		this._modifiedModel = monaco.editor.createModel("just some Text\n\nHello World\n\nSome more changes","text/plain");
		var editor = monaco.editor.createDiffEditor(this.dom(),opts);
		editor.setModel({original: this._originalModel,modified: this._modifiedModel});
		DSE = editor;
		return editor;
	};
})
exports.DiffEditorView = DiffEditorView;

