
var KEYMAP = {
	"8": 'backspace'
	"9": 'tab'
	"13": 'enter'
	"16": 'shift'
	"17": 'ctrl'
	"18": 'alt'
	"19": 'break'
	"20": 'caps'
	"27": 'esc'
	"32": 'space'
	"35": 'end'
	"36": 'home'
	"37": 'larr'
	"38": 'uarr'
	"39": 'rarr'
	"40": 'darr'
	"45": 'insert'
	"46": 'delete'
	"107": 'plus'
	"106": 'mult'
	"91": 'meta'
}

var CHARMAP = {
	"%": 'modulo'
	"*": 'multiply'
	"+": 'add'
	"-": 'sub'
	"/": 'divide'
	".": 'dot'
}

extend class Imba.Tag

	def closest sel
		return parent unless sel # should return self?!
		var node = self
		sel = sel.query if sel:query

		while node
			return node if node.matches(sel)
			node = node.parent
		return null

	def style= style
		setAttribute('style',style)
		self

	def style
		getAttribute('style')

	###
	Get the index of node.
	@return {Number}
	###
	def index
		var i = 0
		var el = dom
		while el:previousSibling
			el = el:previousSibling
			i++
		return i

	###
	The .append method inserts the specified content as the last child
	of the target node. If the content is already a child of node it
	will be moved to the end.
	
		var root = <div.root>
		var item = <div.item> "This is an item"
		root.append item # appends item to the end of root

		root.append "some text" # append text
		root.append [<ul>,<ul>] # append array
	###
	def append item
		# possible to append blank
		# possible to simplify on server?
		return self unless item

		if item isa Array
			member && append(member) for member in item

		elif item isa String or item isa Number
			var node = Imba.document.createTextNode(item)
			@dom.appendChild(node)
			@empty = no if @empty			
		else
			# should delegate to self.appendChild
			appendChild(item)
			@empty = no if @empty

		return self

	###
	@todo Should support multiple arguments like append

	The .prepend method inserts the specified content as the first
	child of the target node. If the content is already a child of 
	node it will be moved to the start.
	
		node.prepend <div.top> # prepend node
		node.prepend "some text" # prepend text
		node.prepend [<ul>,<ul>] # prepend array

	###
	def prepend item
		var first = @dom:childNodes[0]
		first ? insertBefore(item, first) : appendChild(item)
		self


extend class Imba.Event
	###
	Get the normalized character for KeyboardEvent/TextEvent
	@return {String}
	###
	def keychar
		if event isa KeyboardEvent
			var ki = event:keyIdentifier or event:key
			var sym = KEYMAP[event:keyCode]

			if !sym 
				if ki.substr(0,2) == "U+"
					sym = String.fromCharCode(parseInt(ki.substr(2), 16))
				else
					sym = ki
			return sym

		elif event isa (window.TextEvent or window.InputEvent)
			return event:data

		return null