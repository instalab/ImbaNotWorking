function iter$(a){ return a ? (a.toArray ? a.toArray() : a) : []; };
var Imba = require('imba');

var KEYMAP = {
	"8": 'backspace',
	"9": 'tab',
	"13": 'enter',
	"16": 'shift',
	"17": 'ctrl',
	"18": 'alt',
	"19": 'break',
	"20": 'caps',
	"27": 'esc',
	"32": 'space',
	"35": 'end',
	"36": 'home',
	"37": 'larr',
	"38": 'uarr',
	"39": 'rarr',
	"40": 'darr',
	"45": 'insert',
	"46": 'delete',
	"107": 'plus',
	"106": 'mult',
	"91": 'meta'
};

var CHARMAP = {
	"%": 'modulo',
	"*": 'multiply',
	"+": 'add',
	"-": 'sub',
	"/": 'divide',
	".": 'dot'
};


	
	Imba.Tag.prototype.closest = function (sel){
		if (!sel) { return this.parent() }; // should return self?!
		var node = this;
		if (sel.query) { sel = sel.query() };
		
		while (node){
			if (node.matches(sel)) { return node };
			node = node.parent();
		};
		return null;
	};
	
	Imba.Tag.prototype.setStyle = function (style){
		this.setAttribute('style',style);
		this;
		return this;
	};
	
	Imba.Tag.prototype.style = function (){
		return this.getAttribute('style');
	};
	
	/*
		Get the index of node.
		@return {Number}
		*/
	
	Imba.Tag.prototype.index = function (){
		var i = 0;
		var el = this.dom();
		while (el.previousSibling){
			el = el.previousSibling;
			i++;
		};
		return i;
	};
	
	/*
		The .append method inserts the specified content as the last child
		of the target node. If the content is already a child of node it
		will be moved to the end.
		
			var root = <div.root>
			var item = <div.item> "This is an item"
			root.append item # appends item to the end of root
	
			root.append "some text" # append text
			root.append [<ul>,<ul>] # append array
		*/
	
	Imba.Tag.prototype.append = function (item){
		// possible to append blank
		// possible to simplify on server?
		if (!item) { return this };
		
		if (item instanceof Array) {
			for (var i = 0, items = iter$(item), len = items.length, member; i < len; i++) {
				member = items[i];
				member && this.append(member);
			};
		} else if ((typeof item=='string'||item instanceof String) || (typeof item=='number'||item instanceof Number)) {
			var node = Imba.document().createTextNode(item);
			this._dom.appendChild(node);
			if (this._empty) { this._empty = false };
		} else {
			// should delegate to self.appendChild
			this.appendChild(item);
			if (this._empty) { this._empty = false };
		};
		
		return this;
	};
	
	/*
		@todo Should support multiple arguments like append
	
		The .prepend method inserts the specified content as the first
		child of the target node. If the content is already a child of 
		node it will be moved to the start.
		
			node.prepend <div.top> # prepend node
			node.prepend "some text" # prepend text
			node.prepend [<ul>,<ul>] # prepend array
	
		*/
	
	Imba.Tag.prototype.prepend = function (item){
		var first = this._dom.childNodes[0];
		first ? this.insertBefore(item,first) : this.appendChild(item);
		return this;
	};




	/*
		Get the normalized character for KeyboardEvent/TextEvent
		@return {String}
		*/
	
	Imba.Event.prototype.keychar = function (){
		if (this.event() instanceof KeyboardEvent) {
			var ki = this.event().keyIdentifier || this.event().key;
			var sym = KEYMAP[this.event().keyCode];
			
			if (!sym) {
				if (ki.substr(0,2) == "U+") {
					sym = String.fromCharCode(parseInt(ki.substr(2),16));
				} else {
					sym = ki;
				};
			};
			return sym;
		} else if (this.event() instanceof (window.TextEvent || window.InputEvent)) {
			return this.event().data;
		};
		
		return null;
	};

